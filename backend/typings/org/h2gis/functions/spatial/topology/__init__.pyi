
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.sql
import org.h2gis.api
import org.locationtech.jts.geom
import typing



class ST_Graph(org.h2gis.api.AbstractFunction, org.h2gis.api.ScalarFunction):
    NODES_SUFFIX: typing.ClassVar[str] = ...
    EDGES_SUFFIX: typing.ClassVar[str] = ...
    PTS_TABLE: typing.ClassVar[str] = ...
    COORDS_TABLE: typing.ClassVar[str] = ...
    REMARKS: typing.ClassVar[str] = ...
    TYPE_ERROR: typing.ClassVar[str] = ...
    ALREADY_RUN_ERROR: typing.ClassVar[str] = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def createGraph(connection: java.sql.Connection, string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def createGraph(connection: java.sql.Connection, string: str, string2: str) -> bool: ...
    @typing.overload
    @staticmethod
    def createGraph(connection: java.sql.Connection, string: str, string2: str, double: float) -> bool: ...
    @typing.overload
    @staticmethod
    def createGraph(connection: java.sql.Connection, string: str, string2: str, double: float, boolean: bool) -> bool: ...
    @typing.overload
    @staticmethod
    def createGraph(connection: java.sql.Connection, string: str, string2: str, double: float, boolean: bool, boolean2: bool) -> bool: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_Node(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @staticmethod
    def node(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...

class ST_Polygonize(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @staticmethod
    def polygonize(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.functions.spatial.topology")``.

    ST_Graph: typing.Type[ST_Graph]
    ST_Node: typing.Type[ST_Node]
    ST_Polygonize: typing.Type[ST_Polygonize]
