
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jpype
import org.h2.value
import org.h2gis.api
import org.locationtech.jts.geom
import typing



class GeometryCoordinateDimension:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def convert(geometryCollection: org.locationtech.jts.geom.GeometryCollection, int: int) -> org.locationtech.jts.geom.GeometryCollection: ...
    @typing.overload
    @staticmethod
    def convert(lineString: org.locationtech.jts.geom.LineString, int: int) -> org.locationtech.jts.geom.LineString: ...
    @typing.overload
    @staticmethod
    def convert(linearRing: org.locationtech.jts.geom.LinearRing, int: int) -> org.locationtech.jts.geom.LinearRing: ...
    @typing.overload
    @staticmethod
    def convert(multiLineString: org.locationtech.jts.geom.MultiLineString, int: int) -> org.locationtech.jts.geom.MultiLineString: ...
    @typing.overload
    @staticmethod
    def convert(multiPoint: org.locationtech.jts.geom.MultiPoint, int: int) -> org.locationtech.jts.geom.MultiPoint: ...
    @typing.overload
    @staticmethod
    def convert(multiPolygon: org.locationtech.jts.geom.MultiPolygon, int: int) -> org.locationtech.jts.geom.MultiPolygon: ...
    @typing.overload
    @staticmethod
    def convert(polygon: org.locationtech.jts.geom.Polygon, int: int) -> org.locationtech.jts.geom.Polygon: ...
    @staticmethod
    def force(geometry: org.locationtech.jts.geom.Geometry, int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_AsBinary(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @staticmethod
    def toBytes(value: org.h2.value.Value) -> typing.MutableSequence[int]: ...

class ST_AsEWKB(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def asEWKB(value: org.h2.value.Value) -> typing.MutableSequence[int]: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_AsGML(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @staticmethod
    def toGML(geometry: org.locationtech.jts.geom.Geometry) -> str: ...

class ST_AsWKT(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def asWKT(geometry: org.locationtech.jts.geom.Geometry) -> str: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_Force2D(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def force2D(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_Force3D(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def convert(geometryCollection: org.locationtech.jts.geom.GeometryCollection, double: float) -> org.locationtech.jts.geom.GeometryCollection: ...
    @typing.overload
    @staticmethod
    def convert(lineString: org.locationtech.jts.geom.LineString, double: float) -> org.locationtech.jts.geom.LineString: ...
    @typing.overload
    @staticmethod
    def convert(linearRing: org.locationtech.jts.geom.LinearRing, double: float) -> org.locationtech.jts.geom.LinearRing: ...
    @typing.overload
    @staticmethod
    def convert(multiLineString: org.locationtech.jts.geom.MultiLineString, double: float) -> org.locationtech.jts.geom.MultiLineString: ...
    @typing.overload
    @staticmethod
    def convert(multiPoint: org.locationtech.jts.geom.MultiPoint, double: float) -> org.locationtech.jts.geom.MultiPoint: ...
    @typing.overload
    @staticmethod
    def convert(multiPolygon: org.locationtech.jts.geom.MultiPolygon, double: float) -> org.locationtech.jts.geom.MultiPolygon: ...
    @typing.overload
    @staticmethod
    def convert(polygon: org.locationtech.jts.geom.Polygon, double: float) -> org.locationtech.jts.geom.Polygon: ...
    @staticmethod
    def force(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def force3D(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def force3D(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_Force3DM(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def convert(geometryCollection: org.locationtech.jts.geom.GeometryCollection, double: float) -> org.locationtech.jts.geom.GeometryCollection: ...
    @typing.overload
    @staticmethod
    def convert(lineString: org.locationtech.jts.geom.LineString, double: float) -> org.locationtech.jts.geom.LineString: ...
    @typing.overload
    @staticmethod
    def convert(linearRing: org.locationtech.jts.geom.LinearRing, double: float) -> org.locationtech.jts.geom.LinearRing: ...
    @typing.overload
    @staticmethod
    def convert(multiLineString: org.locationtech.jts.geom.MultiLineString, double: float) -> org.locationtech.jts.geom.MultiLineString: ...
    @typing.overload
    @staticmethod
    def convert(multiPolygon: org.locationtech.jts.geom.MultiPolygon, double: float) -> org.locationtech.jts.geom.MultiPolygon: ...
    @typing.overload
    @staticmethod
    def convert(polygon: org.locationtech.jts.geom.Polygon, double: float) -> org.locationtech.jts.geom.Polygon: ...
    @typing.overload
    @staticmethod
    def force3DM(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def force3DM(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def forceXYM(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_Force4D(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def convert(geometryCollection: org.locationtech.jts.geom.GeometryCollection, double: float, double2: float) -> org.locationtech.jts.geom.GeometryCollection: ...
    @typing.overload
    @staticmethod
    def convert(lineString: org.locationtech.jts.geom.LineString, double: float, double2: float) -> org.locationtech.jts.geom.LineString: ...
    @typing.overload
    @staticmethod
    def convert(linearRing: org.locationtech.jts.geom.LinearRing, double: float, double2: float) -> org.locationtech.jts.geom.LinearRing: ...
    @typing.overload
    @staticmethod
    def convert(multiLineString: org.locationtech.jts.geom.MultiLineString, double: float, double2: float) -> org.locationtech.jts.geom.MultiLineString: ...
    @typing.overload
    @staticmethod
    def convert(multiPoint: org.locationtech.jts.geom.MultiPoint, double: float, double2: float) -> org.locationtech.jts.geom.MultiPoint: ...
    @typing.overload
    @staticmethod
    def convert(multiPolygon: org.locationtech.jts.geom.MultiPolygon, double: float, double2: float) -> org.locationtech.jts.geom.MultiPolygon: ...
    @typing.overload
    @staticmethod
    def convert(polygon: org.locationtech.jts.geom.Polygon, double: float, double2: float) -> org.locationtech.jts.geom.Polygon: ...
    @staticmethod
    def force(geometry: org.locationtech.jts.geom.Geometry, double: float, double2: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def force4D(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def force4D(geometry: org.locationtech.jts.geom.Geometry, double: float, double2: float) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_GeomFromGML(org.h2gis.api.DeterministicScalarFunction):
    gf: typing.ClassVar[org.locationtech.jts.geom.GeometryFactory] = ...
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str, int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_GeomFromText(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str, int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_GeomFromWKB(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toGeometry(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toGeometry(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_GoogleMapLink(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def generateGMLink(geometry: org.locationtech.jts.geom.Geometry) -> str: ...
    @typing.overload
    @staticmethod
    def generateGMLink(geometry: org.locationtech.jts.geom.Geometry, string: str) -> str: ...
    @typing.overload
    @staticmethod
    def generateGMLink(geometry: org.locationtech.jts.geom.Geometry, string: str, int: int) -> str: ...
    def getJavaStaticMethod(self) -> str: ...
    class LayerType(java.lang.Enum['ST_GoogleMapLink.LayerType']):
        m: typing.ClassVar['ST_GoogleMapLink.LayerType'] = ...
        k: typing.ClassVar['ST_GoogleMapLink.LayerType'] = ...
        h: typing.ClassVar['ST_GoogleMapLink.LayerType'] = ...
        p: typing.ClassVar['ST_GoogleMapLink.LayerType'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'ST_GoogleMapLink.LayerType': ...
        @staticmethod
        def values() -> typing.MutableSequence['ST_GoogleMapLink.LayerType']: ...

class ST_Holes(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def getHoles(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.GeometryCollection: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_LineFromText(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str, int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_LineFromWKB(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toLineString(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toLineString(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_MLineFromText(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str, int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_MPointFromText(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str, int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_MPolyFromText(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str, int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_Multi(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @staticmethod
    def toCollection(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...

class ST_OSMMapLink(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def generateLink(geometry: org.locationtech.jts.geom.Geometry) -> str: ...
    @typing.overload
    @staticmethod
    def generateLink(geometry: org.locationtech.jts.geom.Geometry, boolean: bool) -> str: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_PointFromText(org.h2gis.api.DeterministicScalarFunction):
    TYPE_ERROR: typing.ClassVar[str] = ...
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str, int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_PointFromWKB(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toPoint(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toPoint(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_PolyFromText(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toGeometry(string: str, int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_PolyFromWKB(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def toPolygon(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def toPolygon(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> org.locationtech.jts.geom.Geometry: ...

class ST_ToMultiLine(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def createMultiLineString(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.MultiLineString: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_ToMultiPoint(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def createMultiPoint(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.MultiPoint: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_ToMultiSegments(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def createSegments(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.MultiLineString: ...
    @typing.overload
    @staticmethod
    def createSegments(lineString: org.locationtech.jts.geom.LineString, list: java.util.List[org.locationtech.jts.geom.LineString]) -> None: ...
    def getJavaStaticMethod(self) -> str: ...

class UpdateGeometryZ:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def convert(geometryCollection: org.locationtech.jts.geom.GeometryCollection, double: float) -> org.locationtech.jts.geom.GeometryCollection: ...
    @typing.overload
    @staticmethod
    def convert(lineString: org.locationtech.jts.geom.LineString, double: float) -> org.locationtech.jts.geom.LineString: ...
    @typing.overload
    @staticmethod
    def convert(linearRing: org.locationtech.jts.geom.LinearRing, double: float) -> org.locationtech.jts.geom.LinearRing: ...
    @typing.overload
    @staticmethod
    def convert(multiLineString: org.locationtech.jts.geom.MultiLineString, double: float) -> org.locationtech.jts.geom.MultiLineString: ...
    @typing.overload
    @staticmethod
    def convert(multiPolygon: org.locationtech.jts.geom.MultiPolygon, double: float) -> org.locationtech.jts.geom.MultiPolygon: ...
    @typing.overload
    @staticmethod
    def convert(polygon: org.locationtech.jts.geom.Polygon, double: float) -> org.locationtech.jts.geom.Polygon: ...
    @staticmethod
    def force(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...

class ST_AsText(ST_AsWKT):
    def __init__(self): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.functions.spatial.convert")``.

    GeometryCoordinateDimension: typing.Type[GeometryCoordinateDimension]
    ST_AsBinary: typing.Type[ST_AsBinary]
    ST_AsEWKB: typing.Type[ST_AsEWKB]
    ST_AsGML: typing.Type[ST_AsGML]
    ST_AsText: typing.Type[ST_AsText]
    ST_AsWKT: typing.Type[ST_AsWKT]
    ST_Force2D: typing.Type[ST_Force2D]
    ST_Force3D: typing.Type[ST_Force3D]
    ST_Force3DM: typing.Type[ST_Force3DM]
    ST_Force4D: typing.Type[ST_Force4D]
    ST_GeomFromGML: typing.Type[ST_GeomFromGML]
    ST_GeomFromText: typing.Type[ST_GeomFromText]
    ST_GeomFromWKB: typing.Type[ST_GeomFromWKB]
    ST_GoogleMapLink: typing.Type[ST_GoogleMapLink]
    ST_Holes: typing.Type[ST_Holes]
    ST_LineFromText: typing.Type[ST_LineFromText]
    ST_LineFromWKB: typing.Type[ST_LineFromWKB]
    ST_MLineFromText: typing.Type[ST_MLineFromText]
    ST_MPointFromText: typing.Type[ST_MPointFromText]
    ST_MPolyFromText: typing.Type[ST_MPolyFromText]
    ST_Multi: typing.Type[ST_Multi]
    ST_OSMMapLink: typing.Type[ST_OSMMapLink]
    ST_PointFromText: typing.Type[ST_PointFromText]
    ST_PointFromWKB: typing.Type[ST_PointFromWKB]
    ST_PolyFromText: typing.Type[ST_PolyFromText]
    ST_PolyFromWKB: typing.Type[ST_PolyFromWKB]
    ST_ToMultiLine: typing.Type[ST_ToMultiLine]
    ST_ToMultiPoint: typing.Type[ST_ToMultiPoint]
    ST_ToMultiSegments: typing.Type[ST_ToMultiSegments]
    UpdateGeometryZ: typing.Type[UpdateGeometryZ]
