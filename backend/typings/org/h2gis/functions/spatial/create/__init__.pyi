
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.sql
import org.h2.tools
import org.h2.value
import org.h2gis.api
import org.locationtech.jts.geom
import org.locationtech.jts.operation.buffer
import typing



class GridRowSet(org.h2.tools.SimpleRowSource):
    @typing.overload
    def __init__(self, connection: java.sql.Connection, double: float, double2: float, string: str): ...
    @typing.overload
    def __init__(self, connection: java.sql.Connection, double: float, double2: float, geometry: org.locationtech.jts.geom.Geometry): ...
    def close(self) -> None: ...
    def getResultSet(self) -> java.sql.ResultSet: ...
    def isCenterCell(self) -> bool: ...
    def isRowColumnNumber(self) -> bool: ...
    def readRow(self) -> typing.MutableSequence[typing.Any]: ...
    def reset(self) -> None: ...
    def setCenterCell(self, boolean: bool) -> None: ...
    def setIsRowColumnNumber(self, boolean: bool) -> None: ...

class ST_BoundingCircle(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def computeBoundingCircle(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_BoundingCircleCenter(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def getCircumCenter(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Point: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_Expand(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def expand(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def expand(geometry: org.locationtech.jts.geom.Geometry, double: float, double2: float) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_Extrude(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def extrudeGeometry(geometry: org.locationtech.jts.geom.Geometry, double: float, int: int) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def extrudeGeometry(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.GeometryCollection: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_GeneratePoints(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def generatePoints(geometry: org.locationtech.jts.geom.Geometry, int: int) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_GeneratePointsInGrid(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def generatePointsInGrid(geometry: org.locationtech.jts.geom.Geometry, int: int, int2: int) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def generatePointsInGrid(geometry: org.locationtech.jts.geom.Geometry, int: int, int2: int, boolean: bool) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_MakeEllipse(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @staticmethod
    def makeEllipse(point: org.locationtech.jts.geom.Point, double: float, double2: float) -> org.locationtech.jts.geom.Polygon: ...

class ST_MakeEnvelope(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def makeEnvelope(double: float, double2: float, double3: float, double4: float) -> org.locationtech.jts.geom.Polygon: ...
    @typing.overload
    @staticmethod
    def makeEnvelope(double: float, double2: float, double3: float, double4: float, int: int) -> org.locationtech.jts.geom.Polygon: ...

class ST_MakeGrid(org.h2gis.api.AbstractFunction, org.h2gis.api.ScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def createGrid(connection: java.sql.Connection, value: org.h2.value.Value, double: float, double2: float) -> java.sql.ResultSet: ...
    @typing.overload
    @staticmethod
    def createGrid(connection: java.sql.Connection, value: org.h2.value.Value, double: float, double2: float, boolean: bool) -> java.sql.ResultSet: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_MakeGridPoints(org.h2gis.api.AbstractFunction, org.h2gis.api.ScalarFunction):
    def __init__(self): ...
    @staticmethod
    def createGridPoints(connection: java.sql.Connection, value: org.h2.value.Value, double: float, double2: float) -> java.sql.ResultSet: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_MakeLine(org.h2gis.api.DeterministicScalarFunction):
    REQUIRED_NUMBER_OF_POINTS: typing.ClassVar[int] = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def createLine(geometry: org.locationtech.jts.geom.Geometry, *geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.LineString: ...
    @typing.overload
    @staticmethod
    def createLine(geometryCollection: org.locationtech.jts.geom.GeometryCollection) -> org.locationtech.jts.geom.LineString: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_MakePoint(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def createPoint(double: float, double2: float) -> org.locationtech.jts.geom.Point: ...
    @typing.overload
    @staticmethod
    def createPoint(double: float, double2: float, double3: float) -> org.locationtech.jts.geom.Point: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_MakePolygon(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def makePolygon(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Polygon: ...
    @typing.overload
    @staticmethod
    def makePolygon(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Polygon: ...

class ST_MinimumRectangle(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def computeMinimumRectangle(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_OctogonalEnvelope(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def computeOctogonalEnvelope(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...

class ST_RingBuffer(org.h2gis.api.AbstractFunction, org.h2gis.api.ScalarFunction):
    def __init__(self): ...
    @staticmethod
    def computeNegativeRingBuffer(geometry: org.locationtech.jts.geom.Geometry, double: float, int: int, bufferParameters: org.locationtech.jts.operation.buffer.BufferParameters, boolean: bool) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def computePositiveRingBuffer(geometry: org.locationtech.jts.geom.Geometry, double: float, int: int, bufferParameters: org.locationtech.jts.operation.buffer.BufferParameters, boolean: bool) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def ringBuffer(geometry: org.locationtech.jts.geom.Geometry, double: float, int: int) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def ringBuffer(geometry: org.locationtech.jts.geom.Geometry, double: float, int: int, string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def ringBuffer(geometry: org.locationtech.jts.geom.Geometry, double: float, int: int, string: str, boolean: bool) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def runBuffer(geometry: org.locationtech.jts.geom.Geometry, double: float, bufferParameters: org.locationtech.jts.operation.buffer.BufferParameters) -> org.locationtech.jts.geom.Geometry: ...

class ST_MinimumBoundingCircle(ST_BoundingCircle):
    def __init__(self): ...

class ST_OrientedEnvelope(ST_MinimumRectangle):
    def __init__(self): ...

class ST_Point(ST_MakePoint):
    def __init__(self): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.functions.spatial.create")``.

    GridRowSet: typing.Type[GridRowSet]
    ST_BoundingCircle: typing.Type[ST_BoundingCircle]
    ST_BoundingCircleCenter: typing.Type[ST_BoundingCircleCenter]
    ST_Expand: typing.Type[ST_Expand]
    ST_Extrude: typing.Type[ST_Extrude]
    ST_GeneratePoints: typing.Type[ST_GeneratePoints]
    ST_GeneratePointsInGrid: typing.Type[ST_GeneratePointsInGrid]
    ST_MakeEllipse: typing.Type[ST_MakeEllipse]
    ST_MakeEnvelope: typing.Type[ST_MakeEnvelope]
    ST_MakeGrid: typing.Type[ST_MakeGrid]
    ST_MakeGridPoints: typing.Type[ST_MakeGridPoints]
    ST_MakeLine: typing.Type[ST_MakeLine]
    ST_MakePoint: typing.Type[ST_MakePoint]
    ST_MakePolygon: typing.Type[ST_MakePolygon]
    ST_MinimumBoundingCircle: typing.Type[ST_MinimumBoundingCircle]
    ST_MinimumRectangle: typing.Type[ST_MinimumRectangle]
    ST_OctogonalEnvelope: typing.Type[ST_OctogonalEnvelope]
    ST_OrientedEnvelope: typing.Type[ST_OrientedEnvelope]
    ST_Point: typing.Type[ST_Point]
    ST_RingBuffer: typing.Type[ST_RingBuffer]
