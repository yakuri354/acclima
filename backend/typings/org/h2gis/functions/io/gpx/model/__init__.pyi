
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.sql
import java.util
import jpype
import jpype.protocol
import org.h2gis.api
import org.h2gis.utilities
import org.locationtech.jts.geom
import org.xml.sax
import org.xml.sax.helpers
import typing



class AbstractGpxParser(org.xml.sax.helpers.DefaultHandler):
    def __init__(self): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def getContentBuffer(self) -> java.lang.StringBuilder: ...
    def getCurrentElement(self) -> str: ...
    def getCurrentLine(self) -> 'GPXLine': ...
    def getCurrentPoint(self) -> 'GPXPoint': ...
    def getCurrentSegment(self) -> 'GPXLine': ...
    def getElementNames(self) -> 'StringStack': ...
    def getGeometryFactory(self) -> org.locationtech.jts.geom.GeometryFactory: ...
    def getReader(self) -> org.xml.sax.XMLReader: ...
    def getRtePreparedStmt(self) -> java.sql.PreparedStatement: ...
    def getRteptPreparedStmt(self) -> java.sql.PreparedStatement: ...
    def getTrkPointsPreparedStmt(self) -> java.sql.PreparedStatement: ...
    def getTrkPreparedStmt(self) -> java.sql.PreparedStatement: ...
    def getTrkSegmentsPreparedStmt(self) -> java.sql.PreparedStatement: ...
    def getWptPreparedStmt(self) -> java.sql.PreparedStatement: ...
    def isSpecificElement(self) -> bool: ...
    def setContentBuffer(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setCurrentElement(self, string: str) -> None: ...
    def setCurrentLine(self, gPXLine: 'GPXLine') -> None: ...
    def setCurrentPoint(self, gPXPoint: 'GPXPoint') -> None: ...
    def setCurrentSegment(self, gPXLine: 'GPXLine') -> None: ...
    def setElementNames(self, stringStack: 'StringStack') -> None: ...
    def setReader(self, xMLReader: org.xml.sax.XMLReader) -> None: ...
    def setRtePreparedStmt(self, preparedStatement: java.sql.PreparedStatement) -> None: ...
    def setRteptPreparedStmt(self, preparedStatement: java.sql.PreparedStatement) -> None: ...
    def setSpecificElement(self, boolean: bool) -> None: ...
    def setTrkPointsPreparedStmt(self, preparedStatement: java.sql.PreparedStatement) -> None: ...
    def setTrkPreparedStmt(self, preparedStatement: java.sql.PreparedStatement) -> None: ...
    def setTrkSegmentsPreparedStmt(self, preparedStatement: java.sql.PreparedStatement) -> None: ...
    def setWptPreparedStmt(self, preparedStatement: java.sql.PreparedStatement) -> None: ...

class GPXCoordinate:
    def __init__(self): ...
    @staticmethod
    def createCoordinate(attributes: org.xml.sax.Attributes) -> org.locationtech.jts.geom.Coordinate: ...

class GPXLine:
    def __init__(self, int: int): ...
    def getValues(self) -> typing.MutableSequence[typing.Any]: ...
    def setAttribute(self, string: str, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setCmt(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setDesc(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setExtensions(self) -> None: ...
    def setGeometry(self, geometry: org.locationtech.jts.geom.Geometry) -> None: ...
    @typing.overload
    def setLink(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    @typing.overload
    def setLink(self, attributes: org.xml.sax.Attributes) -> None: ...
    def setLinkText(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setName(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setNumber(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setSrc(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setType(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setValue(self, int: int, object: typing.Any) -> None: ...

class GPXPoint:
    def __init__(self, int: int): ...
    def clearValues(self, int: int) -> None: ...
    def getValues(self) -> typing.MutableSequence[typing.Any]: ...
    def setAgeofdgpsdata(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setAttribute(self, string: str, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setCmt(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setDesc(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setDgpsid(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setElevation(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setExtensions(self) -> None: ...
    def setFix(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setGeoidheight(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setHdop(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    @typing.overload
    def setLink(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    @typing.overload
    def setLink(self, attributes: org.xml.sax.Attributes) -> None: ...
    def setLinkText(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setMagvar(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setName(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setPdop(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setSat(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setSrc(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setSym(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setTime(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setType(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    def setValue(self, int: int, object: typing.Any) -> None: ...
    def setVdop(self, stringBuilder: java.lang.StringBuilder) -> None: ...

class GPXTablesFactory:
    WAYPOINT: typing.ClassVar[str] = ...
    ROUTE: typing.ClassVar[str] = ...
    ROUTEPOINT: typing.ClassVar[str] = ...
    TRACK: typing.ClassVar[str] = ...
    TRACKSEGMENT: typing.ClassVar[str] = ...
    TRACKPOINT: typing.ClassVar[str] = ...
    @staticmethod
    def createRoutePointsTable(connection: java.sql.Connection, string: str) -> java.sql.PreparedStatement: ...
    @staticmethod
    def createRouteTable(connection: java.sql.Connection, string: str) -> java.sql.PreparedStatement: ...
    @staticmethod
    def createTrackPointsTable(connection: java.sql.Connection, string: str) -> java.sql.PreparedStatement: ...
    @staticmethod
    def createTrackSegmentsTable(connection: java.sql.Connection, string: str) -> java.sql.PreparedStatement: ...
    @staticmethod
    def createTrackTable(connection: java.sql.Connection, string: str) -> java.sql.PreparedStatement: ...
    @staticmethod
    def createWayPointsTable(connection: java.sql.Connection, string: str) -> java.sql.PreparedStatement: ...
    @staticmethod
    def dropOSMTables(connection: java.sql.Connection, tableLocation: org.h2gis.utilities.TableLocation) -> None: ...

class GPXTags:
    LINK: typing.ClassVar[str] = ...
    HREF: typing.ClassVar[str] = ...
    ID: typing.ClassVar[str] = ...
    EMAIL: typing.ClassVar[str] = ...
    DOMAIN: typing.ClassVar[str] = ...
    COPYRIGHT: typing.ClassVar[str] = ...
    AUTHOR: typing.ClassVar[str] = ...
    WPT: typing.ClassVar[str] = ...
    RTE: typing.ClassVar[str] = ...
    TRK: typing.ClassVar[str] = ...
    NAME: typing.ClassVar[str] = ...
    TEXT: typing.ClassVar[str] = ...
    YEAR: typing.ClassVar[str] = ...
    LICENSE: typing.ClassVar[str] = ...
    GPX: typing.ClassVar[str] = ...
    VERSION: typing.ClassVar[str] = ...
    CREATOR: typing.ClassVar[str] = ...
    BOUNDS: typing.ClassVar[str] = ...
    MINLAT: typing.ClassVar[str] = ...
    MAXLAT: typing.ClassVar[str] = ...
    MINLON: typing.ClassVar[str] = ...
    MAXLON: typing.ClassVar[str] = ...
    TIME: typing.ClassVar[str] = ...
    DESC: typing.ClassVar[str] = ...
    KEYWORDS: typing.ClassVar[str] = ...
    RTEPT: typing.ClassVar[str] = ...
    LON: typing.ClassVar[str] = ...
    LAT: typing.ClassVar[str] = ...
    TRKSEG: typing.ClassVar[str] = ...
    TRKPT: typing.ClassVar[str] = ...
    CMT: typing.ClassVar[str] = ...
    SRC: typing.ClassVar[str] = ...
    NUMBER: typing.ClassVar[str] = ...
    TYPE: typing.ClassVar[str] = ...
    EXTENSIONS: typing.ClassVar[str] = ...
    URL: typing.ClassVar[str] = ...
    ELE: typing.ClassVar[str] = ...
    MAGVAR: typing.ClassVar[str] = ...
    GEOIDHEIGHT: typing.ClassVar[str] = ...
    SYM: typing.ClassVar[str] = ...
    FIX: typing.ClassVar[str] = ...
    SAT: typing.ClassVar[str] = ...
    HDOP: typing.ClassVar[str] = ...
    VDOP: typing.ClassVar[str] = ...
    PDOP: typing.ClassVar[str] = ...
    AGEOFDGPSDATA: typing.ClassVar[str] = ...
    DGPSID: typing.ClassVar[str] = ...
    HREFTITLE: typing.ClassVar[str] = ...

class GpxMetadata:
    WPTFIELDCOUNT: typing.ClassVar[int] = ...
    RTEFIELDCOUNT: typing.ClassVar[int] = ...
    RTEPTFIELDCOUNT: typing.ClassVar[int] = ...
    TRKFIELDCOUNT: typing.ClassVar[int] = ...
    TRKSEGFIELDCOUNT: typing.ClassVar[int] = ...
    TRKPTFIELDCOUNT: typing.ClassVar[int] = ...
    THE_GEOM: typing.ClassVar[int] = ...
    PTID: typing.ClassVar[int] = ...
    PTLAT: typing.ClassVar[int] = ...
    PTLON: typing.ClassVar[int] = ...
    PTELE: typing.ClassVar[int] = ...
    PTTIME: typing.ClassVar[int] = ...
    PTMAGVAR: typing.ClassVar[int] = ...
    PTGEOIDWEIGHT: typing.ClassVar[int] = ...
    PTNAME: typing.ClassVar[int] = ...
    PTCMT: typing.ClassVar[int] = ...
    PTDESC: typing.ClassVar[int] = ...
    PTSRC: typing.ClassVar[int] = ...
    PTLINK: typing.ClassVar[int] = ...
    PTLINKTEXT: typing.ClassVar[int] = ...
    PTSYM: typing.ClassVar[int] = ...
    PTTYPE: typing.ClassVar[int] = ...
    PTFIX: typing.ClassVar[int] = ...
    PTSAT: typing.ClassVar[int] = ...
    PTHDOP: typing.ClassVar[int] = ...
    PTVDOP: typing.ClassVar[int] = ...
    PTPDOP: typing.ClassVar[int] = ...
    PTAGEOFDGPSDATA: typing.ClassVar[int] = ...
    PTDGPSID: typing.ClassVar[int] = ...
    PTEXTENSIONS: typing.ClassVar[int] = ...
    LINEID: typing.ClassVar[int] = ...
    LINENAME: typing.ClassVar[int] = ...
    LINECMT: typing.ClassVar[int] = ...
    LINEDESC: typing.ClassVar[int] = ...
    LINESRC: typing.ClassVar[int] = ...
    LINELINK_HREF: typing.ClassVar[int] = ...
    LINELINK_HREFTITLE: typing.ClassVar[int] = ...
    LINENUMBER: typing.ClassVar[int] = ...
    LINETYPE: typing.ClassVar[int] = ...
    LINEEXTENSIONS: typing.ClassVar[int] = ...
    RTEPT_RTEID: typing.ClassVar[int] = ...
    TRKSEGID: typing.ClassVar[int] = ...
    TRKSEGEXTENSIONS: typing.ClassVar[int] = ...
    TRKSEG_TRKID: typing.ClassVar[int] = ...
    TRKPT_TRKSEGID: typing.ClassVar[int] = ...

class GpxPreparser(org.xml.sax.helpers.DefaultHandler):
    def __init__(self): ...
    def getTotalRte(self) -> int: ...
    def getTotalRtept(self) -> int: ...
    def getTotalTrk(self) -> int: ...
    def getTotalTrkpt(self) -> int: ...
    def getTotalTrkseg(self) -> int: ...
    def getTotalWpt(self) -> int: ...
    def getVersion(self) -> str: ...
    def read(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string: str) -> bool: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class StringStack:
    def __init__(self, int: int): ...
    def pop(self) -> str: ...
    def push(self, string: str) -> bool: ...

class AbstractGpxParserDefault(AbstractGpxParser):
    STRINGSTACK_SIZE: typing.ClassVar[int] = ...
    def __init__(self, connection: java.sql.Connection, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string: str, boolean: bool): ...
    def clear(self) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def getCreator(self) -> str: ...
    def getDesc(self) -> str: ...
    def getFullAuthor(self) -> str: ...
    def getFullLink(self) -> str: ...
    def getKeywords(self) -> str: ...
    def getMaxLat(self) -> float: ...
    def getMaxLon(self) -> float: ...
    def getMinLat(self) -> float: ...
    def getMinLon(self) -> float: ...
    def getName(self) -> str: ...
    def getRteParser(self) -> 'AbstractGpxParserRte': ...
    def getTime(self) -> str: ...
    def getTrkParser(self) -> 'AbstractGpxParserTrk': ...
    def getVersion(self) -> str: ...
    def getWptParser(self) -> 'AbstractGpxParserWpt': ...
    def read(self, string: str, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    def setAuthorLink(self, string: str) -> None: ...
    def setAuthorLinkText(self, string: str) -> None: ...
    def setAuthorName(self, string: str) -> None: ...
    def setEmail(self, string: str) -> None: ...
    def setLink(self, string: str) -> None: ...
    def setLinkText(self, string: str) -> None: ...
    def setName(self, string: str) -> None: ...
    def setRteParser(self, abstractGpxParserRte: 'AbstractGpxParserRte') -> None: ...
    def setTrkParser(self, abstractGpxParserTrk: 'AbstractGpxParserTrk') -> None: ...
    def setWptParser(self, abstractGpxParserWpt: 'AbstractGpxParserWpt') -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class AbstractGpxParserRte(AbstractGpxParser):
    def __init__(self): ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def initialise(self, xMLReader: org.xml.sax.XMLReader, abstractGpxParserDefault: AbstractGpxParserDefault) -> None: ...
    def isPoint(self) -> bool: ...
    def setParent(self, abstractGpxParserDefault: AbstractGpxParserDefault) -> None: ...
    def setRteList(self, list: java.util.List[org.locationtech.jts.geom.Coordinate]) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class AbstractGpxParserTrk(AbstractGpxParser):
    def __init__(self): ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def initialise(self, xMLReader: org.xml.sax.XMLReader, abstractGpxParserDefault: AbstractGpxParserDefault) -> None: ...
    def isPoint(self) -> bool: ...
    def setParent(self, abstractGpxParserDefault: AbstractGpxParserDefault) -> None: ...
    def setTrkList(self, list: java.util.List[org.locationtech.jts.geom.LineString]) -> None: ...
    def setTrksegList(self, list: java.util.List[org.locationtech.jts.geom.Coordinate]) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class AbstractGpxParserWpt(AbstractGpxParser):
    def __init__(self): ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def initialise(self, xMLReader: org.xml.sax.XMLReader, abstractGpxParserDefault: AbstractGpxParserDefault) -> None: ...
    def setParent(self, abstractGpxParserDefault: AbstractGpxParserDefault) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class GpxParser(AbstractGpxParserDefault):
    def __init__(self, connection: java.sql.Connection, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string: str, boolean: bool): ...
    def clear(self) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def getCopyright(self) -> str: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class GpxParserRte(AbstractGpxParserRte):
    def __init__(self, xMLReader: org.xml.sax.XMLReader, gpxParser: GpxParser): ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class GpxParserTrk(AbstractGpxParserTrk):
    def __init__(self, xMLReader: org.xml.sax.XMLReader, abstractGpxParserDefault: AbstractGpxParserDefault): ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class GpxParserWpt(AbstractGpxParserWpt):
    def __init__(self, xMLReader: org.xml.sax.XMLReader, gpxParser: GpxParser): ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.functions.io.gpx.model")``.

    AbstractGpxParser: typing.Type[AbstractGpxParser]
    AbstractGpxParserDefault: typing.Type[AbstractGpxParserDefault]
    AbstractGpxParserRte: typing.Type[AbstractGpxParserRte]
    AbstractGpxParserTrk: typing.Type[AbstractGpxParserTrk]
    AbstractGpxParserWpt: typing.Type[AbstractGpxParserWpt]
    GPXCoordinate: typing.Type[GPXCoordinate]
    GPXLine: typing.Type[GPXLine]
    GPXPoint: typing.Type[GPXPoint]
    GPXTablesFactory: typing.Type[GPXTablesFactory]
    GPXTags: typing.Type[GPXTags]
    GpxMetadata: typing.Type[GpxMetadata]
    GpxParser: typing.Type[GpxParser]
    GpxParserRte: typing.Type[GpxParserRte]
    GpxParserTrk: typing.Type[GpxParserTrk]
    GpxParserWpt: typing.Type[GpxParserWpt]
    GpxPreparser: typing.Type[GpxPreparser]
    StringStack: typing.Type[StringStack]
