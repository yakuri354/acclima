
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.sql
import jpype.protocol
import org.h2.value
import org.h2gis.api
import org.locationtech.jts.geom
import typing



class AscDriverFunction(org.h2gis.api.DriverFunction):
    def __init__(self): ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    def getExportFormats(self) -> typing.MutableSequence[str]: ...
    def getFormatDescription(self, string: str) -> str: ...
    def getImportDriverType(self) -> org.h2gis.api.DriverFunction.IMPORT_DRIVER_TYPE: ...
    def getImportFormats(self) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    def isSpatialFormat(self, string: str) -> bool: ...

class AscRead(org.h2gis.api.AbstractFunction, org.h2gis.api.ScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def readAscii(connection: java.sql.Connection, string: str) -> None: ...
    @typing.overload
    @staticmethod
    def readAscii(connection: java.sql.Connection, string: str, string2: str, value: org.h2.value.Value) -> None: ...
    @typing.overload
    @staticmethod
    def readAscii(connection: java.sql.Connection, string: str, string2: str, geometry: org.locationtech.jts.geom.Geometry, int: int, boolean: bool) -> None: ...
    @typing.overload
    @staticmethod
    def readAscii(connection: java.sql.Connection, string: str, string2: str, geometry: org.locationtech.jts.geom.Geometry, int: int, boolean: bool, boolean2: bool) -> None: ...
    @typing.overload
    @staticmethod
    def readAscii(connection: java.sql.Connection, string: str, string2: str, geometry: org.locationtech.jts.geom.Geometry, int: int, boolean: bool, boolean2: bool, string3: str, int2: int) -> None: ...
    @typing.overload
    @staticmethod
    def readAscii(connection: java.sql.Connection, string: str, value: org.h2.value.Value) -> None: ...

class AscReaderDriver:
    def __init__(self): ...
    def getDownScale(self) -> int: ...
    def getExtractEnvelope(self) -> org.locationtech.jts.geom.Envelope: ...
    def isAs3DPoint(self) -> bool: ...
    def read(self, connection: java.sql.Connection, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], progressVisitor: org.h2gis.api.ProgressVisitor, string: str, int: int) -> typing.MutableSequence[str]: ...
    def setAs3DPoint(self, boolean: bool) -> None: ...
    def setDeleteTable(self, boolean: bool) -> None: ...
    def setDownScale(self, int: int) -> None: ...
    def setEncoding(self, string: str) -> None: ...
    def setExtractEnvelope(self, envelope: org.locationtech.jts.geom.Envelope) -> None: ...
    def setImportNodata(self, boolean: bool) -> None: ...
    def setZType(self, int: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.functions.io.asc")``.

    AscDriverFunction: typing.Type[AscDriverFunction]
    AscRead: typing.Type[AscRead]
    AscReaderDriver: typing.Type[AscReaderDriver]
