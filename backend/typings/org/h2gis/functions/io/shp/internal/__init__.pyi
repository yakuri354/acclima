
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.nio
import java.nio.channels
import jpype
import jpype.protocol
import org.h2.value
import org.h2gis.api
import org.h2gis.functions.io.dbf.internal
import org.h2gis.functions.io.utility
import org.locationtech.jts.geom
import typing



class IndexFile:
    def __init__(self, fileChannel: java.nio.channels.FileChannel): ...
    def close(self) -> None: ...
    def getContentLength(self, int: int) -> int: ...
    def getHeader(self) -> 'ShapefileHeader': ...
    def getOffset(self, int: int) -> int: ...
    def getOffsetInBytes(self, int: int) -> int: ...
    def getRecordCount(self) -> int: ...

class SHPDriver(org.h2gis.api.FileDriver):
    shpFile: java.io.File = ...
    shxFile: java.io.File = ...
    dbfFile: java.io.File = ...
    prjFile: java.io.File = ...
    def __init__(self): ...
    def close(self) -> None: ...
    def getDbaseFileHeader(self) -> org.h2gis.functions.io.dbf.internal.DbaseFileHeader: ...
    def getEstimatedRowSize(self, long: int) -> int: ...
    def getField(self, long: int, int: int) -> org.h2.value.Value: ...
    def getFieldCount(self) -> int: ...
    def getGeometryFieldIndex(self) -> int: ...
    def getRowCount(self) -> int: ...
    def getShapeFileHeader(self) -> 'ShapefileHeader': ...
    def getSrid(self) -> int: ...
    def initDriver(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], shapeType: 'ShapeType', dbaseFileHeader: org.h2gis.functions.io.dbf.internal.DbaseFileHeader) -> None: ...
    @typing.overload
    def initDriverFromFile(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @typing.overload
    def initDriverFromFile(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string: str) -> None: ...
    def insertRow(self, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> None: ...
    def setGeometryFieldIndex(self, int: int) -> None: ...
    def setSRID(self, int: int) -> None: ...

class ShapeHandler:
    def getLength(self, geometry: org.locationtech.jts.geom.Geometry) -> int: ...
    def getShapeType(self) -> 'ShapeType': ...
    def read(self, readBufferManager: org.h2gis.functions.io.utility.ReadBufferManager, shapeType: 'ShapeType') -> org.locationtech.jts.geom.Geometry: ...
    def write(self, writeBufferManager: org.h2gis.functions.io.utility.WriteBufferManager, geometry: org.locationtech.jts.geom.Geometry) -> None: ...

class ShapeType:
    NULL: typing.ClassVar['ShapeType'] = ...
    POINT: typing.ClassVar['ShapeType'] = ...
    POINTZ: typing.ClassVar['ShapeType'] = ...
    POINTM: typing.ClassVar['ShapeType'] = ...
    ARC: typing.ClassVar['ShapeType'] = ...
    ARCZ: typing.ClassVar['ShapeType'] = ...
    ARCM: typing.ClassVar['ShapeType'] = ...
    POLYGON: typing.ClassVar['ShapeType'] = ...
    POLYGONZ: typing.ClassVar['ShapeType'] = ...
    POLYGONM: typing.ClassVar['ShapeType'] = ...
    MULTIPOINT: typing.ClassVar['ShapeType'] = ...
    MULTIPOINTZ: typing.ClassVar['ShapeType'] = ...
    MULTIPOINTM: typing.ClassVar['ShapeType'] = ...
    UNDEFINED: typing.ClassVar['ShapeType'] = ...
    id: int = ...
    name: str = ...
    @staticmethod
    def forID(int: int) -> 'ShapeType': ...
    def getShapeHandler(self) -> ShapeHandler: ...
    def isLineType(self) -> bool: ...
    def isMultiPoint(self) -> bool: ...
    def isMultiPointType(self) -> bool: ...
    def isPointType(self) -> bool: ...
    def isPolygonType(self) -> bool: ...
    def toString(self) -> str: ...

class ShapefileException(java.io.IOException):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...

class ShapefileHeader:
    MAGIC: typing.ClassVar[int] = ...
    VERSION: typing.ClassVar[int] = ...
    def __init__(self): ...
    def getFileLength(self) -> int: ...
    def getShapeType(self) -> ShapeType: ...
    def getVersion(self) -> int: ...
    def maxX(self) -> float: ...
    def maxY(self) -> float: ...
    def minX(self) -> float: ...
    def minY(self) -> float: ...
    def read(self, byteBuffer: java.nio.ByteBuffer) -> None: ...
    def toString(self) -> str: ...
    def write(self, writeBufferManager: org.h2gis.functions.io.utility.WriteBufferManager, shapeType: ShapeType, int: int, int2: int, double: float, double2: float, double3: float, double4: float) -> None: ...

class ShapefileReader:
    def __init__(self, fileChannel: java.nio.channels.FileChannel): ...
    def close(self) -> None: ...
    def geomAt(self, int: int) -> org.locationtech.jts.geom.Geometry: ...
    def getHeader(self) -> ShapefileHeader: ...
    @staticmethod
    def readHeader(readableByteChannel: java.nio.channels.ReadableByteChannel) -> ShapefileHeader: ...
    def setHandler(self, shapeHandler: ShapeHandler) -> None: ...

class ShapefileWriter:
    def __init__(self, fileChannel: java.nio.channels.FileChannel, fileChannel2: java.nio.channels.FileChannel): ...
    def close(self) -> None: ...
    def getShpChannel(self) -> java.nio.channels.FileChannel: ...
    def writeGeometry(self, geometry: org.locationtech.jts.geom.Geometry) -> None: ...
    def writeHeaders(self, shapeType: ShapeType) -> None: ...

class MultiLineHandler(ShapeHandler):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, shapeType: ShapeType): ...
    def getLength(self, geometry: org.locationtech.jts.geom.Geometry) -> int: ...
    def getShapeType(self) -> ShapeType: ...
    def read(self, readBufferManager: org.h2gis.functions.io.utility.ReadBufferManager, shapeType: ShapeType) -> org.locationtech.jts.geom.Geometry: ...
    def write(self, writeBufferManager: org.h2gis.functions.io.utility.WriteBufferManager, geometry: org.locationtech.jts.geom.Geometry) -> None: ...

class MultiPointHandler(ShapeHandler):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, shapeType: ShapeType): ...
    def getLength(self, geometry: org.locationtech.jts.geom.Geometry) -> int: ...
    def getShapeType(self) -> ShapeType: ...
    def read(self, readBufferManager: org.h2gis.functions.io.utility.ReadBufferManager, shapeType: ShapeType) -> org.locationtech.jts.geom.Geometry: ...
    def write(self, writeBufferManager: org.h2gis.functions.io.utility.WriteBufferManager, geometry: org.locationtech.jts.geom.Geometry) -> None: ...

class PointHandler(ShapeHandler):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, shapeType: ShapeType): ...
    def getLength(self, geometry: org.locationtech.jts.geom.Geometry) -> int: ...
    def getShapeType(self) -> ShapeType: ...
    def read(self, readBufferManager: org.h2gis.functions.io.utility.ReadBufferManager, shapeType: ShapeType) -> org.locationtech.jts.geom.Geometry: ...
    def write(self, writeBufferManager: org.h2gis.functions.io.utility.WriteBufferManager, geometry: org.locationtech.jts.geom.Geometry) -> None: ...

class PolygonHandler(ShapeHandler):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, shapeType: ShapeType): ...
    @staticmethod
    def computeOrientation(coordinateSequence: org.locationtech.jts.geom.CoordinateSequence, int: int, int2: int, int3: int) -> int: ...
    def getLength(self, geometry: org.locationtech.jts.geom.Geometry) -> int: ...
    def getShapeType(self) -> ShapeType: ...
    @staticmethod
    def isCCW(coordinateSequence: org.locationtech.jts.geom.CoordinateSequence) -> bool: ...
    def read(self, readBufferManager: org.h2gis.functions.io.utility.ReadBufferManager, shapeType: ShapeType) -> org.locationtech.jts.geom.Geometry: ...
    def write(self, writeBufferManager: org.h2gis.functions.io.utility.WriteBufferManager, geometry: org.locationtech.jts.geom.Geometry) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.functions.io.shp.internal")``.

    IndexFile: typing.Type[IndexFile]
    MultiLineHandler: typing.Type[MultiLineHandler]
    MultiPointHandler: typing.Type[MultiPointHandler]
    PointHandler: typing.Type[PointHandler]
    PolygonHandler: typing.Type[PolygonHandler]
    SHPDriver: typing.Type[SHPDriver]
    ShapeHandler: typing.Type[ShapeHandler]
    ShapeType: typing.Type[ShapeType]
    ShapefileException: typing.Type[ShapefileException]
    ShapefileHeader: typing.Type[ShapefileHeader]
    ShapefileReader: typing.Type[ShapefileReader]
    ShapefileWriter: typing.Type[ShapefileWriter]
