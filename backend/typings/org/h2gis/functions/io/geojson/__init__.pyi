
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.fasterxml.jackson.core
import java.io
import java.lang
import java.sql
import jpype
import jpype.protocol
import org.h2.value
import org.h2gis.api
import org.locationtech.jts.geom
import typing



class GJGeometryReader:
    def __init__(self, geometryFactory: org.locationtech.jts.geom.GeometryFactory): ...
    def parseGeometry(self, jsonParser: com.fasterxml.jackson.core.JsonParser) -> org.locationtech.jts.geom.Geometry: ...

class GeoJsonDriverFunction(org.h2gis.api.DriverFunction):
    def __init__(self): ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    def getExportFormats(self) -> typing.MutableSequence[str]: ...
    def getFormatDescription(self, string: str) -> str: ...
    def getImportDriverType(self) -> org.h2gis.api.DriverFunction.IMPORT_DRIVER_TYPE: ...
    def getImportFormats(self) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    def isSpatialFormat(self, string: str) -> bool: ...

class GeoJsonField:
    def __init__(self): ...

class GeoJsonRead(org.h2gis.api.AbstractFunction, org.h2gis.api.ScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def importTable(connection: java.sql.Connection, string: str) -> None: ...
    @typing.overload
    @staticmethod
    def importTable(connection: java.sql.Connection, string: str, string2: str, string3: str, boolean: bool) -> None: ...
    @typing.overload
    @staticmethod
    def importTable(connection: java.sql.Connection, string: str, string2: str, value: org.h2.value.Value) -> None: ...
    @typing.overload
    @staticmethod
    def importTable(connection: java.sql.Connection, string: str, value: org.h2.value.Value) -> None: ...

class GeoJsonReaderDriver:
    def __init__(self, connection: java.sql.Connection, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string: str, boolean: bool): ...
    def read(self, progressVisitor: org.h2gis.api.ProgressVisitor, string: str) -> str: ...

class GeoJsonWrite(org.h2gis.api.AbstractFunction, org.h2gis.api.ScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def exportTable(connection: java.sql.Connection, string: str, string2: str) -> None: ...
    @typing.overload
    @staticmethod
    def exportTable(connection: java.sql.Connection, string: str, string2: str, boolean: bool) -> None: ...
    def getJavaStaticMethod(self) -> str: ...

class GeoJsonWriteDriver:
    def __init__(self, connection: java.sql.Connection): ...
    def isSupportedPropertyType(self, string: str, int: int, string2: str) -> bool: ...
    @typing.overload
    def write(self, progressVisitor: org.h2gis.api.ProgressVisitor, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, boolean: bool) -> None: ...
    @typing.overload
    def write(self, progressVisitor: org.h2gis.api.ProgressVisitor, resultSet: java.sql.ResultSet, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string: str, boolean: bool) -> None: ...

class ST_AsGeoJSON(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    def toGeoJsonEnvelope(self, envelope: org.locationtech.jts.geom.Envelope, int: int) -> str: ...
    @typing.overload
    @staticmethod
    def toGeojson(geometry: org.locationtech.jts.geom.Geometry) -> str: ...
    @typing.overload
    @staticmethod
    def toGeojson(geometry: org.locationtech.jts.geom.Geometry, int: int) -> str: ...
    @staticmethod
    def toGeojsonCoordinate(coordinate: org.locationtech.jts.geom.Coordinate, int: int, stringBuilder: java.lang.StringBuilder) -> None: ...
    @staticmethod
    def toGeojsonCoordinates(coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], int: int, stringBuilder: java.lang.StringBuilder) -> None: ...
    @staticmethod
    def toGeojsonGeometry(geometry: org.locationtech.jts.geom.Geometry, int: int, stringBuilder: java.lang.StringBuilder) -> None: ...
    @staticmethod
    def toGeojsonGeometryCollection(geometryCollection: org.locationtech.jts.geom.GeometryCollection, int: int, stringBuilder: java.lang.StringBuilder) -> None: ...
    @staticmethod
    def toGeojsonLineString(lineString: org.locationtech.jts.geom.LineString, int: int, stringBuilder: java.lang.StringBuilder) -> None: ...
    @staticmethod
    def toGeojsonMultiLineString(multiLineString: org.locationtech.jts.geom.MultiLineString, int: int, stringBuilder: java.lang.StringBuilder) -> None: ...
    @staticmethod
    def toGeojsonMultiPoint(multiPoint: org.locationtech.jts.geom.MultiPoint, int: int, stringBuilder: java.lang.StringBuilder) -> None: ...
    @staticmethod
    def toGeojsonMultiPolygon(multiPolygon: org.locationtech.jts.geom.MultiPolygon, int: int, stringBuilder: java.lang.StringBuilder) -> None: ...
    @staticmethod
    def toGeojsonPoint(point: org.locationtech.jts.geom.Point, int: int, stringBuilder: java.lang.StringBuilder) -> None: ...
    @staticmethod
    def toGeojsonPolygon(polygon: org.locationtech.jts.geom.Polygon, int: int, stringBuilder: java.lang.StringBuilder) -> None: ...

class ST_GeomFromGeoJSON(org.h2gis.api.DeterministicScalarFunction):
    def __init__(self): ...
    @staticmethod
    def geomFromGeoJSON(string: str) -> org.locationtech.jts.geom.Geometry: ...
    def getJavaStaticMethod(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.functions.io.geojson")``.

    GJGeometryReader: typing.Type[GJGeometryReader]
    GeoJsonDriverFunction: typing.Type[GeoJsonDriverFunction]
    GeoJsonField: typing.Type[GeoJsonField]
    GeoJsonRead: typing.Type[GeoJsonRead]
    GeoJsonReaderDriver: typing.Type[GeoJsonReaderDriver]
    GeoJsonWrite: typing.Type[GeoJsonWrite]
    GeoJsonWriteDriver: typing.Type[GeoJsonWriteDriver]
    ST_AsGeoJSON: typing.Type[ST_AsGeoJSON]
    ST_GeomFromGeoJSON: typing.Type[ST_GeomFromGeoJSON]
