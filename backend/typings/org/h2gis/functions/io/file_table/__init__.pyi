
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import jpype
import org.h2.api
import org.h2.command.ddl
import org.h2.command.query
import org.h2.engine
import org.h2.index
import org.h2.mvstore.db
import org.h2.result
import org.h2.table
import org.h2.value
import org.h2gis.api
import typing



class DummyIndex(org.h2.index.Index):
    def __init__(self, table: org.h2.table.Table, int: int, indexColumn: org.h2.table.IndexColumn): ...
    def add(self, sessionLocal: org.h2.engine.SessionLocal, row: org.h2.result.Row) -> None: ...
    def canGetFirstOrLast(self) -> bool: ...
    def checkRename(self) -> None: ...
    def close(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...
    def find(self, sessionLocal: org.h2.engine.SessionLocal, searchRow: org.h2.result.SearchRow, searchRow2: org.h2.result.SearchRow) -> org.h2.index.Cursor: ...
    def findFirstOrLast(self, sessionLocal: org.h2.engine.SessionLocal, boolean: bool) -> org.h2.index.Cursor: ...
    def getCost(self, sessionLocal: org.h2.engine.SessionLocal, intArray: typing.Union[typing.List[int], jpype.JArray], tableFilterArray: typing.Union[typing.List[org.h2.table.TableFilter], jpype.JArray], int2: int, sortOrder: org.h2.result.SortOrder, allColumnsForPlan: org.h2.command.query.AllColumnsForPlan) -> float: ...
    def getDiskSpaceUsed(self) -> int: ...
    def getRowCount(self, sessionLocal: org.h2.engine.SessionLocal) -> int: ...
    def getRowCountApproximation(self, sessionLocal: org.h2.engine.SessionLocal) -> int: ...
    def needRebuild(self) -> bool: ...
    @typing.overload
    def remove(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...
    @typing.overload
    def remove(self, sessionLocal: org.h2.engine.SessionLocal, row: org.h2.result.Row) -> None: ...
    def truncate(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...

class DummyMVTable(org.h2.mvstore.db.MVTable):
    def __init__(self, createTableData: org.h2.command.ddl.CreateTableData): ...
    def addIndex(self, sessionLocal: org.h2.engine.SessionLocal, string: str, int: int, indexColumnArray: typing.Union[typing.List[org.h2.table.IndexColumn], jpype.JArray], int2: int, indexType: org.h2.index.IndexType, boolean: bool, string2: str) -> org.h2.index.Index: ...
    def addRow(self, sessionLocal: org.h2.engine.SessionLocal, row: org.h2.result.Row) -> None: ...
    def canDrop(self) -> bool: ...
    def checkRename(self) -> None: ...
    def checkSupportAlter(self) -> None: ...
    def close(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...
    def getDiskSpaceUsed(self) -> int: ...
    def getIndexes(self) -> java.util.ArrayList[org.h2.index.Index]: ...
    def getMaxDataModificationId(self) -> int: ...
    def getRowCount(self, sessionLocal: org.h2.engine.SessionLocal) -> int: ...
    def getRowCountApproximation(self, sessionLocal: org.h2.engine.SessionLocal) -> int: ...
    @typing.overload
    def getScanIndex(self, sessionLocal: org.h2.engine.SessionLocal, intArray: typing.Union[typing.List[int], jpype.JArray], tableFilterArray: typing.Union[typing.List[org.h2.table.TableFilter], jpype.JArray], int2: int, sortOrder: org.h2.result.SortOrder, allColumnsForPlan: org.h2.command.query.AllColumnsForPlan) -> org.h2.index.Index: ...
    @typing.overload
    def getScanIndex(self, sessionLocal: org.h2.engine.SessionLocal) -> org.h2.index.Index: ...
    def getTableType(self) -> org.h2.table.TableType: ...
    def isDeterministic(self) -> bool: ...
    def isLockedExclusively(self) -> bool: ...
    def lock(self, sessionLocal: org.h2.engine.SessionLocal, int: int) -> bool: ...
    def removeChildrenAndResources(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...
    def removeRow(self, sessionLocal: org.h2.engine.SessionLocal, row: org.h2.result.Row) -> None: ...
    def truncate(self, sessionLocal: org.h2.engine.SessionLocal) -> int: ...
    def unlock(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...

_FileEngine__Driver = typing.TypeVar('_FileEngine__Driver', bound=org.h2gis.api.FileDriver)  # <Driver>
class FileEngine(org.h2.api.TableEngine, typing.Generic[_FileEngine__Driver]):
    def __init__(self): ...
    def createTable(self, createTableData: org.h2.command.ddl.CreateTableData) -> org.h2.table.TableBase: ...
    @staticmethod
    def getUniqueColumnName(string: str, list: java.util.List[org.h2.table.Column]) -> str: ...

class H2MVTable(org.h2.mvstore.db.MVTable):
    def __init__(self, fileDriver: org.h2gis.api.FileDriver, createTableData: org.h2.command.ddl.CreateTableData): ...
    def addIndex(self, sessionLocal: org.h2.engine.SessionLocal, string: str, int: int, indexColumnArray: typing.Union[typing.List[org.h2.table.IndexColumn], jpype.JArray], int2: int, indexType: org.h2.index.IndexType, boolean: bool, string2: str) -> org.h2.index.Index: ...
    def addRow(self, sessionLocal: org.h2.engine.SessionLocal, row: org.h2.result.Row) -> None: ...
    @staticmethod
    def addRowsToIndex(sessionLocal: org.h2.engine.SessionLocal, arrayList: java.util.ArrayList[org.h2.result.Row], index: org.h2.index.Index) -> None: ...
    def canDrop(self) -> bool: ...
    def checkRename(self) -> None: ...
    def checkSupportAlter(self) -> None: ...
    def close(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...
    def getDiskSpaceUsed(self) -> int: ...
    def getIndexes(self) -> java.util.ArrayList[org.h2.index.Index]: ...
    def getMaxDataModificationId(self) -> int: ...
    def getRow(self, sessionLocal: org.h2.engine.SessionLocal, long: int) -> org.h2.result.Row: ...
    def getRowCount(self, sessionLocal: org.h2.engine.SessionLocal) -> int: ...
    def getRowCountApproximation(self, sessionLocal: org.h2.engine.SessionLocal) -> int: ...
    def getRowIdColumn(self) -> org.h2.table.Column: ...
    @typing.overload
    def getScanIndex(self, sessionLocal: org.h2.engine.SessionLocal, intArray: typing.Union[typing.List[int], jpype.JArray], tableFilterArray: typing.Union[typing.List[org.h2.table.TableFilter], jpype.JArray], int2: int, sortOrder: org.h2.result.SortOrder, allColumnsForPlan: org.h2.command.query.AllColumnsForPlan) -> org.h2.index.Index: ...
    @typing.overload
    def getScanIndex(self, sessionLocal: org.h2.engine.SessionLocal) -> org.h2.index.Index: ...
    def getTableType(self) -> org.h2.table.TableType: ...
    def init(self, session: org.h2.engine.Session) -> None: ...
    def isDeterministic(self) -> bool: ...
    def isLockedExclusively(self) -> bool: ...
    def lock(self, sessionLocal: org.h2.engine.SessionLocal, int: int) -> bool: ...
    def removeChildrenAndResources(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...
    def removeRow(self, sessionLocal: org.h2.engine.SessionLocal, row: org.h2.result.Row) -> None: ...
    def truncate(self, sessionLocal: org.h2.engine.SessionLocal) -> int: ...
    def unlock(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...

class H2TableIndex(org.h2.index.Index):
    PK_COLUMN_NAME: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, fileDriver: org.h2gis.api.FileDriver, table: org.h2.table.Table, int: int, string: str, indexColumn: org.h2.table.IndexColumn): ...
    @typing.overload
    def __init__(self, fileDriver: org.h2gis.api.FileDriver, table: org.h2.table.Table, int: int, indexColumn: org.h2.table.IndexColumn): ...
    def add(self, sessionLocal: org.h2.engine.SessionLocal, row: org.h2.result.Row) -> None: ...
    def canGetFirstOrLast(self) -> bool: ...
    def checkRename(self) -> None: ...
    def close(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...
    def find(self, sessionLocal: org.h2.engine.SessionLocal, searchRow: org.h2.result.SearchRow, searchRow2: org.h2.result.SearchRow) -> org.h2.index.Cursor: ...
    def findFirstOrLast(self, sessionLocal: org.h2.engine.SessionLocal, boolean: bool) -> org.h2.index.Cursor: ...
    def getCost(self, sessionLocal: org.h2.engine.SessionLocal, intArray: typing.Union[typing.List[int], jpype.JArray], tableFilterArray: typing.Union[typing.List[org.h2.table.TableFilter], jpype.JArray], int2: int, sortOrder: org.h2.result.SortOrder, allColumnsForPlan: org.h2.command.query.AllColumnsForPlan) -> float: ...
    def getDiskSpaceUsed(self) -> int: ...
    def getDriver(self) -> org.h2gis.api.FileDriver: ...
    def getRow(self, sessionLocal: org.h2.engine.SessionLocal, long: int) -> org.h2.result.Row: ...
    def getRowCount(self, sessionLocal: org.h2.engine.SessionLocal) -> int: ...
    def getRowCountApproximation(self, sessionLocal: org.h2.engine.SessionLocal) -> int: ...
    def isRowIdIndex(self) -> bool: ...
    def needRebuild(self) -> bool: ...
    @typing.overload
    def remove(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...
    @typing.overload
    def remove(self, sessionLocal: org.h2.engine.SessionLocal, row: org.h2.result.Row) -> None: ...
    def truncate(self, sessionLocal: org.h2.engine.SessionLocal) -> None: ...
    class DriverRow(org.h2.result.Row):
        def __init__(self, fileDriver: org.h2gis.api.FileDriver, long: int): ...
        def copyFrom(self, searchRow: org.h2.result.SearchRow) -> None: ...
        def getColumnCount(self) -> int: ...
        def getMemory(self) -> int: ...
        def getValue(self, int: int) -> org.h2.value.Value: ...
        def getValueList(self) -> typing.MutableSequence[org.h2.value.Value]: ...
        def setValue(self, int: int, value: org.h2.value.Value) -> None: ...
        def toString(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.functions.io.file_table")``.

    DummyIndex: typing.Type[DummyIndex]
    DummyMVTable: typing.Type[DummyMVTable]
    FileEngine: typing.Type[FileEngine]
    H2MVTable: typing.Type[H2MVTable]
    H2TableIndex: typing.Type[H2TableIndex]
