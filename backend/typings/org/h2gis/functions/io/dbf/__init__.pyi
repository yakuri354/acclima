
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.sql
import java.util
import jpype.protocol
import org.h2.command.ddl
import org.h2.table
import org.h2.value
import org.h2gis.api
import org.h2gis.functions.io.dbf.internal
import org.h2gis.functions.io.file_table
import org.h2gis.utilities.dbtypes
import typing



class DBFDriverFunction(org.h2gis.api.DriverFunction):
    DESCRIPTION: typing.ClassVar[str] = ...
    def __init__(self): ...
    @staticmethod
    def dBaseHeaderFromMetaData(resultSetMetaData: java.sql.ResultSetMetaData, list: java.util.List[int]) -> org.h2gis.functions.io.dbf.internal.DbaseFileHeader: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    def getExportFormats(self) -> typing.MutableSequence[str]: ...
    def getFormatDescription(self, string: str) -> str: ...
    def getImportDriverType(self) -> org.h2gis.api.DriverFunction.IMPORT_DRIVER_TYPE: ...
    def getImportFormats(self) -> typing.MutableSequence[str]: ...
    @staticmethod
    def getQuestionMark(int: int) -> str: ...
    @staticmethod
    def getSQLColumnTypes(dbaseFileHeader: org.h2gis.functions.io.dbf.internal.DbaseFileHeader, dBTypes: org.h2gis.utilities.dbtypes.DBTypes, list: java.util.List[org.h2.table.Column]) -> str: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, boolean: bool, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], progressVisitor: org.h2gis.api.ProgressVisitor) -> typing.MutableSequence[str]: ...
    def isSpatialFormat(self, string: str) -> bool: ...

class DBFEngine(org.h2gis.functions.io.file_table.FileEngine[org.h2gis.functions.io.dbf.internal.DBFDriver]):
    def __init__(self): ...
    @staticmethod
    def feedTableDataFromHeader(dbaseFileHeader: org.h2gis.functions.io.dbf.internal.DbaseFileHeader, createTableData: org.h2.command.ddl.CreateTableData) -> None: ...

class DBFRead(org.h2gis.api.AbstractFunction, org.h2gis.api.ScalarFunction):
    def __init__(self): ...
    def getJavaStaticMethod(self) -> str: ...
    @typing.overload
    @staticmethod
    def importTable(connection: java.sql.Connection, string: str) -> None: ...
    @typing.overload
    @staticmethod
    def importTable(connection: java.sql.Connection, string: str, string2: str, string3: str, boolean: bool) -> None: ...
    @typing.overload
    @staticmethod
    def importTable(connection: java.sql.Connection, string: str, string2: str, value: org.h2.value.Value) -> None: ...
    @typing.overload
    @staticmethod
    def importTable(connection: java.sql.Connection, string: str, value: org.h2.value.Value) -> None: ...

class DBFWrite(org.h2gis.api.AbstractFunction, org.h2gis.api.ScalarFunction):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def exportTable(connection: java.sql.Connection, string: str, string2: str) -> None: ...
    @typing.overload
    @staticmethod
    def exportTable(connection: java.sql.Connection, string: str, string2: str, string3: str, boolean: bool) -> None: ...
    @typing.overload
    @staticmethod
    def exportTable(connection: java.sql.Connection, string: str, string2: str, value: org.h2.value.Value) -> None: ...
    def getJavaStaticMethod(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.functions.io.dbf")``.

    DBFDriverFunction: typing.Type[DBFDriverFunction]
    DBFEngine: typing.Type[DBFEngine]
    DBFRead: typing.Type[DBFRead]
    DBFWrite: typing.Type[DBFWrite]
    internal: org.h2gis.functions.io.dbf.internal.__module_protocol__
