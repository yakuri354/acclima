
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import _jpype
import java.io
import java.lang
import java.nio.channels
import java.nio.charset
import java.util
import jpype
import jpype.protocol
import org.h2.value
import org.h2gis.api
import typing



class DBFDriver(org.h2gis.api.FileDriver):
    def __init__(self): ...
    def close(self) -> None: ...
    def getDbaseFileHeader(self) -> 'DbaseFileHeader': ...
    def getDbaseFileReader(self) -> 'DbaseFileReader': ...
    def getDbfFile(self) -> java.io.File: ...
    def getEstimatedRowSize(self, long: int) -> int: ...
    def getField(self, long: int, int: int) -> org.h2.value.Value: ...
    def getFieldCount(self) -> int: ...
    def getRowCount(self) -> int: ...
    def initDriver(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], dbaseFileHeader: 'DbaseFileHeader') -> None: ...
    @typing.overload
    def initDriverFromFile(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @typing.overload
    def initDriverFromFile(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string: str) -> None: ...
    def insertRow(self, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> None: ...

class DbaseFileException(java.lang.Exception):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...

class DbaseFileHeader:
    DEFAULT_ENCODING: typing.ClassVar[str] = ...
    DEFAULT_ENCODING_FLAG: typing.ClassVar[int] = ...
    def __init__(self): ...
    def addColumn(self, string: str, char: str, int: int, int2: int) -> None: ...
    def getFieldDecimalCount(self, int: int) -> int: ...
    def getFieldLength(self, int: int) -> int: ...
    def getFieldName(self, int: int) -> str: ...
    def getFieldType(self, int: int) -> str: ...
    def getFileEncoding(self) -> str: ...
    def getHeaderLength(self) -> int: ...
    def getLargestFieldSize(self) -> int: ...
    def getLastUpdateDate(self) -> java.util.Date: ...
    def getNumFields(self) -> int: ...
    def getNumRecords(self) -> int: ...
    def getRecordLength(self) -> int: ...
    def readHeader(self, fileChannel: java.nio.channels.FileChannel, string: str) -> None: ...
    def removeColumn(self, string: str) -> int: ...
    def setEncoding(self, string: str) -> bool: ...
    def setNumRecords(self, int: int) -> None: ...
    def toString(self) -> str: ...
    def writeHeader(self, writableByteChannel: java.nio.channels.WritableByteChannel) -> None: ...

class DbaseFileReader:
    def __init__(self, fileChannel: java.nio.channels.FileChannel, string: str): ...
    def close(self) -> None: ...
    def getFieldCount(self) -> int: ...
    def getFieldValue(self, int: int, int2: int) -> org.h2.value.Value: ...
    def getHeader(self) -> DbaseFileHeader: ...
    def getLengthFor(self, int: int) -> int: ...
    def getRecordCount(self) -> int: ...

class DbaseFileWriter:
    @typing.overload
    def __init__(self, dbaseFileHeader: DbaseFileHeader, writableByteChannel: java.nio.channels.WritableByteChannel): ...
    @typing.overload
    def __init__(self, dbaseFileHeader: DbaseFileHeader, writableByteChannel: java.nio.channels.WritableByteChannel, charset: java.nio.charset.Charset): ...
    def close(self) -> None: ...
    def getHeader(self) -> DbaseFileHeader: ...
    def write(self, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> None: ...
    class FieldFormatter:
        def __init__(self, charset: java.nio.charset.Charset): ...
        @typing.overload
        def getFieldString(self, int: int, int2: int, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> str: ...
        @typing.overload
        def getFieldString(self, int: int, string: str) -> str: ...
        @typing.overload
        def getFieldString(self, date: java.util.Date) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.functions.io.dbf.internal")``.

    DBFDriver: typing.Type[DBFDriver]
    DbaseFileException: typing.Type[DbaseFileException]
    DbaseFileHeader: typing.Type[DbaseFileHeader]
    DbaseFileReader: typing.Type[DbaseFileReader]
    DbaseFileWriter: typing.Type[DbaseFileWriter]
