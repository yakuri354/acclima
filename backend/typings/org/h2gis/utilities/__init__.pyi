
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.beans
import java.io
import java.lang
import java.net
import java.sql
import java.util
import java.util.regex
import java.util.zip
import javax.sql
import jpype
import jpype.protocol
import org.h2.tools
import org.h2gis.api
import org.h2gis.utilities.dbtypes
import org.h2gis.utilities.jts_utils
import org.h2gis.utilities.trigger
import org.h2gis.utilities.wrapper
import org.locationtech.jts.geom
import typing



class FileUtilities:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def deleteFiles(file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> bool: ...
    @typing.overload
    @staticmethod
    def deleteFiles(file: typing.Union[java.io.File, jpype.protocol.SupportsPath], boolean: bool) -> bool: ...
    @staticmethod
    def getRelativePath(file: typing.Union[java.io.File, jpype.protocol.SupportsPath], file2: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> str: ...
    @staticmethod
    def isExtensionWellFormated(file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string: str) -> bool: ...
    @staticmethod
    def isFileImportable(file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def listFiles(file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def listFiles(file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string: str) -> java.util.List[str]: ...
    @staticmethod
    def newFile(file: typing.Union[java.io.File, jpype.protocol.SupportsPath], zipEntry: java.util.zip.ZipEntry) -> java.io.File: ...
    @staticmethod
    def unzipFile(file: typing.Union[java.io.File, jpype.protocol.SupportsPath], file2: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @typing.overload
    @staticmethod
    def zip(file: typing.Union[java.io.File, jpype.protocol.SupportsPath], file2: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @typing.overload
    @staticmethod
    def zip(fileArray: typing.Union[typing.List[java.io.File], jpype.JArray], file2: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...

class GeographyUtilities:
    RADIUS_OF_EARTH_IN_METERS: typing.ClassVar[float] = ...
    def __init__(self): ...
    @staticmethod
    def computeLatitudeDistance(double: float) -> float: ...
    @staticmethod
    def computeLongitudeDistance(double: float, double2: float) -> float: ...
    @typing.overload
    @staticmethod
    def createEnvelope(coordinate: org.locationtech.jts.geom.Coordinate, double: float, double2: float) -> org.locationtech.jts.geom.Envelope: ...
    @typing.overload
    @staticmethod
    def createEnvelope(coordinate: org.locationtech.jts.geom.Coordinate, double: float, double2: float, int: int) -> org.locationtech.jts.geom.Envelope: ...
    @staticmethod
    def expandEnvelopeByMeters(envelope: org.locationtech.jts.geom.Envelope, double: float) -> org.locationtech.jts.geom.Envelope: ...
    @staticmethod
    def getHaversineDistanceInMeters(coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate) -> float: ...
    @staticmethod
    def getSRID(connection: java.sql.Connection, float: float, float2: float) -> int: ...

class GeometryMetaData:
    hasZ: bool = ...
    hasM: bool = ...
    dimension: int = ...
    geometryType: str = ...
    sfs_geometryType: str = ...
    SRID: int = ...
    EWKB_Z: typing.ClassVar[int] = ...
    EWKB_M: typing.ClassVar[int] = ...
    EWKB_SRID: typing.ClassVar[int] = ...
    geometryTypeCode: int = ...
    sfs_geometryTypeCode: int = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def createMetadataFromGeometryType(string: str) -> 'GeometryMetaData': ...
    @typing.overload
    @staticmethod
    def createMetadataFromGeometryType(string: str, int: int) -> 'GeometryMetaData': ...
    def getDimension(self) -> int: ...
    def getGeometryType(self) -> str: ...
    def getGeometryTypeCode(self) -> int: ...
    @typing.overload
    @staticmethod
    def getMetaData(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> 'GeometryMetaData': ...
    @typing.overload
    @staticmethod
    def getMetaData(string: str) -> 'GeometryMetaData': ...
    @typing.overload
    @staticmethod
    def getMetaData(geometry: org.locationtech.jts.geom.Geometry) -> 'GeometryMetaData': ...
    @staticmethod
    def getMetaDataFromTablePattern(string: str) -> 'GeometryMetaData': ...
    def getSQL(self) -> str: ...
    def getSRID(self) -> int: ...
    def getSfs_geometryType(self) -> str: ...
    def getSfs_geometryTypeCode(self) -> int: ...
    def hasM(self) -> bool: ...
    def hasZ(self) -> bool: ...
    def initDimension(self) -> None: ...
    def initGeometryType(self) -> None: ...
    def setDimension(self, int: int) -> None: ...
    def setGeometryType(self, string: str) -> None: ...
    def setGeometryTypeCode(self, int: int) -> None: ...
    def setHasM(self, boolean: bool) -> None: ...
    def setHasZ(self, boolean: bool) -> None: ...
    def setSRID(self, int: int) -> None: ...
    def setSfs_geometryType(self, string: str) -> None: ...
    def setSfs_geometryTypeCode(self, int: int) -> None: ...

class GeometryTableUtilities:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def alterSRID(connection: java.sql.Connection, string: str, string2: str, int: int) -> bool: ...
    @typing.overload
    @staticmethod
    def alterSRID(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str, int: int) -> bool: ...
    @typing.overload
    @staticmethod
    def getAuthorityAndSRID(connection: java.sql.Connection, int: int) -> typing.MutableSequence[str]: ...
    @typing.overload
    @staticmethod
    def getAuthorityAndSRID(connection: java.sql.Connection, string: str, string2: str) -> typing.MutableSequence[str]: ...
    @typing.overload
    @staticmethod
    def getAuthorityAndSRID(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> typing.MutableSequence[str]: ...
    @typing.overload
    @staticmethod
    def getEnvelope(connection: java.sql.Connection, string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEnvelope(connection: java.sql.Connection, string: str, string2: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEnvelope(connection: java.sql.Connection, string: str, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEnvelope(connection: java.sql.Connection, string: str, stringArray: typing.Union[typing.List[str], jpype.JArray], string3: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEnvelope(connection: java.sql.Connection, tableLocation: 'TableLocation') -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEnvelope(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEnvelope(connection: java.sql.Connection, tableLocation: 'TableLocation', *string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEnvelope(connection: java.sql.Connection, tableLocation: 'TableLocation', stringArray: typing.Union[typing.List[str], jpype.JArray], string2: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEnvelope(resultSet: java.sql.ResultSet) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEnvelope(resultSet: java.sql.ResultSet, string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEstimatedExtent(connection: java.sql.Connection, string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEstimatedExtent(connection: java.sql.Connection, string: str, string2: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEstimatedExtent(connection: java.sql.Connection, tableLocation: 'TableLocation') -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getEstimatedExtent(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getFirstColumnMetaData(connection: java.sql.Connection, string: str) -> 'Tuple'[str, GeometryMetaData]: ...
    @typing.overload
    @staticmethod
    def getFirstColumnMetaData(connection: java.sql.Connection, tableLocation: 'TableLocation') -> 'Tuple'[str, GeometryMetaData]: ...
    @typing.overload
    @staticmethod
    def getFirstColumnMetaData(resultSet: java.sql.ResultSet) -> 'Tuple'[str, GeometryMetaData]: ...
    @typing.overload
    @staticmethod
    def getFirstGeometryColumnNameAndIndex(connection: java.sql.Connection, string: str) -> 'Tuple'[str, int]: ...
    @typing.overload
    @staticmethod
    def getFirstGeometryColumnNameAndIndex(connection: java.sql.Connection, tableLocation: 'TableLocation') -> 'Tuple'[str, int]: ...
    @typing.overload
    @staticmethod
    def getFirstGeometryColumnNameAndIndex(resultSet: java.sql.ResultSet) -> 'Tuple'[str, int]: ...
    @typing.overload
    @staticmethod
    def getFirstGeometryColumnNameAndIndex(resultSetMetaData: java.sql.ResultSetMetaData) -> 'Tuple'[str, int]: ...
    @typing.overload
    @staticmethod
    def getGeometryColumnNames(connection: java.sql.Connection, string: str) -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def getGeometryColumnNames(connection: java.sql.Connection, tableLocation: 'TableLocation') -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def getGeometryColumnNames(resultSetMetaData: java.sql.ResultSetMetaData) -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def getGeometryColumnNamesAndIndexes(connection: java.sql.Connection, string: str) -> java.util.LinkedHashMap[str, int]: ...
    @typing.overload
    @staticmethod
    def getGeometryColumnNamesAndIndexes(connection: java.sql.Connection, tableLocation: 'TableLocation') -> java.util.LinkedHashMap[str, int]: ...
    @typing.overload
    @staticmethod
    def getGeometryColumnNamesAndIndexes(resultSetMetaData: java.sql.ResultSetMetaData) -> java.util.LinkedHashMap[str, int]: ...
    @typing.overload
    @staticmethod
    def getGeometryColumnsView(connection: java.sql.Connection, string: str, string2: str, string3: str) -> java.sql.ResultSet: ...
    @typing.overload
    @staticmethod
    def getGeometryColumnsView(connection: java.sql.Connection, string: str, string2: str, string3: str, string4: str) -> java.sql.ResultSet: ...
    @typing.overload
    @staticmethod
    def getMetaData(connection: java.sql.Connection, string: str) -> java.util.LinkedHashMap[str, GeometryMetaData]: ...
    @typing.overload
    @staticmethod
    def getMetaData(connection: java.sql.Connection, tableLocation: 'TableLocation') -> java.util.LinkedHashMap[str, GeometryMetaData]: ...
    @typing.overload
    @staticmethod
    def getMetaData(resultSet: java.sql.ResultSet) -> java.util.LinkedHashMap[str, GeometryMetaData]: ...
    @typing.overload
    @staticmethod
    def getMetaData(connection: java.sql.Connection, string: str, string2: str) -> GeometryMetaData: ...
    @typing.overload
    @staticmethod
    def getMetaData(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> GeometryMetaData: ...
    @typing.overload
    @staticmethod
    def getSRID(connection: java.sql.Connection, string: str) -> int: ...
    @typing.overload
    @staticmethod
    def getSRID(connection: java.sql.Connection, string: str, string2: str) -> int: ...
    @typing.overload
    @staticmethod
    def getSRID(connection: java.sql.Connection, tableLocation: 'TableLocation') -> int: ...
    @typing.overload
    @staticmethod
    def getSRID(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> int: ...
    @typing.overload
    @staticmethod
    def hasGeometryColumn(connection: java.sql.Connection, string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def hasGeometryColumn(connection: java.sql.Connection, tableLocation: 'TableLocation') -> bool: ...
    @typing.overload
    @staticmethod
    def hasGeometryColumn(resultSet: java.sql.ResultSet) -> bool: ...
    @staticmethod
    def isSpatialIndexed(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def prepareInformationSchemaStatement(connection: java.sql.Connection, string: str, string2: str, string3: str, string4: str, string5: str) -> java.sql.PreparedStatement: ...
    @typing.overload
    @staticmethod
    def prepareInformationSchemaStatement(connection: java.sql.Connection, string: str, string2: str, string3: str, string4: str, string5: str, string6: str, string7: str, string8: str) -> java.sql.PreparedStatement: ...

class GeometryTypeCodes:
    Z: typing.ClassVar[int] = ...
    M: typing.ClassVar[int] = ...
    GEOMETRY: typing.ClassVar[int] = ...
    POINT: typing.ClassVar[int] = ...
    LINESTRING: typing.ClassVar[int] = ...
    POLYGON: typing.ClassVar[int] = ...
    MULTIPOINT: typing.ClassVar[int] = ...
    MULTILINESTRING: typing.ClassVar[int] = ...
    MULTIPOLYGON: typing.ClassVar[int] = ...
    GEOMCOLLECTION: typing.ClassVar[int] = ...
    MULTICURVE: typing.ClassVar[int] = ...
    MULTISURFACE: typing.ClassVar[int] = ...
    CURVE: typing.ClassVar[int] = ...
    SURFACE: typing.ClassVar[int] = ...
    POLYHEDRALSURFACE: typing.ClassVar[int] = ...
    TIN: typing.ClassVar[int] = ...
    TRIANGLE: typing.ClassVar[int] = ...
    GEOMETRYZ: typing.ClassVar[int] = ...
    POINTZ: typing.ClassVar[int] = ...
    LINESTRINGZ: typing.ClassVar[int] = ...
    POLYGONZ: typing.ClassVar[int] = ...
    MULTIPOINTZ: typing.ClassVar[int] = ...
    MULTILINESTRINGZ: typing.ClassVar[int] = ...
    MULTIPOLYGONZ: typing.ClassVar[int] = ...
    GEOMCOLLECTIONZ: typing.ClassVar[int] = ...
    MULTICURVEZ: typing.ClassVar[int] = ...
    MULTISURFACEZ: typing.ClassVar[int] = ...
    CURVEZ: typing.ClassVar[int] = ...
    SURFACEZ: typing.ClassVar[int] = ...
    POLYHEDRALSURFACEZ: typing.ClassVar[int] = ...
    TINZ: typing.ClassVar[int] = ...
    TRIANGLEZ: typing.ClassVar[int] = ...
    GEOMETRYM: typing.ClassVar[int] = ...
    POINTM: typing.ClassVar[int] = ...
    LINESTRINGM: typing.ClassVar[int] = ...
    POLYGONM: typing.ClassVar[int] = ...
    MULTIPOINTM: typing.ClassVar[int] = ...
    MULTILINESTRINGM: typing.ClassVar[int] = ...
    MULTIPOLYGONM: typing.ClassVar[int] = ...
    GEOMCOLLECTIONM: typing.ClassVar[int] = ...
    MULTICURVEM: typing.ClassVar[int] = ...
    MULTISURFACEM: typing.ClassVar[int] = ...
    CURVEM: typing.ClassVar[int] = ...
    SURFACEM: typing.ClassVar[int] = ...
    POLYHEDRALSURFACEM: typing.ClassVar[int] = ...
    TINM: typing.ClassVar[int] = ...
    TRIANGLEM: typing.ClassVar[int] = ...
    GEOMETRYZM: typing.ClassVar[int] = ...
    POINTZM: typing.ClassVar[int] = ...
    LINESTRINGZM: typing.ClassVar[int] = ...
    POLYGONZM: typing.ClassVar[int] = ...
    MULTIPOINTZM: typing.ClassVar[int] = ...
    MULTILINESTRINGZM: typing.ClassVar[int] = ...
    MULTIPOLYGONZM: typing.ClassVar[int] = ...
    GEOMCOLLECTIONZM: typing.ClassVar[int] = ...
    MULTICURVEZM: typing.ClassVar[int] = ...
    MULTISURFACEZM: typing.ClassVar[int] = ...
    CURVEZM: typing.ClassVar[int] = ...
    SURFACEZM: typing.ClassVar[int] = ...
    POLYHEDRALSURFACEZM: typing.ClassVar[int] = ...
    TINZM: typing.ClassVar[int] = ...
    TRIANGLEZM: typing.ClassVar[int] = ...

class JDBCUrlParser:
    SPATIAL_DATASOURCE_ENDSWITH: typing.ClassVar[str] = ...
    @staticmethod
    def parse(string: str) -> java.util.Properties: ...

class JDBCUtilities:
    H2_DRIVER_PACKAGE_NAME: typing.ClassVar[str] = ...
    POSTGRES_MAX_VARCHAR: typing.ClassVar[int] = ...
    H2_DRIVER_NAME: typing.ClassVar[str] = ...
    @staticmethod
    def attachCancelResultSet(statement: java.sql.Statement, progressVisitor: org.h2gis.api.ProgressVisitor) -> java.beans.PropertyChangeListener: ...
    @typing.overload
    @staticmethod
    def createEmptyTable(connection: java.sql.Connection, string: str) -> None: ...
    @typing.overload
    @staticmethod
    def createEmptyTable(connection: java.sql.Connection, tableLocation: 'TableLocation') -> None: ...
    @typing.overload
    @staticmethod
    def createIndex(connection: java.sql.Connection, string: str, string2: str) -> bool: ...
    @typing.overload
    @staticmethod
    def createIndex(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def createSpatialIndex(connection: java.sql.Connection, string: str, string2: str) -> bool: ...
    @typing.overload
    @staticmethod
    def createSpatialIndex(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def createTableDDL(connection: java.sql.Connection, tableLocation: 'TableLocation') -> str: ...
    @typing.overload
    @staticmethod
    def createTableDDL(connection: java.sql.Connection, tableLocation: 'TableLocation', tableLocation2: 'TableLocation') -> str: ...
    @typing.overload
    @staticmethod
    def createTableDDL(resultSet: java.sql.ResultSet, string: str) -> str: ...
    @typing.overload
    @staticmethod
    def createTableDDL(resultSetMetaData: java.sql.ResultSetMetaData, string: str) -> str: ...
    @typing.overload
    @staticmethod
    def dropIndex(connection: java.sql.Connection, string: str) -> None: ...
    @typing.overload
    @staticmethod
    def dropIndex(connection: java.sql.Connection, string: str, string2: str) -> None: ...
    @typing.overload
    @staticmethod
    def dropIndex(connection: java.sql.Connection, tableLocation: 'TableLocation') -> None: ...
    @typing.overload
    @staticmethod
    def dropIndex(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> None: ...
    @typing.overload
    @staticmethod
    def getColumnName(connection: java.sql.Connection, string: str, int: int) -> str: ...
    @typing.overload
    @staticmethod
    def getColumnName(connection: java.sql.Connection, tableLocation: 'TableLocation', int: int) -> str: ...
    @typing.overload
    @staticmethod
    def getColumnName(resultSetMetaData: java.sql.ResultSetMetaData, integer: int) -> str: ...
    @typing.overload
    @staticmethod
    def getColumnNames(connection: java.sql.Connection, string: str) -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def getColumnNames(connection: java.sql.Connection, tableLocation: 'TableLocation') -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def getColumnNames(resultSetMetaData: java.sql.ResultSetMetaData) -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def getColumnNamesAndIndexes(connection: java.sql.Connection, string: str) -> java.util.List['Tuple'[str, int]]: ...
    @typing.overload
    @staticmethod
    def getColumnNamesAndIndexes(connection: java.sql.Connection, tableLocation: 'TableLocation') -> java.util.List['Tuple'[str, int]]: ...
    @staticmethod
    def getFieldIndex(resultSetMetaData: java.sql.ResultSetMetaData, string: str) -> int: ...
    @typing.overload
    @staticmethod
    def getIndexNames(connection: java.sql.Connection, string: str, string2: str) -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def getIndexNames(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def getIndexNames(connection: java.sql.Connection, string: str) -> java.util.Map[str, str]: ...
    @typing.overload
    @staticmethod
    def getIndexNames(connection: java.sql.Connection, tableLocation: 'TableLocation') -> java.util.Map[str, str]: ...
    @staticmethod
    def getIntegerPrimaryKey(connection: java.sql.Connection, tableLocation: 'TableLocation') -> int: ...
    @staticmethod
    def getIntegerPrimaryKeyNameAndIndex(connection: java.sql.Connection, tableLocation: 'TableLocation') -> 'Tuple'[str, int]: ...
    @typing.overload
    @staticmethod
    def getRowCount(connection: java.sql.Connection, string: str) -> int: ...
    @typing.overload
    @staticmethod
    def getRowCount(connection: java.sql.Connection, tableLocation: 'TableLocation') -> int: ...
    @typing.overload
    @staticmethod
    def getTableNames(connection: java.sql.Connection, string: str, string2: str, string3: str, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def getTableNames(connection: java.sql.Connection, tableLocation: 'TableLocation', stringArray: typing.Union[typing.List[str], jpype.JArray]) -> java.util.List[str]: ...
    @staticmethod
    def getTableType(connection: java.sql.Connection, tableLocation: 'TableLocation') -> 'JDBCUtilities.TABLE_TYPE': ...
    @typing.overload
    @staticmethod
    def getUniqueFieldValues(connection: java.sql.Connection, string: str, string2: str) -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def getUniqueFieldValues(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def hasField(connection: java.sql.Connection, string: str, string2: str) -> bool: ...
    @typing.overload
    @staticmethod
    def hasField(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> bool: ...
    @staticmethod
    def isH2DataBase(connection: java.sql.Connection) -> bool: ...
    @typing.overload
    @staticmethod
    def isIndexed(connection: java.sql.Connection, string: str, string2: str) -> bool: ...
    @typing.overload
    @staticmethod
    def isIndexed(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def isLinkedTable(connection: java.sql.Connection, string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def isLinkedTable(connection: java.sql.Connection, tableLocation: 'TableLocation') -> bool: ...
    @typing.overload
    @staticmethod
    def isSpatialIndexed(connection: java.sql.Connection, string: str, string2: str) -> bool: ...
    @typing.overload
    @staticmethod
    def isSpatialIndexed(connection: java.sql.Connection, tableLocation: 'TableLocation', string: str) -> bool: ...
    @staticmethod
    def isTemporaryTable(connection: java.sql.Connection, tableLocation: 'TableLocation') -> bool: ...
    @typing.overload
    @staticmethod
    def tableExists(connection: java.sql.Connection, string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def tableExists(connection: java.sql.Connection, tableLocation: 'TableLocation') -> bool: ...
    @staticmethod
    def wrapConnection(connection: java.sql.Connection) -> java.sql.Connection: ...
    @staticmethod
    def wrapSpatialDataSource(dataSource: javax.sql.DataSource) -> javax.sql.DataSource: ...
    class FUNCTION_TYPE(java.lang.Enum['JDBCUtilities.FUNCTION_TYPE']):
        ALL: typing.ClassVar['JDBCUtilities.FUNCTION_TYPE'] = ...
        BUILT_IN: typing.ClassVar['JDBCUtilities.FUNCTION_TYPE'] = ...
        ALIAS: typing.ClassVar['JDBCUtilities.FUNCTION_TYPE'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'JDBCUtilities.FUNCTION_TYPE': ...
        @staticmethod
        def values() -> typing.MutableSequence['JDBCUtilities.FUNCTION_TYPE']: ...
    class TABLE_TYPE(java.lang.Enum['JDBCUtilities.TABLE_TYPE']):
        TABLE: typing.ClassVar['JDBCUtilities.TABLE_TYPE'] = ...
        VIEW: typing.ClassVar['JDBCUtilities.TABLE_TYPE'] = ...
        FOREIGN_TABLE: typing.ClassVar['JDBCUtilities.TABLE_TYPE'] = ...
        TEMPORARY: typing.ClassVar['JDBCUtilities.TABLE_TYPE'] = ...
        TABLE_LINK: typing.ClassVar['JDBCUtilities.TABLE_TYPE'] = ...
        UNKOWN: typing.ClassVar['JDBCUtilities.TABLE_TYPE'] = ...
        @staticmethod
        def fromString(string: str) -> 'JDBCUtilities.TABLE_TYPE': ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'JDBCUtilities.TABLE_TYPE': ...
        @staticmethod
        def values() -> typing.MutableSequence['JDBCUtilities.TABLE_TYPE']: ...

class SpatialResultSet(java.sql.ResultSet):
    @typing.overload
    def getGeometry(self) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    def getGeometry(self, int: int) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    def getGeometry(self, string: str) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    def updateGeometry(self, int: int, geometry: org.locationtech.jts.geom.Geometry) -> None: ...
    @typing.overload
    def updateGeometry(self, string: str, geometry: org.locationtech.jts.geom.Geometry) -> None: ...

class SpatialResultSetMetaData(java.sql.ResultSetMetaData):
    def getFirstGeometryFieldIndex(self) -> int: ...
    @typing.overload
    def getGeometryType(self) -> int: ...
    @typing.overload
    def getGeometryType(self, int: int) -> int: ...

class TableLocation:
    QUOTE_CHAR: typing.ClassVar[str] = ...
    QUOTE_PATTERN: typing.ClassVar[java.util.regex.Pattern] = ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str, dBTypes: org.h2gis.utilities.dbtypes.DBTypes): ...
    @typing.overload
    def __init__(self, string: str, string2: str, dBTypes: org.h2gis.utilities.dbtypes.DBTypes): ...
    @typing.overload
    def __init__(self, string: str, dBTypes: org.h2gis.utilities.dbtypes.DBTypes): ...
    @typing.overload
    def __init__(self, resultSet: java.sql.ResultSet): ...
    @staticmethod
    def capsIdentifier(string: str, dBTypes: org.h2gis.utilities.dbtypes.DBTypes) -> str: ...
    def equals(self, object: typing.Any) -> bool: ...
    @staticmethod
    def format(string: str, dBTypes: org.h2gis.utilities.dbtypes.DBTypes) -> str: ...
    @typing.overload
    def getCatalog(self) -> str: ...
    @typing.overload
    def getCatalog(self, string: str) -> str: ...
    def getDbTypes(self) -> org.h2gis.utilities.dbtypes.DBTypes: ...
    @typing.overload
    def getSchema(self) -> str: ...
    @typing.overload
    def getSchema(self, string: str) -> str: ...
    def getTable(self) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    @staticmethod
    def parse(string: str) -> 'TableLocation': ...
    @typing.overload
    @staticmethod
    def parse(string: str, dBTypes: org.h2gis.utilities.dbtypes.DBTypes) -> 'TableLocation': ...
    @typing.overload
    @staticmethod
    def quoteIdentifier(string: str) -> str: ...
    @typing.overload
    @staticmethod
    def quoteIdentifier(string: str, dBTypes: org.h2gis.utilities.dbtypes.DBTypes) -> str: ...
    def setDefaultSchema(self, string: str) -> None: ...
    @staticmethod
    def split(string: str) -> typing.MutableSequence[str]: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, dBTypes: org.h2gis.utilities.dbtypes.DBTypes) -> str: ...
    @staticmethod
    def unFormat(string: str, dBTypes: org.h2gis.utilities.dbtypes.DBTypes) -> str: ...

class TableUtilities:
    @staticmethod
    def caseIdentifier(tableLocation: TableLocation, string: str, dBTypes: org.h2gis.utilities.dbtypes.DBTypes) -> str: ...
    @staticmethod
    def copyFields(connection: java.sql.Connection, simpleResultSet: org.h2.tools.SimpleResultSet, tableLocation: TableLocation) -> None: ...
    @staticmethod
    def isColumnListConnection(connection: java.sql.Connection) -> bool: ...
    @staticmethod
    def parseInputTable(connection: java.sql.Connection, string: str) -> TableLocation: ...
    @staticmethod
    def suffixTableLocation(tableLocation: TableLocation, string: str) -> TableLocation: ...

_Tuple__T = typing.TypeVar('_Tuple__T')  # <T>
_Tuple__U = typing.TypeVar('_Tuple__U')  # <U>
class Tuple(typing.Generic[_Tuple__T, _Tuple__U]):
    def __init__(self, t: _Tuple__T, u: _Tuple__U): ...
    def first(self) -> _Tuple__T: ...
    def second(self) -> _Tuple__U: ...
    def toString(self) -> str: ...

class URIUtilities:
    ENCODING: typing.ClassVar[str] = ...
    def __init__(self): ...
    @staticmethod
    def fileFromString(string: str) -> java.io.File: ...
    @staticmethod
    def getConcatenatedParameters(map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]], *string: str) -> str: ...
    @staticmethod
    def getQueryKeyValuePairs(uRI: java.net.URI) -> java.util.Map[str, str]: ...
    @staticmethod
    def relativize(uRI: java.net.URI, uRI2: java.net.URI) -> java.net.URI: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.utilities")``.

    FileUtilities: typing.Type[FileUtilities]
    GeographyUtilities: typing.Type[GeographyUtilities]
    GeometryMetaData: typing.Type[GeometryMetaData]
    GeometryTableUtilities: typing.Type[GeometryTableUtilities]
    GeometryTypeCodes: typing.Type[GeometryTypeCodes]
    JDBCUrlParser: typing.Type[JDBCUrlParser]
    JDBCUtilities: typing.Type[JDBCUtilities]
    SpatialResultSet: typing.Type[SpatialResultSet]
    SpatialResultSetMetaData: typing.Type[SpatialResultSetMetaData]
    TableLocation: typing.Type[TableLocation]
    TableUtilities: typing.Type[TableUtilities]
    Tuple: typing.Type[Tuple]
    URIUtilities: typing.Type[URIUtilities]
    dbtypes: org.h2gis.utilities.dbtypes.__module_protocol__
    jts_utils: org.h2gis.utilities.jts_utils.__module_protocol__
    trigger: org.h2gis.utilities.trigger.__module_protocol__
    wrapper: org.h2gis.utilities.wrapper.__module_protocol__
