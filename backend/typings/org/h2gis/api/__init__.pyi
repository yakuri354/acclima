
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.beans
import java.io
import java.lang
import java.sql
import jpype
import jpype.protocol
import typing



class DriverFunction:
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], boolean: bool, progressVisitor: 'ProgressVisitor') -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, boolean: bool, progressVisitor: 'ProgressVisitor') -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, progressVisitor: 'ProgressVisitor') -> typing.MutableSequence[str]: ...
    @typing.overload
    def exportTable(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], progressVisitor: 'ProgressVisitor') -> typing.MutableSequence[str]: ...
    def getExportFormats(self) -> typing.MutableSequence[str]: ...
    def getFormatDescription(self, string: str) -> str: ...
    def getImportDriverType(self) -> 'DriverFunction.IMPORT_DRIVER_TYPE': ...
    def getImportFormats(self) -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], boolean: bool, progressVisitor: 'ProgressVisitor') -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, boolean: bool, progressVisitor: 'ProgressVisitor') -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], string2: str, progressVisitor: 'ProgressVisitor') -> typing.MutableSequence[str]: ...
    @typing.overload
    def importFile(self, connection: java.sql.Connection, string: str, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], progressVisitor: 'ProgressVisitor') -> typing.MutableSequence[str]: ...
    def isSpatialFormat(self, string: str) -> bool: ...
    class IMPORT_DRIVER_TYPE(java.lang.Enum['DriverFunction.IMPORT_DRIVER_TYPE']):
        LINK: typing.ClassVar['DriverFunction.IMPORT_DRIVER_TYPE'] = ...
        COPY: typing.ClassVar['DriverFunction.IMPORT_DRIVER_TYPE'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'DriverFunction.IMPORT_DRIVER_TYPE': ...
        @staticmethod
        def values() -> typing.MutableSequence['DriverFunction.IMPORT_DRIVER_TYPE']: ...

class FileDriver:
    def close(self) -> None: ...
    def getEstimatedRowSize(self, long: int) -> int: ...
    def getField(self, long: int, int: int) -> typing.Any: ...
    def getFieldCount(self) -> int: ...
    def getRowCount(self) -> int: ...
    def insertRow(self, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> None: ...

class Function:
    PROP_NAME: typing.ClassVar[str] = ...
    PROP_REMARKS: typing.ClassVar[str] = ...
    def getProperty(self, string: str) -> typing.Any: ...

class ProgressVisitor:
    PROPERTY_CANCELED: typing.ClassVar[str] = ...
    def addPropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    def cancel(self) -> None: ...
    def endOfProgress(self) -> None: ...
    def endStep(self) -> None: ...
    def getProgression(self) -> float: ...
    def getStepCount(self) -> int: ...
    def isCanceled(self) -> bool: ...
    def removePropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    def setStep(self, int: int) -> None: ...
    def subProcess(self, int: int) -> 'ProgressVisitor': ...

class AbstractFunction(Function):
    def __init__(self): ...
    def addProperty(self, string: str, object: typing.Any) -> None: ...
    def getProperty(self, string: str) -> typing.Any: ...
    def removeProperty(self, string: str) -> bool: ...

class EmptyProgressVisitor(ProgressVisitor):
    def __init__(self): ...
    def addPropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    def cancel(self) -> None: ...
    def endOfProgress(self) -> None: ...
    def endStep(self) -> None: ...
    def getProgression(self) -> float: ...
    def getStepCount(self) -> int: ...
    def isCanceled(self) -> bool: ...
    def removePropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    def setStep(self, int: int) -> None: ...
    def subProcess(self, int: int) -> ProgressVisitor: ...

class ScalarFunction(Function):
    PROP_DETERMINISTIC: typing.ClassVar[str] = ...
    def getJavaStaticMethod(self) -> str: ...

class DeterministicScalarFunction(AbstractFunction, ScalarFunction):
    def __init__(self): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.h2gis.api")``.

    AbstractFunction: typing.Type[AbstractFunction]
    DeterministicScalarFunction: typing.Type[DeterministicScalarFunction]
    DriverFunction: typing.Type[DriverFunction]
    EmptyProgressVisitor: typing.Type[EmptyProgressVisitor]
    FileDriver: typing.Type[FileDriver]
    Function: typing.Type[Function]
    ProgressVisitor: typing.Type[ProgressVisitor]
    ScalarFunction: typing.Type[ScalarFunction]
