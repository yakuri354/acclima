
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.awt
import java.awt.geom
import java.util
import jpype
import org
import org.locationtech.jts.geom
import typing



class FontGlyphReader:
    FONT_SERIF: typing.ClassVar[str] = ...
    FONT_SANSERIF: typing.ClassVar[str] = ...
    FONT_SANSSERIF: typing.ClassVar[str] = ...
    FONT_MONOSPACED: typing.ClassVar[str] = ...
    @typing.overload
    @staticmethod
    def read(string: str, font: java.awt.Font, double: float, geometryFactory: org.locationtech.jts.geom.GeometryFactory) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def read(string: str, font: java.awt.Font, geometryFactory: org.locationtech.jts.geom.GeometryFactory) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def read(string: str, string2: str, int: int, geometryFactory: org.locationtech.jts.geom.GeometryFactory) -> org.locationtech.jts.geom.Geometry: ...

class GeometryCollectionShape(java.awt.Shape):
    def __init__(self): ...
    def add(self, shape: java.awt.Shape) -> None: ...
    @typing.overload
    def contains(self, double: float, double2: float) -> bool: ...
    @typing.overload
    def contains(self, double: float, double2: float, double3: float, double4: float) -> bool: ...
    @typing.overload
    def contains(self, point2D: java.awt.geom.Point2D) -> bool: ...
    @typing.overload
    def contains(self, rectangle2D: java.awt.geom.Rectangle2D) -> bool: ...
    def getBounds(self) -> java.awt.Rectangle: ...
    def getBounds2D(self) -> java.awt.geom.Rectangle2D: ...
    @typing.overload
    def getPathIterator(self, affineTransform: java.awt.geom.AffineTransform) -> java.awt.geom.PathIterator: ...
    @typing.overload
    def getPathIterator(self, affineTransform: java.awt.geom.AffineTransform, double: float) -> java.awt.geom.PathIterator: ...
    @typing.overload
    def intersects(self, double: float, double2: float, double3: float, double4: float) -> bool: ...
    @typing.overload
    def intersects(self, rectangle2D: java.awt.geom.Rectangle2D) -> bool: ...

class PointTransformation:
    def transform(self, coordinate: org.locationtech.jts.geom.Coordinate, point2D: java.awt.geom.Point2D) -> None: ...

class PolygonShape(java.awt.Shape):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], collection: typing.Union[java.util.Collection, typing.Sequence, typing.Set]): ...
    @typing.overload
    def contains(self, double: float, double2: float) -> bool: ...
    @typing.overload
    def contains(self, double: float, double2: float, double3: float, double4: float) -> bool: ...
    @typing.overload
    def contains(self, point2D: java.awt.geom.Point2D) -> bool: ...
    @typing.overload
    def contains(self, rectangle2D: java.awt.geom.Rectangle2D) -> bool: ...
    def getBounds(self) -> java.awt.Rectangle: ...
    def getBounds2D(self) -> java.awt.geom.Rectangle2D: ...
    @typing.overload
    def getPathIterator(self, affineTransform: java.awt.geom.AffineTransform) -> java.awt.geom.PathIterator: ...
    @typing.overload
    def getPathIterator(self, affineTransform: java.awt.geom.AffineTransform, double: float) -> java.awt.geom.PathIterator: ...
    @typing.overload
    def intersects(self, double: float, double2: float, double3: float, double4: float) -> bool: ...
    @typing.overload
    def intersects(self, rectangle2D: java.awt.geom.Rectangle2D) -> bool: ...

class ShapeCollectionPathIterator(java.awt.geom.PathIterator):
    def __init__(self, collection: typing.Union[java.util.Collection, typing.Sequence, typing.Set], affineTransform: java.awt.geom.AffineTransform): ...
    @typing.overload
    def currentSegment(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> int: ...
    @typing.overload
    def currentSegment(self, floatArray: typing.Union[typing.List[float], jpype.JArray]) -> int: ...
    def getWindingRule(self) -> int: ...
    def isDone(self) -> bool: ...
    def next(self) -> None: ...

class ShapeReader:
    def __init__(self, geometryFactory: org.locationtech.jts.geom.GeometryFactory): ...
    @typing.overload
    def read(self, pathIterator: java.awt.geom.PathIterator) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def read(shape: java.awt.Shape, double: float, geometryFactory: org.locationtech.jts.geom.GeometryFactory) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def read(pathIterator: java.awt.geom.PathIterator, geometryFactory: org.locationtech.jts.geom.GeometryFactory) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def toCoordinates(pathIterator: java.awt.geom.PathIterator) -> java.util.List: ...

class ShapeWriter:
    DEFAULT_POINT_TRANSFORMATION: typing.ClassVar[PointTransformation] = ...
    DEFAULT_POINT_FACTORY: typing.ClassVar['PointShapeFactory'] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, pointTransformation: PointTransformation): ...
    @typing.overload
    def __init__(self, pointTransformation: PointTransformation, pointShapeFactory: 'PointShapeFactory'): ...
    def setDecimation(self, double: float) -> None: ...
    def setRemoveDuplicatePoints(self, boolean: bool) -> None: ...
    def toShape(self, geometry: org.locationtech.jts.geom.Geometry) -> java.awt.Shape: ...

class IdentityPointTransformation(PointTransformation):
    def __init__(self): ...
    def transform(self, coordinate: org.locationtech.jts.geom.Coordinate, point2D: java.awt.geom.Point2D) -> None: ...

class PointShapeFactory:
    def createPoint(self, point2D: java.awt.geom.Point2D) -> java.awt.Shape: ...
    class BasePointShapeFactory(org.locationtech.jts.awt.PointShapeFactory):
        DEFAULT_SIZE: typing.ClassVar[float] = ...
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, double: float): ...
        def createPoint(self, point2D: java.awt.geom.Point2D) -> java.awt.Shape: ...
    class Circle(org.locationtech.jts.awt.PointShapeFactory.BasePointShapeFactory):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, double: float): ...
        def createPoint(self, point2D: java.awt.geom.Point2D) -> java.awt.Shape: ...
    class Cross(org.locationtech.jts.awt.PointShapeFactory.BasePointShapeFactory):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, double: float): ...
        def createPoint(self, point2D: java.awt.geom.Point2D) -> java.awt.Shape: ...
    class Point(org.locationtech.jts.awt.PointShapeFactory.BasePointShapeFactory):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, double: float): ...
        def createPoint(self, point2D: java.awt.geom.Point2D) -> java.awt.Shape: ...
    class Square(org.locationtech.jts.awt.PointShapeFactory.BasePointShapeFactory):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, double: float): ...
        def createPoint(self, point2D: java.awt.geom.Point2D) -> java.awt.Shape: ...
    class Star(org.locationtech.jts.awt.PointShapeFactory.BasePointShapeFactory):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, double: float): ...
        def createPoint(self, point2D: java.awt.geom.Point2D) -> java.awt.Shape: ...
    class Triangle(org.locationtech.jts.awt.PointShapeFactory.BasePointShapeFactory):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, double: float): ...
        def createPoint(self, point2D: java.awt.geom.Point2D) -> java.awt.Shape: ...
    class X(org.locationtech.jts.awt.PointShapeFactory.BasePointShapeFactory):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, double: float): ...
        def createPoint(self, point2D: java.awt.geom.Point2D) -> java.awt.Shape: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.awt")``.

    FontGlyphReader: typing.Type[FontGlyphReader]
    GeometryCollectionShape: typing.Type[GeometryCollectionShape]
    IdentityPointTransformation: typing.Type[IdentityPointTransformation]
    PointShapeFactory: typing.Type[PointShapeFactory]
    PointTransformation: typing.Type[PointTransformation]
    PolygonShape: typing.Type[PolygonShape]
    ShapeCollectionPathIterator: typing.Type[ShapeCollectionPathIterator]
    ShapeReader: typing.Type[ShapeReader]
    ShapeWriter: typing.Type[ShapeWriter]
