
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import org.locationtech.jts.algorithm
import org.locationtech.jts.geom
import org.locationtech.jts.geomgraph
import org.locationtech.jts.operation
import org.locationtech.jts.operation.overlay.snap
import org.locationtech.jts.operation.overlay.validate
import typing



class ConsistentPolygonRingChecker:
    def __init__(self, planarGraph: org.locationtech.jts.geomgraph.PlanarGraph): ...
    def check(self, int: int) -> None: ...
    def checkAll(self) -> None: ...

class EdgeSetNoder:
    def __init__(self, lineIntersector: org.locationtech.jts.algorithm.LineIntersector): ...
    def addEdges(self, list: java.util.List) -> None: ...
    def getNodedEdges(self) -> java.util.List: ...

class LineBuilder:
    def __init__(self, overlayOp: 'OverlayOp', geometryFactory: org.locationtech.jts.geom.GeometryFactory, pointLocator: org.locationtech.jts.algorithm.PointLocator): ...
    def build(self, int: int) -> java.util.List: ...

class MaximalEdgeRing(org.locationtech.jts.geomgraph.EdgeRing):
    def __init__(self, directedEdge: org.locationtech.jts.geomgraph.DirectedEdge, geometryFactory: org.locationtech.jts.geom.GeometryFactory): ...
    def buildMinimalRings(self) -> java.util.List: ...
    def getNext(self, directedEdge: org.locationtech.jts.geomgraph.DirectedEdge) -> org.locationtech.jts.geomgraph.DirectedEdge: ...
    def linkDirectedEdgesForMinimalEdgeRings(self) -> None: ...
    def setEdgeRing(self, directedEdge: org.locationtech.jts.geomgraph.DirectedEdge, edgeRing: org.locationtech.jts.geomgraph.EdgeRing) -> None: ...

class MinimalEdgeRing(org.locationtech.jts.geomgraph.EdgeRing):
    def __init__(self, directedEdge: org.locationtech.jts.geomgraph.DirectedEdge, geometryFactory: org.locationtech.jts.geom.GeometryFactory): ...
    def getNext(self, directedEdge: org.locationtech.jts.geomgraph.DirectedEdge) -> org.locationtech.jts.geomgraph.DirectedEdge: ...
    def setEdgeRing(self, directedEdge: org.locationtech.jts.geomgraph.DirectedEdge, edgeRing: org.locationtech.jts.geomgraph.EdgeRing) -> None: ...

class OverlayNodeFactory(org.locationtech.jts.geomgraph.NodeFactory):
    def __init__(self): ...
    def createNode(self, coordinate: org.locationtech.jts.geom.Coordinate) -> org.locationtech.jts.geomgraph.Node: ...

class OverlayOp(org.locationtech.jts.operation.GeometryGraphOperation):
    INTERSECTION: typing.ClassVar[int] = ...
    UNION: typing.ClassVar[int] = ...
    DIFFERENCE: typing.ClassVar[int] = ...
    SYMDIFFERENCE: typing.ClassVar[int] = ...
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry): ...
    @staticmethod
    def createEmptyResult(int: int, geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry, geometryFactory: org.locationtech.jts.geom.GeometryFactory) -> org.locationtech.jts.geom.Geometry: ...
    def getGraph(self) -> org.locationtech.jts.geomgraph.PlanarGraph: ...
    def getResultGeometry(self, int: int) -> org.locationtech.jts.geom.Geometry: ...
    def isCoveredByA(self, coordinate: org.locationtech.jts.geom.Coordinate) -> bool: ...
    def isCoveredByLA(self, coordinate: org.locationtech.jts.geom.Coordinate) -> bool: ...
    @typing.overload
    @staticmethod
    def isResultOfOp(int: int, int2: int, int3: int) -> bool: ...
    @typing.overload
    @staticmethod
    def isResultOfOp(label: org.locationtech.jts.geomgraph.Label, int: int) -> bool: ...
    @staticmethod
    def overlayOp(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry, int: int) -> org.locationtech.jts.geom.Geometry: ...

class PointBuilder:
    def __init__(self, overlayOp: OverlayOp, geometryFactory: org.locationtech.jts.geom.GeometryFactory, pointLocator: org.locationtech.jts.algorithm.PointLocator): ...
    def build(self, int: int) -> java.util.List: ...

class PolygonBuilder:
    def __init__(self, geometryFactory: org.locationtech.jts.geom.GeometryFactory): ...
    @typing.overload
    def add(self, collection: typing.Union[java.util.Collection, typing.Sequence, typing.Set], collection2: typing.Union[java.util.Collection, typing.Sequence, typing.Set]) -> None: ...
    @typing.overload
    def add(self, planarGraph: org.locationtech.jts.geomgraph.PlanarGraph) -> None: ...
    def getPolygons(self) -> java.util.List: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.operation.overlay")``.

    ConsistentPolygonRingChecker: typing.Type[ConsistentPolygonRingChecker]
    EdgeSetNoder: typing.Type[EdgeSetNoder]
    LineBuilder: typing.Type[LineBuilder]
    MaximalEdgeRing: typing.Type[MaximalEdgeRing]
    MinimalEdgeRing: typing.Type[MinimalEdgeRing]
    OverlayNodeFactory: typing.Type[OverlayNodeFactory]
    OverlayOp: typing.Type[OverlayOp]
    PointBuilder: typing.Type[PointBuilder]
    PolygonBuilder: typing.Type[PolygonBuilder]
    snap: org.locationtech.jts.operation.overlay.snap.__module_protocol__
    validate: org.locationtech.jts.operation.overlay.validate.__module_protocol__
