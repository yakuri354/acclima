
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jpype
import org.locationtech.jts.geom
import typing



class GeometrySnapper:
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry): ...
    @typing.overload
    @staticmethod
    def computeOverlaySnapTolerance(geometry: org.locationtech.jts.geom.Geometry) -> float: ...
    @typing.overload
    @staticmethod
    def computeOverlaySnapTolerance(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> float: ...
    @staticmethod
    def computeSizeBasedSnapTolerance(geometry: org.locationtech.jts.geom.Geometry) -> float: ...
    @staticmethod
    def snap(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry, double: float) -> typing.MutableSequence[org.locationtech.jts.geom.Geometry]: ...
    def snapTo(self, geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    def snapToSelf(self, double: float, boolean: bool) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def snapToSelf(geometry: org.locationtech.jts.geom.Geometry, double: float, boolean: bool) -> org.locationtech.jts.geom.Geometry: ...

class LineStringSnapper:
    @typing.overload
    def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], double: float): ...
    @typing.overload
    def __init__(self, lineString: org.locationtech.jts.geom.LineString, double: float): ...
    def setAllowSnappingToSourceVertices(self, boolean: bool) -> None: ...
    def snapTo(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray]) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...

class SnapIfNeededOverlayOp:
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry): ...
    @staticmethod
    def difference(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    def getResultGeometry(self, int: int) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def intersection(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def overlayOp(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry, int: int) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def symDifference(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def union(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...

class SnapOverlayOp:
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry): ...
    @staticmethod
    def difference(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    def getResultGeometry(self, int: int) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def intersection(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def overlayOp(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry, int: int) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def symDifference(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def union(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.operation.overlay.snap")``.

    GeometrySnapper: typing.Type[GeometrySnapper]
    LineStringSnapper: typing.Type[LineStringSnapper]
    SnapIfNeededOverlayOp: typing.Type[SnapIfNeededOverlayOp]
    SnapOverlayOp: typing.Type[SnapOverlayOp]
