
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import jpype
import org.locationtech.jts.geom
import org.locationtech.jts.operation.buffer.validate
import typing



class BufferCurveSetBuilder:
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry, double: float, precisionModel: org.locationtech.jts.geom.PrecisionModel, bufferParameters: 'BufferParameters'): ...
    def getCurves(self) -> java.util.List: ...

class BufferInputLineSimplifier:
    def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray]): ...
    @typing.overload
    def simplify(self, double: float) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...
    @typing.overload
    @staticmethod
    def simplify(coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], double: float) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...

class BufferOp:
    CAP_ROUND: typing.ClassVar[int] = ...
    CAP_BUTT: typing.ClassVar[int] = ...
    CAP_FLAT: typing.ClassVar[int] = ...
    CAP_SQUARE: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry): ...
    @typing.overload
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry, bufferParameters: 'BufferParameters'): ...
    @staticmethod
    def bufferByZero(geometry: org.locationtech.jts.geom.Geometry, boolean: bool) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def bufferOp(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def bufferOp(geometry: org.locationtech.jts.geom.Geometry, double: float, int: int) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def bufferOp(geometry: org.locationtech.jts.geom.Geometry, double: float, int: int, int2: int) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def bufferOp(geometry: org.locationtech.jts.geom.Geometry, double: float, bufferParameters: 'BufferParameters') -> org.locationtech.jts.geom.Geometry: ...
    def getResultGeometry(self, double: float) -> org.locationtech.jts.geom.Geometry: ...
    def setEndCapStyle(self, int: int) -> None: ...
    def setQuadrantSegments(self, int: int) -> None: ...

class BufferParameters:
    CAP_ROUND: typing.ClassVar[int] = ...
    CAP_FLAT: typing.ClassVar[int] = ...
    CAP_SQUARE: typing.ClassVar[int] = ...
    JOIN_ROUND: typing.ClassVar[int] = ...
    JOIN_MITRE: typing.ClassVar[int] = ...
    JOIN_BEVEL: typing.ClassVar[int] = ...
    DEFAULT_QUADRANT_SEGMENTS: typing.ClassVar[int] = ...
    DEFAULT_MITRE_LIMIT: typing.ClassVar[float] = ...
    DEFAULT_SIMPLIFY_FACTOR: typing.ClassVar[float] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, double: float): ...
    @staticmethod
    def bufferDistanceError(int: int) -> float: ...
    def copy(self) -> 'BufferParameters': ...
    def getEndCapStyle(self) -> int: ...
    def getJoinStyle(self) -> int: ...
    def getMitreLimit(self) -> float: ...
    def getQuadrantSegments(self) -> int: ...
    def getSimplifyFactor(self) -> float: ...
    def isSingleSided(self) -> bool: ...
    def setEndCapStyle(self, int: int) -> None: ...
    def setJoinStyle(self, int: int) -> None: ...
    def setMitreLimit(self, double: float) -> None: ...
    def setQuadrantSegments(self, int: int) -> None: ...
    def setSimplifyFactor(self, double: float) -> None: ...
    def setSingleSided(self, boolean: bool) -> None: ...

class OffsetCurve:
    @typing.overload
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry, double: float): ...
    @typing.overload
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry, double: float, bufferParameters: BufferParameters): ...
    @typing.overload
    def getCurve(self) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getCurve(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def getCurve(geometry: org.locationtech.jts.geom.Geometry, double: float, int: int, int2: int, double2: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def rawOffset(lineString: org.locationtech.jts.geom.LineString, double: float) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...
    @typing.overload
    @staticmethod
    def rawOffset(lineString: org.locationtech.jts.geom.LineString, double: float, bufferParameters: BufferParameters) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...

class OffsetCurveBuilder:
    def __init__(self, precisionModel: org.locationtech.jts.geom.PrecisionModel, bufferParameters: BufferParameters): ...
    def getBufferParameters(self) -> BufferParameters: ...
    def getLineCurve(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], double: float) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...
    def getOffsetCurve(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], double: float) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...
    def getRingCurve(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], int: int, double: float) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...
    def isLineOffsetEmpty(self, double: float) -> bool: ...

class VariableBuffer:
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry, doubleArray: typing.Union[typing.List[float], jpype.JArray]): ...
    @typing.overload
    @staticmethod
    def buffer(geometry: org.locationtech.jts.geom.Geometry, double: float, double2: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def buffer(geometry: org.locationtech.jts.geom.Geometry, double: float, double2: float, double3: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def buffer(geometry: org.locationtech.jts.geom.Geometry, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> org.locationtech.jts.geom.Geometry: ...
    def getResult(self) -> org.locationtech.jts.geom.Geometry: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.operation.buffer")``.

    BufferCurveSetBuilder: typing.Type[BufferCurveSetBuilder]
    BufferInputLineSimplifier: typing.Type[BufferInputLineSimplifier]
    BufferOp: typing.Type[BufferOp]
    BufferParameters: typing.Type[BufferParameters]
    OffsetCurve: typing.Type[OffsetCurve]
    OffsetCurveBuilder: typing.Type[OffsetCurveBuilder]
    VariableBuffer: typing.Type[VariableBuffer]
    validate: org.locationtech.jts.operation.buffer.validate.__module_protocol__
