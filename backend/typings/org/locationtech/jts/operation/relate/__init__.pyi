
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import jpype
import org.locationtech.jts.algorithm
import org.locationtech.jts.geom
import org.locationtech.jts.geomgraph
import org.locationtech.jts.operation
import typing



class EdgeEndBuilder:
    def __init__(self): ...
    @typing.overload
    def computeEdgeEnds(self, iterator: java.util.Iterator) -> java.util.List: ...
    @typing.overload
    def computeEdgeEnds(self, edge: org.locationtech.jts.geomgraph.Edge, list: java.util.List) -> None: ...

class EdgeEndBundle(org.locationtech.jts.geomgraph.EdgeEnd):
    @typing.overload
    def __init__(self, boundaryNodeRule: org.locationtech.jts.algorithm.BoundaryNodeRule, edgeEnd: org.locationtech.jts.geomgraph.EdgeEnd): ...
    @typing.overload
    def __init__(self, edgeEnd: org.locationtech.jts.geomgraph.EdgeEnd): ...
    def computeLabel(self, boundaryNodeRule: org.locationtech.jts.algorithm.BoundaryNodeRule) -> None: ...
    def getEdgeEnds(self) -> java.util.List: ...
    def getLabel(self) -> org.locationtech.jts.geomgraph.Label: ...
    def insert(self, edgeEnd: org.locationtech.jts.geomgraph.EdgeEnd) -> None: ...
    def iterator(self) -> java.util.Iterator: ...
    def print_(self, printStream: java.io.PrintStream) -> None: ...

class EdgeEndBundleStar(org.locationtech.jts.geomgraph.EdgeEndStar):
    def __init__(self): ...
    def insert(self, edgeEnd: org.locationtech.jts.geomgraph.EdgeEnd) -> None: ...

class RelateComputer:
    def __init__(self, geometryGraphArray: typing.Union[typing.List[org.locationtech.jts.geomgraph.GeometryGraph], jpype.JArray]): ...
    def computeIM(self) -> org.locationtech.jts.geom.IntersectionMatrix: ...

class RelateNode(org.locationtech.jts.geomgraph.Node):
    def __init__(self, coordinate: org.locationtech.jts.geom.Coordinate, edgeEndStar: org.locationtech.jts.geomgraph.EdgeEndStar): ...

class RelateNodeFactory(org.locationtech.jts.geomgraph.NodeFactory):
    def __init__(self): ...
    def createNode(self, coordinate: org.locationtech.jts.geom.Coordinate) -> org.locationtech.jts.geomgraph.Node: ...

class RelateNodeGraph:
    def __init__(self): ...
    def build(self, geometryGraph: org.locationtech.jts.geomgraph.GeometryGraph) -> None: ...
    def computeIntersectionNodes(self, geometryGraph: org.locationtech.jts.geomgraph.GeometryGraph, int: int) -> None: ...
    def copyNodesAndLabels(self, geometryGraph: org.locationtech.jts.geomgraph.GeometryGraph, int: int) -> None: ...
    def getNodeIterator(self) -> java.util.Iterator: ...
    def insertEdgeEnds(self, list: java.util.List) -> None: ...

class RelateOp(org.locationtech.jts.operation.GeometryGraphOperation):
    @typing.overload
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry): ...
    @typing.overload
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry, boundaryNodeRule: org.locationtech.jts.algorithm.BoundaryNodeRule): ...
    def getIntersectionMatrix(self) -> org.locationtech.jts.geom.IntersectionMatrix: ...
    @typing.overload
    @staticmethod
    def relate(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.IntersectionMatrix: ...
    @typing.overload
    @staticmethod
    def relate(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry, boundaryNodeRule: org.locationtech.jts.algorithm.BoundaryNodeRule) -> org.locationtech.jts.geom.IntersectionMatrix: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.operation.relate")``.

    EdgeEndBuilder: typing.Type[EdgeEndBuilder]
    EdgeEndBundle: typing.Type[EdgeEndBundle]
    EdgeEndBundleStar: typing.Type[EdgeEndBundleStar]
    RelateComputer: typing.Type[RelateComputer]
    RelateNode: typing.Type[RelateNode]
    RelateNodeFactory: typing.Type[RelateNodeFactory]
    RelateNodeGraph: typing.Type[RelateNodeGraph]
    RelateOp: typing.Type[RelateOp]
