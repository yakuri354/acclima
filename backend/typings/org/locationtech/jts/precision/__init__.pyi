
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jpype
import org.locationtech.jts.geom
import org.locationtech.jts.geom.util
import typing



class CommonBits:
    def __init__(self): ...
    def add(self, double: float) -> None: ...
    @staticmethod
    def getBit(long: int, int: int) -> int: ...
    def getCommon(self) -> float: ...
    @staticmethod
    def numCommonMostSigMantissaBits(long: int, long2: int) -> int: ...
    @staticmethod
    def signExpBits(long: int) -> int: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, long: int) -> str: ...
    @staticmethod
    def zeroLowerBits(long: int, int: int) -> int: ...

class CommonBitsOp:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool): ...
    def buffer(self, geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    def difference(self, geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    def intersection(self, geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    def symDifference(self, geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    def union(self, geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...

class CommonBitsRemover:
    def __init__(self): ...
    def add(self, geometry: org.locationtech.jts.geom.Geometry) -> None: ...
    def addCommonBits(self, geometry: org.locationtech.jts.geom.Geometry) -> None: ...
    def getCommonCoordinate(self) -> org.locationtech.jts.geom.Coordinate: ...
    def removeCommonBits(self, geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...

class CoordinatePrecisionReducerFilter(org.locationtech.jts.geom.CoordinateSequenceFilter):
    def __init__(self, precisionModel: org.locationtech.jts.geom.PrecisionModel): ...
    def filter(self, coordinateSequence: org.locationtech.jts.geom.CoordinateSequence, int: int) -> None: ...
    def isDone(self) -> bool: ...
    def isGeometryChanged(self) -> bool: ...

class EnhancedPrecisionOp:
    def __init__(self): ...
    @staticmethod
    def buffer(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def difference(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def intersection(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def symDifference(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def union(geometry: org.locationtech.jts.geom.Geometry, geometry2: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...

class GeometryPrecisionReducer:
    def __init__(self, precisionModel: org.locationtech.jts.geom.PrecisionModel): ...
    @typing.overload
    def reduce(self, geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def reduce(geometry: org.locationtech.jts.geom.Geometry, precisionModel: org.locationtech.jts.geom.PrecisionModel) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def reduceKeepCollapsed(geometry: org.locationtech.jts.geom.Geometry, precisionModel: org.locationtech.jts.geom.PrecisionModel) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def reducePointwise(geometry: org.locationtech.jts.geom.Geometry, precisionModel: org.locationtech.jts.geom.PrecisionModel) -> org.locationtech.jts.geom.Geometry: ...
    def setChangePrecisionModel(self, boolean: bool) -> None: ...
    def setPointwise(self, boolean: bool) -> None: ...
    def setRemoveCollapsedComponents(self, boolean: bool) -> None: ...

class MinimumClearance:
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry): ...
    @typing.overload
    def getDistance(self) -> float: ...
    @typing.overload
    @staticmethod
    def getDistance(geometry: org.locationtech.jts.geom.Geometry) -> float: ...
    @typing.overload
    def getLine(self) -> org.locationtech.jts.geom.LineString: ...
    @typing.overload
    @staticmethod
    def getLine(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...

class PrecisionReducerCoordinateOperation(org.locationtech.jts.geom.util.GeometryEditor.CoordinateOperation):
    def __init__(self, precisionModel: org.locationtech.jts.geom.PrecisionModel, boolean: bool): ...
    @typing.overload
    def edit(self, geometry: org.locationtech.jts.geom.Geometry, geometryFactory: org.locationtech.jts.geom.GeometryFactory) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    def edit(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], geometry: org.locationtech.jts.geom.Geometry) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...

class SimpleGeometryPrecisionReducer:
    def __init__(self, precisionModel: org.locationtech.jts.geom.PrecisionModel): ...
    @typing.overload
    def reduce(self, geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def reduce(geometry: org.locationtech.jts.geom.Geometry, precisionModel: org.locationtech.jts.geom.PrecisionModel) -> org.locationtech.jts.geom.Geometry: ...
    def setChangePrecisionModel(self, boolean: bool) -> None: ...
    def setRemoveCollapsedComponents(self, boolean: bool) -> None: ...

class SimpleMinimumClearance:
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry): ...
    @typing.overload
    def getDistance(self) -> float: ...
    @typing.overload
    @staticmethod
    def getDistance(geometry: org.locationtech.jts.geom.Geometry) -> float: ...
    @typing.overload
    def getLine(self) -> org.locationtech.jts.geom.LineString: ...
    @typing.overload
    @staticmethod
    def getLine(geometry: org.locationtech.jts.geom.Geometry) -> org.locationtech.jts.geom.Geometry: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.precision")``.

    CommonBits: typing.Type[CommonBits]
    CommonBitsOp: typing.Type[CommonBitsOp]
    CommonBitsRemover: typing.Type[CommonBitsRemover]
    CoordinatePrecisionReducerFilter: typing.Type[CoordinatePrecisionReducerFilter]
    EnhancedPrecisionOp: typing.Type[EnhancedPrecisionOp]
    GeometryPrecisionReducer: typing.Type[GeometryPrecisionReducer]
    MinimumClearance: typing.Type[MinimumClearance]
    PrecisionReducerCoordinateOperation: typing.Type[PrecisionReducerCoordinateOperation]
    SimpleGeometryPrecisionReducer: typing.Type[SimpleGeometryPrecisionReducer]
    SimpleMinimumClearance: typing.Type[SimpleMinimumClearance]
