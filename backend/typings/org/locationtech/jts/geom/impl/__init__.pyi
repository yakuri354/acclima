
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import jpype
import org
import org.locationtech.jts.geom
import typing



class CoordinateArraySequence(org.locationtech.jts.geom.CoordinateSequence, java.io.Serializable):
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...
    @typing.overload
    def __init__(self, coordinateSequence: org.locationtech.jts.geom.CoordinateSequence): ...
    @typing.overload
    def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray]): ...
    @typing.overload
    def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], int: int): ...
    @typing.overload
    def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], int: int, int2: int): ...
    def clone(self) -> typing.Any: ...
    def copy(self) -> 'CoordinateArraySequence': ...
    def expandEnvelope(self, envelope: org.locationtech.jts.geom.Envelope) -> org.locationtech.jts.geom.Envelope: ...
    @typing.overload
    def getCoordinate(self, int: int) -> org.locationtech.jts.geom.Coordinate: ...
    @typing.overload
    def getCoordinate(self, int: int, coordinate: org.locationtech.jts.geom.Coordinate) -> None: ...
    def getCoordinateCopy(self, int: int) -> org.locationtech.jts.geom.Coordinate: ...
    def getDimension(self) -> int: ...
    def getM(self, int: int) -> float: ...
    def getMeasures(self) -> int: ...
    def getOrdinate(self, int: int, int2: int) -> float: ...
    def getX(self, int: int) -> float: ...
    def getY(self, int: int) -> float: ...
    def getZ(self, int: int) -> float: ...
    def setOrdinate(self, int: int, int2: int, double: float) -> None: ...
    def size(self) -> int: ...
    def toCoordinateArray(self) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...
    def toString(self) -> str: ...

class CoordinateArraySequenceFactory(org.locationtech.jts.geom.CoordinateSequenceFactory, java.io.Serializable):
    @typing.overload
    def create(self, int: int, int2: int) -> org.locationtech.jts.geom.CoordinateSequence: ...
    @typing.overload
    def create(self, int: int, int2: int, int3: int) -> org.locationtech.jts.geom.CoordinateSequence: ...
    @typing.overload
    def create(self, coordinateSequence: org.locationtech.jts.geom.CoordinateSequence) -> org.locationtech.jts.geom.CoordinateSequence: ...
    @typing.overload
    def create(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray]) -> org.locationtech.jts.geom.CoordinateSequence: ...
    @staticmethod
    def instance() -> 'CoordinateArraySequenceFactory': ...

class PackedCoordinateSequenceFactory(org.locationtech.jts.geom.CoordinateSequenceFactory, java.io.Serializable):
    DOUBLE: typing.ClassVar[int] = ...
    FLOAT: typing.ClassVar[int] = ...
    DOUBLE_FACTORY: typing.ClassVar['PackedCoordinateSequenceFactory'] = ...
    FLOAT_FACTORY: typing.ClassVar['PackedCoordinateSequenceFactory'] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def create(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int) -> org.locationtech.jts.geom.CoordinateSequence: ...
    @typing.overload
    def create(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> org.locationtech.jts.geom.CoordinateSequence: ...
    @typing.overload
    def create(self, floatArray: typing.Union[typing.List[float], jpype.JArray], int: int) -> org.locationtech.jts.geom.CoordinateSequence: ...
    @typing.overload
    def create(self, floatArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> org.locationtech.jts.geom.CoordinateSequence: ...
    @typing.overload
    def create(self, int: int, int2: int) -> org.locationtech.jts.geom.CoordinateSequence: ...
    @typing.overload
    def create(self, int: int, int2: int, int3: int) -> org.locationtech.jts.geom.CoordinateSequence: ...
    @typing.overload
    def create(self, coordinateSequence: org.locationtech.jts.geom.CoordinateSequence) -> org.locationtech.jts.geom.CoordinateSequence: ...
    @typing.overload
    def create(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray]) -> org.locationtech.jts.geom.CoordinateSequence: ...
    def getType(self) -> int: ...

class PackedCoordinateSequence(org.locationtech.jts.geom.CoordinateSequence, java.io.Serializable):
    def clone(self) -> typing.Any: ...
    def copy(self) -> 'PackedCoordinateSequence': ...
    @typing.overload
    def getCoordinate(self, int: int) -> org.locationtech.jts.geom.Coordinate: ...
    @typing.overload
    def getCoordinate(self, int: int, coordinate: org.locationtech.jts.geom.Coordinate) -> None: ...
    def getCoordinateCopy(self, int: int) -> org.locationtech.jts.geom.Coordinate: ...
    def getDimension(self) -> int: ...
    def getMeasures(self) -> int: ...
    def getOrdinate(self, int: int, int2: int) -> float: ...
    def getX(self, int: int) -> float: ...
    def getY(self, int: int) -> float: ...
    def setOrdinate(self, int: int, int2: int, double: float) -> None: ...
    def setX(self, int: int, double: float) -> None: ...
    def setY(self, int: int, double: float) -> None: ...
    def toCoordinateArray(self) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...
    def toString(self) -> str: ...
    class Double(org.locationtech.jts.geom.impl.PackedCoordinateSequence):
        @typing.overload
        def __init__(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int): ...
        @typing.overload
        def __init__(self, floatArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int): ...
        @typing.overload
        def __init__(self, int: int, int2: int, int3: int): ...
        @typing.overload
        def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray]): ...
        @typing.overload
        def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], int: int): ...
        @typing.overload
        def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], int: int, int2: int): ...
        def clone(self) -> typing.Any: ...
        def copy(self) -> 'PackedCoordinateSequence.Double': ...
        def expandEnvelope(self, envelope: org.locationtech.jts.geom.Envelope) -> org.locationtech.jts.geom.Envelope: ...
        def getCoordinateInternal(self, int: int) -> org.locationtech.jts.geom.Coordinate: ...
        def getOrdinate(self, int: int, int2: int) -> float: ...
        def getRawCoordinates(self) -> typing.MutableSequence[float]: ...
        def setOrdinate(self, int: int, int2: int, double: float) -> None: ...
        def size(self) -> int: ...
    class Float(org.locationtech.jts.geom.impl.PackedCoordinateSequence):
        @typing.overload
        def __init__(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int): ...
        @typing.overload
        def __init__(self, floatArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int): ...
        @typing.overload
        def __init__(self, int: int, int2: int, int3: int): ...
        @typing.overload
        def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], int: int): ...
        @typing.overload
        def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], int: int, int2: int): ...
        def clone(self) -> typing.Any: ...
        def copy(self) -> 'PackedCoordinateSequence.Float': ...
        def expandEnvelope(self, envelope: org.locationtech.jts.geom.Envelope) -> org.locationtech.jts.geom.Envelope: ...
        def getCoordinateInternal(self, int: int) -> org.locationtech.jts.geom.Coordinate: ...
        def getOrdinate(self, int: int, int2: int) -> float: ...
        def getRawCoordinates(self) -> typing.MutableSequence[float]: ...
        def setOrdinate(self, int: int, int2: int, double: float) -> None: ...
        def size(self) -> int: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.geom.impl")``.

    CoordinateArraySequence: typing.Type[CoordinateArraySequence]
    CoordinateArraySequenceFactory: typing.Type[CoordinateArraySequenceFactory]
    PackedCoordinateSequence: typing.Type[PackedCoordinateSequence]
    PackedCoordinateSequenceFactory: typing.Type[PackedCoordinateSequenceFactory]
