
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import org.locationtech.jts.geom
import typing



class ConcaveHull:
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry): ...
    @typing.overload
    @staticmethod
    def concaveHullByLength(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def concaveHullByLength(geometry: org.locationtech.jts.geom.Geometry, double: float, boolean: bool) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def concaveHullByLengthRatio(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def concaveHullByLengthRatio(geometry: org.locationtech.jts.geom.Geometry, double: float, boolean: bool) -> org.locationtech.jts.geom.Geometry: ...
    def getHull(self) -> org.locationtech.jts.geom.Geometry: ...
    def setHolesAllowed(self, boolean: bool) -> None: ...
    def setMaximumEdgeLength(self, double: float) -> None: ...
    def setMaximumEdgeLengthRatio(self, double: float) -> None: ...
    @staticmethod
    def uniformGridEdgeLength(geometry: org.locationtech.jts.geom.Geometry) -> float: ...

class ConcaveHullOfPolygons:
    def __init__(self, geometry: org.locationtech.jts.geom.Geometry): ...
    @staticmethod
    def concaveFillByLength(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @staticmethod
    def concaveFillByLengthRatio(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def concaveHullByLength(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def concaveHullByLength(geometry: org.locationtech.jts.geom.Geometry, double: float, boolean: bool, boolean2: bool) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def concaveHullByLengthRatio(geometry: org.locationtech.jts.geom.Geometry, double: float) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    @staticmethod
    def concaveHullByLengthRatio(geometry: org.locationtech.jts.geom.Geometry, double: float, boolean: bool, boolean2: bool) -> org.locationtech.jts.geom.Geometry: ...
    def getFill(self) -> org.locationtech.jts.geom.Geometry: ...
    def getHull(self) -> org.locationtech.jts.geom.Geometry: ...
    def setHolesAllowed(self, boolean: bool) -> None: ...
    def setMaximumEdgeLength(self, double: float) -> None: ...
    def setMaximumEdgeLengthRatio(self, double: float) -> None: ...
    def setTight(self, boolean: bool) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.algorithm.hull")``.

    ConcaveHull: typing.Type[ConcaveHull]
    ConcaveHullOfPolygons: typing.Type[ConcaveHullOfPolygons]
