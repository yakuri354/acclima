
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import jpype
import org.locationtech.jts.geom
import org.xml.sax
import org.xml.sax.helpers
import typing



class GMLConstants:
    GML_NAMESPACE: typing.ClassVar[str] = ...
    GML_PREFIX: typing.ClassVar[str] = ...
    GML_ATTR_SRSNAME: typing.ClassVar[str] = ...
    GML_GEOMETRY_MEMBER: typing.ClassVar[str] = ...
    GML_POINT_MEMBER: typing.ClassVar[str] = ...
    GML_POLYGON_MEMBER: typing.ClassVar[str] = ...
    GML_LINESTRING_MEMBER: typing.ClassVar[str] = ...
    GML_OUTER_BOUNDARY_IS: typing.ClassVar[str] = ...
    GML_INNER_BOUNDARY_IS: typing.ClassVar[str] = ...
    GML_POINT: typing.ClassVar[str] = ...
    GML_LINESTRING: typing.ClassVar[str] = ...
    GML_LINEARRING: typing.ClassVar[str] = ...
    GML_POLYGON: typing.ClassVar[str] = ...
    GML_BOX: typing.ClassVar[str] = ...
    GML_MULTI_GEOMETRY: typing.ClassVar[str] = ...
    GML_MULTI_POINT: typing.ClassVar[str] = ...
    GML_MULTI_LINESTRING: typing.ClassVar[str] = ...
    GML_MULTI_POLYGON: typing.ClassVar[str] = ...
    GML_COORDINATES: typing.ClassVar[str] = ...
    GML_COORD: typing.ClassVar[str] = ...
    GML_COORD_X: typing.ClassVar[str] = ...
    GML_COORD_Y: typing.ClassVar[str] = ...
    GML_COORD_Z: typing.ClassVar[str] = ...
    def __init__(self): ...

class GMLHandler(org.xml.sax.helpers.DefaultHandler):
    def __init__(self, geometryFactory: org.locationtech.jts.geom.GeometryFactory, errorHandler: org.xml.sax.ErrorHandler): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def error(self, sAXParseException: org.xml.sax.SAXParseException) -> None: ...
    def fatalError(self, sAXParseException: org.xml.sax.SAXParseException) -> None: ...
    def getGeometry(self) -> org.locationtech.jts.geom.Geometry: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def isGeometryComplete(self) -> bool: ...
    def setDocumentLocator(self, locator: org.xml.sax.Locator) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...
    def warning(self, sAXParseException: org.xml.sax.SAXParseException) -> None: ...

class GMLReader:
    def __init__(self): ...
    @typing.overload
    def read(self, reader: java.io.Reader, geometryFactory: org.locationtech.jts.geom.GeometryFactory) -> org.locationtech.jts.geom.Geometry: ...
    @typing.overload
    def read(self, string: str, geometryFactory: org.locationtech.jts.geom.GeometryFactory) -> org.locationtech.jts.geom.Geometry: ...

class GMLWriter:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool): ...
    def setCustomElements(self, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def setMaxCoordinatesPerLine(self, int: int) -> None: ...
    def setNamespace(self, boolean: bool) -> None: ...
    def setPrefix(self, string: str) -> None: ...
    def setSrsName(self, string: str) -> None: ...
    def setStartingIndentIndex(self, int: int) -> None: ...
    @typing.overload
    def write(self, geometry: org.locationtech.jts.geom.Geometry) -> str: ...
    @typing.overload
    def write(self, geometry: org.locationtech.jts.geom.Geometry, writer: java.io.Writer) -> None: ...

class GeometryStrategies:
    def __init__(self): ...
    @staticmethod
    def findStrategy(string: str, string2: str) -> 'GeometryStrategies.ParseStrategy': ...
    class ParseStrategy: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.io.gml2")``.

    GMLConstants: typing.Type[GMLConstants]
    GMLHandler: typing.Type[GMLHandler]
    GMLReader: typing.Type[GMLReader]
    GMLWriter: typing.Type[GMLWriter]
    GeometryStrategies: typing.Type[GeometryStrategies]
