
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import org.locationtech.jts.geom
import typing



class EdgeGraph:
    def __init__(self): ...
    def addEdge(self, coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate) -> 'HalfEdge': ...
    def findEdge(self, coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate) -> 'HalfEdge': ...
    def getVertexEdges(self) -> java.util.Collection: ...
    @staticmethod
    def isValidEdge(coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate) -> bool: ...

class EdgeGraphBuilder:
    def __init__(self): ...
    @typing.overload
    def add(self, collection: typing.Union[java.util.Collection, typing.Sequence, typing.Set]) -> None: ...
    @typing.overload
    def add(self, geometry: org.locationtech.jts.geom.Geometry) -> None: ...
    @staticmethod
    def build(collection: typing.Union[java.util.Collection, typing.Sequence, typing.Set]) -> EdgeGraph: ...
    def getGraph(self) -> EdgeGraph: ...

class HalfEdge:
    def __init__(self, coordinate: org.locationtech.jts.geom.Coordinate): ...
    def compareAngularDirection(self, halfEdge: 'HalfEdge') -> int: ...
    def compareTo(self, object: typing.Any) -> int: ...
    @staticmethod
    def create(coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate) -> 'HalfEdge': ...
    def degree(self) -> int: ...
    def dest(self) -> org.locationtech.jts.geom.Coordinate: ...
    @typing.overload
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def equals(self, coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate) -> bool: ...
    def find(self, coordinate: org.locationtech.jts.geom.Coordinate) -> 'HalfEdge': ...
    def insert(self, halfEdge: 'HalfEdge') -> None: ...
    def isEdgesSorted(self) -> bool: ...
    def link(self, halfEdge: 'HalfEdge') -> None: ...
    def next(self) -> 'HalfEdge': ...
    def oNext(self) -> 'HalfEdge': ...
    def orig(self) -> org.locationtech.jts.geom.Coordinate: ...
    def prev(self) -> 'HalfEdge': ...
    def prevNode(self) -> 'HalfEdge': ...
    def sym(self) -> 'HalfEdge': ...
    def toString(self) -> str: ...
    def toStringNode(self) -> str: ...

class MarkHalfEdge(HalfEdge):
    def __init__(self, coordinate: org.locationtech.jts.geom.Coordinate): ...
    @typing.overload
    def isMarked(self) -> bool: ...
    @typing.overload
    @staticmethod
    def isMarked(halfEdge: HalfEdge) -> bool: ...
    @typing.overload
    @staticmethod
    def mark(halfEdge: HalfEdge) -> None: ...
    @typing.overload
    def mark(self) -> None: ...
    @staticmethod
    def markBoth(halfEdge: HalfEdge) -> None: ...
    @typing.overload
    @staticmethod
    def setMark(halfEdge: HalfEdge, boolean: bool) -> None: ...
    @typing.overload
    def setMark(self, boolean: bool) -> None: ...
    @staticmethod
    def setMarkBoth(halfEdge: HalfEdge, boolean: bool) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.edgegraph")``.

    EdgeGraph: typing.Type[EdgeGraph]
    EdgeGraphBuilder: typing.Type[EdgeGraphBuilder]
    HalfEdge: typing.Type[HalfEdge]
    MarkHalfEdge: typing.Type[MarkHalfEdge]
