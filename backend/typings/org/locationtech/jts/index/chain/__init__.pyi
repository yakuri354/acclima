
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import jpype
import org.locationtech.jts.geom
import typing



class MonotoneChain:
    def __init__(self, coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], int: int, int2: int, object: typing.Any): ...
    @typing.overload
    def computeOverlaps(self, monotoneChain: 'MonotoneChain', double: float, monotoneChainOverlapAction: 'MonotoneChainOverlapAction') -> None: ...
    @typing.overload
    def computeOverlaps(self, monotoneChain: 'MonotoneChain', monotoneChainOverlapAction: 'MonotoneChainOverlapAction') -> None: ...
    def getContext(self) -> typing.Any: ...
    def getCoordinates(self) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...
    def getEndIndex(self) -> int: ...
    @typing.overload
    def getEnvelope(self) -> org.locationtech.jts.geom.Envelope: ...
    @typing.overload
    def getEnvelope(self, double: float) -> org.locationtech.jts.geom.Envelope: ...
    def getId(self) -> int: ...
    def getLineSegment(self, int: int, lineSegment: org.locationtech.jts.geom.LineSegment) -> None: ...
    def getStartIndex(self) -> int: ...
    def select(self, envelope: org.locationtech.jts.geom.Envelope, monotoneChainSelectAction: 'MonotoneChainSelectAction') -> None: ...
    def setId(self, int: int) -> None: ...
    def setOverlapDistance(self, double: float) -> None: ...

class MonotoneChainBuilder:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def getChains(coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray]) -> java.util.List: ...
    @typing.overload
    @staticmethod
    def getChains(coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray], object: typing.Any) -> java.util.List: ...

class MonotoneChainOverlapAction:
    def __init__(self): ...
    @typing.overload
    def overlap(self, lineSegment: org.locationtech.jts.geom.LineSegment, lineSegment2: org.locationtech.jts.geom.LineSegment) -> None: ...
    @typing.overload
    def overlap(self, monotoneChain: MonotoneChain, int: int, monotoneChain2: MonotoneChain, int2: int) -> None: ...

class MonotoneChainSelectAction:
    def __init__(self): ...
    @typing.overload
    def select(self, lineSegment: org.locationtech.jts.geom.LineSegment) -> None: ...
    @typing.overload
    def select(self, monotoneChain: MonotoneChain, int: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.index.chain")``.

    MonotoneChain: typing.Type[MonotoneChain]
    MonotoneChainBuilder: typing.Type[MonotoneChainBuilder]
    MonotoneChainOverlapAction: typing.Type[MonotoneChainOverlapAction]
    MonotoneChainSelectAction: typing.Type[MonotoneChainSelectAction]
