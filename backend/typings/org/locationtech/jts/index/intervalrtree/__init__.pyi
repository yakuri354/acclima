
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import org.locationtech.jts.index
import typing



class IntervalRTreeNode:
    def __init__(self): ...
    def getMax(self) -> float: ...
    def getMin(self) -> float: ...
    def query(self, double: float, double2: float, itemVisitor: org.locationtech.jts.index.ItemVisitor) -> None: ...
    def toString(self) -> str: ...
    class NodeComparator(java.util.Comparator):
        def __init__(self): ...
        def compare(self, object: typing.Any, object2: typing.Any) -> int: ...

class SortedPackedIntervalRTree:
    def __init__(self): ...
    def insert(self, double: float, double2: float, object: typing.Any) -> None: ...
    def query(self, double: float, double2: float, itemVisitor: org.locationtech.jts.index.ItemVisitor) -> None: ...

class IntervalRTreeBranchNode(IntervalRTreeNode):
    def __init__(self, intervalRTreeNode: IntervalRTreeNode, intervalRTreeNode2: IntervalRTreeNode): ...
    def query(self, double: float, double2: float, itemVisitor: org.locationtech.jts.index.ItemVisitor) -> None: ...

class IntervalRTreeLeafNode(IntervalRTreeNode):
    def __init__(self, double: float, double2: float, object: typing.Any): ...
    def query(self, double: float, double2: float, itemVisitor: org.locationtech.jts.index.ItemVisitor) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.index.intervalrtree")``.

    IntervalRTreeBranchNode: typing.Type[IntervalRTreeBranchNode]
    IntervalRTreeLeafNode: typing.Type[IntervalRTreeLeafNode]
    IntervalRTreeNode: typing.Type[IntervalRTreeNode]
    SortedPackedIntervalRTree: typing.Type[SortedPackedIntervalRTree]
