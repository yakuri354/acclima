
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import org.locationtech.jts.geom
import org.locationtech.jts.index
import typing



class HPRtree(org.locationtech.jts.index.SpatialIndex):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    def build(self) -> None: ...
    def getBounds(self) -> typing.MutableSequence[org.locationtech.jts.geom.Envelope]: ...
    def insert(self, envelope: org.locationtech.jts.geom.Envelope, object: typing.Any) -> None: ...
    @typing.overload
    def query(self, envelope: org.locationtech.jts.geom.Envelope) -> java.util.List: ...
    @typing.overload
    def query(self, envelope: org.locationtech.jts.geom.Envelope, itemVisitor: org.locationtech.jts.index.ItemVisitor) -> None: ...
    def remove(self, envelope: org.locationtech.jts.geom.Envelope, object: typing.Any) -> bool: ...
    def size(self) -> int: ...

class HilbertEncoder:
    def __init__(self, int: int, envelope: org.locationtech.jts.geom.Envelope): ...
    def encode(self, envelope: org.locationtech.jts.geom.Envelope) -> int: ...

class Item:
    def __init__(self, envelope: org.locationtech.jts.geom.Envelope, object: typing.Any): ...
    def getEnvelope(self) -> org.locationtech.jts.geom.Envelope: ...
    def getItem(self) -> typing.Any: ...
    def toString(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.index.hprtree")``.

    HPRtree: typing.Type[HPRtree]
    HilbertEncoder: typing.Type[HilbertEncoder]
    Item: typing.Type[Item]
