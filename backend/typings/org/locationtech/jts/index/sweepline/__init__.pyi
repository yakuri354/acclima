
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import typing



class SweepLineEvent(java.lang.Comparable):
    INSERT: typing.ClassVar[int] = ...
    DELETE: typing.ClassVar[int] = ...
    def __init__(self, double: float, sweepLineEvent: 'SweepLineEvent', sweepLineInterval: 'SweepLineInterval'): ...
    def compareTo(self, object: typing.Any) -> int: ...
    def getDeleteEventIndex(self) -> int: ...
    def getInsertEvent(self) -> 'SweepLineEvent': ...
    def isDelete(self) -> bool: ...
    def isInsert(self) -> bool: ...
    def setDeleteEventIndex(self, int: int) -> None: ...

class SweepLineIndex:
    def __init__(self): ...
    def add(self, sweepLineInterval: 'SweepLineInterval') -> None: ...
    def computeOverlaps(self, sweepLineOverlapAction: 'SweepLineOverlapAction') -> None: ...

class SweepLineInterval:
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    @typing.overload
    def __init__(self, double: float, double2: float, object: typing.Any): ...
    def getItem(self) -> typing.Any: ...
    def getMax(self) -> float: ...
    def getMin(self) -> float: ...

class SweepLineOverlapAction:
    def overlap(self, sweepLineInterval: SweepLineInterval, sweepLineInterval2: SweepLineInterval) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.index.sweepline")``.

    SweepLineEvent: typing.Type[SweepLineEvent]
    SweepLineIndex: typing.Type[SweepLineIndex]
    SweepLineInterval: typing.Type[SweepLineInterval]
    SweepLineOverlapAction: typing.Type[SweepLineOverlapAction]
