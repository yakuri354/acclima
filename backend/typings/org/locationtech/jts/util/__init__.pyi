
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.awt
import java.lang
import java.util
import jpype
import org.locationtech.jts.geom
import typing



class Assert:
    def __init__(self): ...
    @typing.overload
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    @staticmethod
    def equals(object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    @staticmethod
    def equals(object: typing.Any, object2: typing.Any, string: str) -> None: ...
    @typing.overload
    @staticmethod
    def isTrue(boolean: bool) -> None: ...
    @typing.overload
    @staticmethod
    def isTrue(boolean: bool, string: str) -> None: ...
    @typing.overload
    @staticmethod
    def shouldNeverReachHere() -> None: ...
    @typing.overload
    @staticmethod
    def shouldNeverReachHere(string: str) -> None: ...

class AssertionFailedException(java.lang.RuntimeException):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...

class CollectionUtil:
    def __init__(self): ...
    @staticmethod
    def apply(collection: typing.Union[java.util.Collection, typing.Sequence, typing.Set], function: 'CollectionUtil.Function') -> None: ...
    @staticmethod
    def select(collection: typing.Union[java.util.Collection, typing.Sequence, typing.Set], function: 'CollectionUtil.Function') -> java.util.List: ...
    @staticmethod
    def transform(collection: typing.Union[java.util.Collection, typing.Sequence, typing.Set], function: 'CollectionUtil.Function') -> java.util.List: ...
    class Function:
        def execute(self, object: typing.Any) -> typing.Any: ...

class CoordinateArrayFilter(org.locationtech.jts.geom.CoordinateFilter):
    def __init__(self, int: int): ...
    def filter(self, coordinate: org.locationtech.jts.geom.Coordinate) -> None: ...
    def getCoordinates(self) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...

class CoordinateCountFilter(org.locationtech.jts.geom.CoordinateFilter):
    def __init__(self): ...
    def filter(self, coordinate: org.locationtech.jts.geom.Coordinate) -> None: ...
    def getCount(self) -> int: ...

class Debug:
    DEBUG_PROPERTY_NAME: typing.ClassVar[str] = ...
    DEBUG_PROPERTY_VALUE_ON: typing.ClassVar[str] = ...
    DEBUG_PROPERTY_VALUE_TRUE: typing.ClassVar[str] = ...
    @staticmethod
    def addWatch(object: typing.Any) -> None: ...
    @staticmethod
    def breakIf(boolean: bool) -> None: ...
    @typing.overload
    @staticmethod
    def breakIfEqual(object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    @staticmethod
    def breakIfEqual(coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate, double: float) -> None: ...
    @typing.overload
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    @staticmethod
    def equals(coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate, double: float) -> bool: ...
    @staticmethod
    def hasSegment(geometry: org.locationtech.jts.geom.Geometry, coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate) -> bool: ...
    @typing.overload
    def instancePrint(self, object: typing.Any) -> None: ...
    @typing.overload
    def instancePrint(self, iterator: java.util.Iterator) -> None: ...
    def instancePrintIfWatch(self, object: typing.Any) -> None: ...
    def instancePrintObject(self, object: typing.Any) -> None: ...
    def instancePrintWatch(self) -> None: ...
    @staticmethod
    def isDebugging() -> bool: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    @staticmethod
    def printIfWatch(object: typing.Any) -> None: ...
    @staticmethod
    def printTime(string: str) -> None: ...
    @staticmethod
    def printWatch() -> None: ...
    @typing.overload
    @staticmethod
    def print_(boolean: bool, object: typing.Any) -> None: ...
    @typing.overload
    @staticmethod
    def print_(object: typing.Any) -> None: ...
    @typing.overload
    @staticmethod
    def print_(string: str) -> None: ...
    @typing.overload
    @staticmethod
    def println(object: typing.Any) -> None: ...
    @typing.overload
    def println(self) -> None: ...
    @staticmethod
    def resetTime() -> None: ...
    @typing.overload
    @staticmethod
    def toLine(coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate) -> org.locationtech.jts.geom.LineString: ...
    @typing.overload
    @staticmethod
    def toLine(coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate, coordinate3: org.locationtech.jts.geom.Coordinate) -> org.locationtech.jts.geom.LineString: ...
    @typing.overload
    @staticmethod
    def toLine(coordinate: org.locationtech.jts.geom.Coordinate, coordinate2: org.locationtech.jts.geom.Coordinate, coordinate3: org.locationtech.jts.geom.Coordinate, coordinate4: org.locationtech.jts.geom.Coordinate) -> org.locationtech.jts.geom.LineString: ...

class GeometricShapeFactory:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, geometryFactory: org.locationtech.jts.geom.GeometryFactory): ...
    def createArc(self, double: float, double2: float) -> org.locationtech.jts.geom.LineString: ...
    def createArcPolygon(self, double: float, double2: float) -> org.locationtech.jts.geom.Polygon: ...
    def createCircle(self) -> org.locationtech.jts.geom.Polygon: ...
    def createEllipse(self) -> org.locationtech.jts.geom.Polygon: ...
    def createRectangle(self) -> org.locationtech.jts.geom.Polygon: ...
    def createSquircle(self) -> org.locationtech.jts.geom.Polygon: ...
    def createSupercircle(self, double: float) -> org.locationtech.jts.geom.Polygon: ...
    def setBase(self, coordinate: org.locationtech.jts.geom.Coordinate) -> None: ...
    def setCentre(self, coordinate: org.locationtech.jts.geom.Coordinate) -> None: ...
    def setEnvelope(self, envelope: org.locationtech.jts.geom.Envelope) -> None: ...
    def setHeight(self, double: float) -> None: ...
    def setNumPoints(self, int: int) -> None: ...
    def setRotation(self, double: float) -> None: ...
    def setSize(self, double: float) -> None: ...
    def setWidth(self, double: float) -> None: ...

class IntArrayList:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    def add(self, int: int) -> None: ...
    def addAll(self, intArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    def ensureCapacity(self, int: int) -> None: ...
    def size(self) -> int: ...
    def toArray(self) -> typing.MutableSequence[int]: ...

class Memory:
    KB: typing.ClassVar[float] = ...
    MB: typing.ClassVar[float] = ...
    GB: typing.ClassVar[float] = ...
    def __init__(self): ...
    @staticmethod
    def allString() -> str: ...
    @staticmethod
    def format(long: int) -> str: ...
    @staticmethod
    def free() -> int: ...
    @staticmethod
    def freeString() -> str: ...
    @staticmethod
    def round(double: float) -> float: ...
    @staticmethod
    def total() -> int: ...
    @staticmethod
    def totalString() -> str: ...
    @staticmethod
    def used() -> int: ...
    @staticmethod
    def usedString() -> str: ...
    @staticmethod
    def usedTotalString() -> str: ...

class NumberUtil:
    def __init__(self): ...
    @staticmethod
    def equalsWithTolerance(double: float, double2: float, double3: float) -> bool: ...

class ObjectCounter:
    def __init__(self): ...
    def add(self, object: typing.Any) -> None: ...
    def count(self, object: typing.Any) -> int: ...

class PriorityQueue:
    def __init__(self): ...
    def add(self, comparable: java.lang.Comparable) -> None: ...
    def clear(self) -> None: ...
    def isEmpty(self) -> bool: ...
    def peek(self) -> typing.Any: ...
    def poll(self) -> typing.Any: ...
    def size(self) -> int: ...

class Stopwatch:
    def __init__(self): ...
    def getTime(self) -> int: ...
    @typing.overload
    def getTimeString(self) -> str: ...
    @typing.overload
    @staticmethod
    def getTimeString(long: int) -> str: ...
    def reset(self) -> None: ...
    def split(self) -> int: ...
    def start(self) -> None: ...
    def stop(self) -> int: ...

class StringUtil:
    NEWLINE: typing.ClassVar[str] = ...
    def __init__(self): ...
    @staticmethod
    def chars(char: str, int: int) -> str: ...
    @typing.overload
    @staticmethod
    def getStackTrace(throwable: java.lang.Throwable) -> str: ...
    @typing.overload
    @staticmethod
    def getStackTrace(throwable: java.lang.Throwable, int: int) -> str: ...
    @staticmethod
    def spaces(int: int) -> str: ...
    @staticmethod
    def split(string: str, string2: str) -> typing.MutableSequence[str]: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    @staticmethod
    def toString(double: float) -> str: ...

class TestBuilderProxy:
    def __init__(self): ...
    @staticmethod
    def isActive() -> bool: ...
    @typing.overload
    @staticmethod
    def showIndicator(geometry: org.locationtech.jts.geom.Geometry) -> None: ...
    @typing.overload
    @staticmethod
    def showIndicator(geometry: org.locationtech.jts.geom.Geometry, color: java.awt.Color) -> None: ...

class UniqueCoordinateArrayFilter(org.locationtech.jts.geom.CoordinateFilter):
    def __init__(self): ...
    def filter(self, coordinate: org.locationtech.jts.geom.Coordinate) -> None: ...
    @staticmethod
    def filterCoordinates(coordinateArray: typing.Union[typing.List[org.locationtech.jts.geom.Coordinate], jpype.JArray]) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...
    def getCoordinates(self) -> typing.MutableSequence[org.locationtech.jts.geom.Coordinate]: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.util")``.

    Assert: typing.Type[Assert]
    AssertionFailedException: typing.Type[AssertionFailedException]
    CollectionUtil: typing.Type[CollectionUtil]
    CoordinateArrayFilter: typing.Type[CoordinateArrayFilter]
    CoordinateCountFilter: typing.Type[CoordinateCountFilter]
    Debug: typing.Type[Debug]
    GeometricShapeFactory: typing.Type[GeometricShapeFactory]
    IntArrayList: typing.Type[IntArrayList]
    Memory: typing.Type[Memory]
    NumberUtil: typing.Type[NumberUtil]
    ObjectCounter: typing.Type[ObjectCounter]
    PriorityQueue: typing.Type[PriorityQueue]
    Stopwatch: typing.Type[Stopwatch]
    StringUtil: typing.Type[StringUtil]
    TestBuilderProxy: typing.Type[TestBuilderProxy]
    UniqueCoordinateArrayFilter: typing.Type[UniqueCoordinateArrayFilter]
