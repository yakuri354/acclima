
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import org.locationtech.jts.geom
import org.locationtech.jts.planargraph.algorithm
import typing



class DirectedEdgeStar:
    def __init__(self): ...
    def add(self, directedEdge: 'DirectedEdge') -> None: ...
    def getCoordinate(self) -> org.locationtech.jts.geom.Coordinate: ...
    def getDegree(self) -> int: ...
    def getEdges(self) -> java.util.List['DirectedEdge']: ...
    @typing.overload
    def getIndex(self, int: int) -> int: ...
    @typing.overload
    def getIndex(self, directedEdge: 'DirectedEdge') -> int: ...
    @typing.overload
    def getIndex(self, edge: 'Edge') -> int: ...
    def getNextCWEdge(self, directedEdge: 'DirectedEdge') -> 'DirectedEdge': ...
    def getNextEdge(self, directedEdge: 'DirectedEdge') -> 'DirectedEdge': ...
    def iterator(self) -> java.util.Iterator['DirectedEdge']: ...
    def remove(self, directedEdge: 'DirectedEdge') -> None: ...

class GraphComponent:
    def __init__(self): ...
    @staticmethod
    def getComponentWithVisitedState(iterator: java.util.Iterator, boolean: bool) -> 'GraphComponent': ...
    def getContext(self) -> typing.Any: ...
    def getData(self) -> typing.Any: ...
    def isMarked(self) -> bool: ...
    def isRemoved(self) -> bool: ...
    def isVisited(self) -> bool: ...
    def setContext(self, object: typing.Any) -> None: ...
    def setData(self, object: typing.Any) -> None: ...
    @typing.overload
    @staticmethod
    def setMarked(iterator: java.util.Iterator, boolean: bool) -> None: ...
    @typing.overload
    def setMarked(self, boolean: bool) -> None: ...
    @typing.overload
    @staticmethod
    def setVisited(iterator: java.util.Iterator, boolean: bool) -> None: ...
    @typing.overload
    def setVisited(self, boolean: bool) -> None: ...

class NodeMap:
    def __init__(self): ...
    def add(self, node: 'Node') -> 'Node': ...
    def find(self, coordinate: org.locationtech.jts.geom.Coordinate) -> 'Node': ...
    def iterator(self) -> java.util.Iterator: ...
    def remove(self, coordinate: org.locationtech.jts.geom.Coordinate) -> 'Node': ...
    def values(self) -> java.util.Collection: ...

class PlanarGraph:
    def __init__(self): ...
    @typing.overload
    def contains(self, directedEdge: 'DirectedEdge') -> bool: ...
    @typing.overload
    def contains(self, edge: 'Edge') -> bool: ...
    def dirEdgeIterator(self) -> java.util.Iterator: ...
    def edgeIterator(self) -> java.util.Iterator: ...
    def findNode(self, coordinate: org.locationtech.jts.geom.Coordinate) -> 'Node': ...
    def findNodesOfDegree(self, int: int) -> java.util.List: ...
    def getEdges(self) -> java.util.Collection: ...
    def getNodes(self) -> java.util.Collection: ...
    def nodeIterator(self) -> java.util.Iterator: ...
    @typing.overload
    def remove(self, directedEdge: 'DirectedEdge') -> None: ...
    @typing.overload
    def remove(self, edge: 'Edge') -> None: ...
    @typing.overload
    def remove(self, node: 'Node') -> None: ...

class Subgraph:
    def __init__(self, planarGraph: PlanarGraph): ...
    def add(self, edge: 'Edge') -> None: ...
    def contains(self, edge: 'Edge') -> bool: ...
    def dirEdgeIterator(self) -> java.util.Iterator: ...
    def edgeIterator(self) -> java.util.Iterator: ...
    def getParent(self) -> PlanarGraph: ...
    def nodeIterator(self) -> java.util.Iterator: ...

class DirectedEdge(GraphComponent, java.lang.Comparable):
    def __init__(self, node: 'Node', node2: 'Node', coordinate: org.locationtech.jts.geom.Coordinate, boolean: bool): ...
    def compareDirection(self, directedEdge: 'DirectedEdge') -> int: ...
    def compareTo(self, object: typing.Any) -> int: ...
    def getAngle(self) -> float: ...
    def getCoordinate(self) -> org.locationtech.jts.geom.Coordinate: ...
    def getDirectionPt(self) -> org.locationtech.jts.geom.Coordinate: ...
    def getEdge(self) -> 'Edge': ...
    def getEdgeDirection(self) -> bool: ...
    def getFromNode(self) -> 'Node': ...
    def getQuadrant(self) -> int: ...
    def getSym(self) -> 'DirectedEdge': ...
    def getToNode(self) -> 'Node': ...
    def isRemoved(self) -> bool: ...
    def print_(self, printStream: java.io.PrintStream) -> None: ...
    def setEdge(self, edge: 'Edge') -> None: ...
    def setSym(self, directedEdge: 'DirectedEdge') -> None: ...
    @staticmethod
    def toEdges(collection: typing.Union[java.util.Collection, typing.Sequence, typing.Set]) -> java.util.List: ...

class Edge(GraphComponent):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, directedEdge: DirectedEdge, directedEdge2: DirectedEdge): ...
    @typing.overload
    def getDirEdge(self, int: int) -> DirectedEdge: ...
    @typing.overload
    def getDirEdge(self, node: 'Node') -> DirectedEdge: ...
    def getOppositeNode(self, node: 'Node') -> 'Node': ...
    def isRemoved(self) -> bool: ...
    def setDirectedEdges(self, directedEdge: DirectedEdge, directedEdge2: DirectedEdge) -> None: ...

class Node(GraphComponent):
    @typing.overload
    def __init__(self, coordinate: org.locationtech.jts.geom.Coordinate): ...
    @typing.overload
    def __init__(self, coordinate: org.locationtech.jts.geom.Coordinate, directedEdgeStar: DirectedEdgeStar): ...
    def addOutEdge(self, directedEdge: DirectedEdge) -> None: ...
    def getCoordinate(self) -> org.locationtech.jts.geom.Coordinate: ...
    def getDegree(self) -> int: ...
    @staticmethod
    def getEdgesBetween(node: 'Node', node2: 'Node') -> java.util.Collection: ...
    def getIndex(self, edge: Edge) -> int: ...
    def getOutEdges(self) -> DirectedEdgeStar: ...
    def isRemoved(self) -> bool: ...
    def remove(self, directedEdge: DirectedEdge) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.locationtech.jts.planargraph")``.

    DirectedEdge: typing.Type[DirectedEdge]
    DirectedEdgeStar: typing.Type[DirectedEdgeStar]
    Edge: typing.Type[Edge]
    GraphComponent: typing.Type[GraphComponent]
    Node: typing.Type[Node]
    NodeMap: typing.Type[NodeMap]
    PlanarGraph: typing.Type[PlanarGraph]
    Subgraph: typing.Type[Subgraph]
    algorithm: org.locationtech.jts.planargraph.algorithm.__module_protocol__
