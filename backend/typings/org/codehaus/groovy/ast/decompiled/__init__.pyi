
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovyjarjarasm.asm
import java.net
import java.util
import jpype
import org
import org.codehaus.groovy.ast
import org.codehaus.groovy.control
import typing



class AsmDecompiler:
    def __init__(self): ...
    @staticmethod
    def parseClass(uRL: java.net.URL) -> 'ClassStub': ...

class AsmReferenceResolver:
    def __init__(self, classNodeResolver: org.codehaus.groovy.control.ClassNodeResolver, compilationUnit: org.codehaus.groovy.control.CompilationUnit): ...
    def resolveClass(self, string: str) -> org.codehaus.groovy.ast.ClassNode: ...
    def resolveClassNullable(self, string: str) -> org.codehaus.groovy.ast.ClassNode: ...
    def resolveJvmClass(self, string: str) -> typing.Type: ...
    def resolveType(self, type: groovyjarjarasm.asm.Type) -> org.codehaus.groovy.ast.ClassNode: ...

class DecompiledClassNode(org.codehaus.groovy.ast.ClassNode):
    def __init__(self, classStub: 'ClassStub', asmReferenceResolver: AsmReferenceResolver): ...
    @typing.overload
    def getAnnotations(self) -> java.util.List[org.codehaus.groovy.ast.AnnotationNode]: ...
    @typing.overload
    def getAnnotations(self, classNode: org.codehaus.groovy.ast.ClassNode) -> java.util.List[org.codehaus.groovy.ast.AnnotationNode]: ...
    def getCompilationTimeStamp(self) -> int: ...
    def getDeclaredConstructors(self) -> java.util.List[org.codehaus.groovy.ast.ConstructorNode]: ...
    def getDeclaredField(self, string: str) -> org.codehaus.groovy.ast.FieldNode: ...
    def getDeclaredMethods(self, string: str) -> java.util.List[org.codehaus.groovy.ast.MethodNode]: ...
    def getFields(self) -> java.util.List[org.codehaus.groovy.ast.FieldNode]: ...
    def getGenericsTypes(self) -> typing.MutableSequence[org.codehaus.groovy.ast.GenericsType]: ...
    def getInterfaces(self) -> typing.MutableSequence[org.codehaus.groovy.ast.ClassNode]: ...
    @typing.overload
    def getMethods(self, string: str) -> java.util.List[org.codehaus.groovy.ast.MethodNode]: ...
    @typing.overload
    def getMethods(self) -> java.util.List[org.codehaus.groovy.ast.MethodNode]: ...
    def getTypeClass(self) -> typing.Type: ...
    @typing.overload
    def getUnresolvedInterfaces(self) -> typing.MutableSequence[org.codehaus.groovy.ast.ClassNode]: ...
    @typing.overload
    def getUnresolvedInterfaces(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.ast.ClassNode]: ...
    @typing.overload
    def getUnresolvedSuperClass(self) -> org.codehaus.groovy.ast.ClassNode: ...
    @typing.overload
    def getUnresolvedSuperClass(self, boolean: bool) -> org.codehaus.groovy.ast.ClassNode: ...
    def isResolved(self) -> bool: ...
    def isUsingGenerics(self) -> bool: ...
    def setGenericsPlaceHolder(self, boolean: bool) -> None: ...
    def setName(self, string: str) -> str: ...
    def setRedirect(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def setUsingGenerics(self, boolean: bool) -> None: ...

class ClassStub(org.codehaus.groovy.ast.decompiled.MemberStub):
    def __init__(self, string: str, int: int, string2: str, string3: str, stringArray: typing.Union[typing.List[str], jpype.JArray]): ...

class MemberStub: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.ast.decompiled")``.

    AsmDecompiler: typing.Type[AsmDecompiler]
    AsmReferenceResolver: typing.Type[AsmReferenceResolver]
    ClassStub: typing.Type[ClassStub]
    DecompiledClassNode: typing.Type[DecompiledClassNode]
    MemberStub: typing.Type[MemberStub]
