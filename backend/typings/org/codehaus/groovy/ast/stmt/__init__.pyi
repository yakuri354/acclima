
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import jpype
import org.codehaus.groovy.ast
import org.codehaus.groovy.ast.expr
import typing



class LoopingStatement:
    def getLoopBlock(self) -> 'Statement': ...
    def setLoopBlock(self, statement: 'Statement') -> None: ...

class Statement(org.codehaus.groovy.ast.ASTNode):
    def __init__(self): ...
    def addStatementLabel(self, string: str) -> None: ...
    def getStatementLabel(self) -> str: ...
    def getStatementLabels(self) -> java.util.List[str]: ...
    def isEmpty(self) -> bool: ...
    def setStatementLabel(self, string: str) -> None: ...

class AssertStatement(Statement):
    @typing.overload
    def __init__(self, booleanExpression: org.codehaus.groovy.ast.expr.BooleanExpression): ...
    @typing.overload
    def __init__(self, booleanExpression: org.codehaus.groovy.ast.expr.BooleanExpression, expression: org.codehaus.groovy.ast.expr.Expression): ...
    def getBooleanExpression(self) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    def getMessageExpression(self) -> org.codehaus.groovy.ast.expr.Expression: ...
    def setBooleanExpression(self, booleanExpression: org.codehaus.groovy.ast.expr.BooleanExpression) -> None: ...
    def setMessageExpression(self, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class BlockStatement(Statement):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List[Statement], variableScope: org.codehaus.groovy.ast.VariableScope): ...
    @typing.overload
    def __init__(self, statementArray: typing.Union[typing.List[Statement], jpype.JArray], variableScope: org.codehaus.groovy.ast.VariableScope): ...
    def addStatement(self, statement: Statement) -> None: ...
    def addStatements(self, list: java.util.List[Statement]) -> None: ...
    def getStatements(self) -> java.util.List[Statement]: ...
    def getText(self) -> str: ...
    def getVariableScope(self) -> org.codehaus.groovy.ast.VariableScope: ...
    def isEmpty(self) -> bool: ...
    def setVariableScope(self, variableScope: org.codehaus.groovy.ast.VariableScope) -> None: ...
    def toString(self) -> str: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class BreakStatement(Statement):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    def getLabel(self) -> str: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class CaseStatement(Statement):
    def __init__(self, expression: org.codehaus.groovy.ast.expr.Expression, statement: Statement): ...
    def getCode(self) -> Statement: ...
    def getExpression(self) -> org.codehaus.groovy.ast.expr.Expression: ...
    def setCode(self, statement: Statement) -> None: ...
    def setExpression(self, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...
    def toString(self) -> str: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class CatchStatement(Statement):
    def __init__(self, parameter: org.codehaus.groovy.ast.Parameter, statement: Statement): ...
    def getCode(self) -> Statement: ...
    def getExceptionType(self) -> org.codehaus.groovy.ast.ClassNode: ...
    def getVariable(self) -> org.codehaus.groovy.ast.Parameter: ...
    def setCode(self, statement: Statement) -> None: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class ContinueStatement(Statement):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    def getLabel(self) -> str: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class DoWhileStatement(Statement, LoopingStatement):
    def __init__(self, booleanExpression: org.codehaus.groovy.ast.expr.BooleanExpression, statement: Statement): ...
    def getBooleanExpression(self) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    def getLoopBlock(self) -> Statement: ...
    def setBooleanExpression(self, booleanExpression: org.codehaus.groovy.ast.expr.BooleanExpression) -> None: ...
    def setLoopBlock(self, statement: Statement) -> None: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class EmptyStatement(Statement):
    INSTANCE: typing.ClassVar['EmptyStatement'] = ...
    def __init__(self): ...
    def isEmpty(self) -> bool: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class ExpressionStatement(Statement):
    def __init__(self, expression: org.codehaus.groovy.ast.expr.Expression): ...
    def getExpression(self) -> org.codehaus.groovy.ast.expr.Expression: ...
    def getText(self) -> str: ...
    def setExpression(self, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...
    def toString(self) -> str: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class ForStatement(Statement, LoopingStatement):
    FOR_LOOP_DUMMY: typing.ClassVar[org.codehaus.groovy.ast.Parameter] = ...
    def __init__(self, parameter: org.codehaus.groovy.ast.Parameter, expression: org.codehaus.groovy.ast.expr.Expression, statement: Statement): ...
    def getCollectionExpression(self) -> org.codehaus.groovy.ast.expr.Expression: ...
    def getLoopBlock(self) -> Statement: ...
    def getVariable(self) -> org.codehaus.groovy.ast.Parameter: ...
    def getVariableScope(self) -> org.codehaus.groovy.ast.VariableScope: ...
    def getVariableType(self) -> org.codehaus.groovy.ast.ClassNode: ...
    def setCollectionExpression(self, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...
    def setLoopBlock(self, statement: Statement) -> None: ...
    def setVariableScope(self, variableScope: org.codehaus.groovy.ast.VariableScope) -> None: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class IfStatement(Statement):
    def __init__(self, booleanExpression: org.codehaus.groovy.ast.expr.BooleanExpression, statement: Statement, statement2: Statement): ...
    def getBooleanExpression(self) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    def getElseBlock(self) -> Statement: ...
    def getIfBlock(self) -> Statement: ...
    def setBooleanExpression(self, booleanExpression: org.codehaus.groovy.ast.expr.BooleanExpression) -> None: ...
    def setElseBlock(self, statement: Statement) -> None: ...
    def setIfBlock(self, statement: Statement) -> None: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class ReturnStatement(Statement):
    RETURN_NULL_OR_VOID: typing.ClassVar['ReturnStatement'] = ...
    @typing.overload
    def __init__(self, expression: org.codehaus.groovy.ast.expr.Expression): ...
    @typing.overload
    def __init__(self, expressionStatement: ExpressionStatement): ...
    def getExpression(self) -> org.codehaus.groovy.ast.expr.Expression: ...
    def getText(self) -> str: ...
    def isReturningNullOrVoid(self) -> bool: ...
    def setExpression(self, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...
    def toString(self) -> str: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class SwitchStatement(Statement):
    @typing.overload
    def __init__(self, expression: org.codehaus.groovy.ast.expr.Expression): ...
    @typing.overload
    def __init__(self, expression: org.codehaus.groovy.ast.expr.Expression, list: java.util.List[CaseStatement], statement: Statement): ...
    @typing.overload
    def __init__(self, expression: org.codehaus.groovy.ast.expr.Expression, statement: Statement): ...
    def addCase(self, caseStatement: CaseStatement) -> None: ...
    def getCaseStatement(self, int: int) -> CaseStatement: ...
    def getCaseStatements(self) -> java.util.List[CaseStatement]: ...
    def getDefaultStatement(self) -> Statement: ...
    def getExpression(self) -> org.codehaus.groovy.ast.expr.Expression: ...
    def setDefaultStatement(self, statement: Statement) -> None: ...
    def setExpression(self, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class SynchronizedStatement(Statement):
    def __init__(self, expression: org.codehaus.groovy.ast.expr.Expression, statement: Statement): ...
    def getCode(self) -> Statement: ...
    def getExpression(self) -> org.codehaus.groovy.ast.expr.Expression: ...
    def setCode(self, statement: Statement) -> None: ...
    def setExpression(self, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class ThrowStatement(Statement):
    def __init__(self, expression: org.codehaus.groovy.ast.expr.Expression): ...
    def getExpression(self) -> org.codehaus.groovy.ast.expr.Expression: ...
    def getText(self) -> str: ...
    def setExpression(self, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class TryCatchStatement(Statement):
    def __init__(self, statement: Statement, statement2: Statement): ...
    def addCatch(self, catchStatement: CatchStatement) -> None: ...
    def getCatchStatement(self, int: int) -> CatchStatement: ...
    def getCatchStatements(self) -> java.util.List[CatchStatement]: ...
    def getFinallyStatement(self) -> Statement: ...
    def getTryStatement(self) -> Statement: ...
    def setCatchStatement(self, int: int, catchStatement: CatchStatement) -> None: ...
    def setFinallyStatement(self, statement: Statement) -> None: ...
    def setTryStatement(self, statement: Statement) -> None: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class WhileStatement(Statement, LoopingStatement):
    def __init__(self, booleanExpression: org.codehaus.groovy.ast.expr.BooleanExpression, statement: Statement): ...
    def getBooleanExpression(self) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    def getLoopBlock(self) -> Statement: ...
    def setBooleanExpression(self, booleanExpression: org.codehaus.groovy.ast.expr.BooleanExpression) -> None: ...
    def setLoopBlock(self, statement: Statement) -> None: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.ast.stmt")``.

    AssertStatement: typing.Type[AssertStatement]
    BlockStatement: typing.Type[BlockStatement]
    BreakStatement: typing.Type[BreakStatement]
    CaseStatement: typing.Type[CaseStatement]
    CatchStatement: typing.Type[CatchStatement]
    ContinueStatement: typing.Type[ContinueStatement]
    DoWhileStatement: typing.Type[DoWhileStatement]
    EmptyStatement: typing.Type[EmptyStatement]
    ExpressionStatement: typing.Type[ExpressionStatement]
    ForStatement: typing.Type[ForStatement]
    IfStatement: typing.Type[IfStatement]
    LoopingStatement: typing.Type[LoopingStatement]
    ReturnStatement: typing.Type[ReturnStatement]
    Statement: typing.Type[Statement]
    SwitchStatement: typing.Type[SwitchStatement]
    SynchronizedStatement: typing.Type[SynchronizedStatement]
    ThrowStatement: typing.Type[ThrowStatement]
    TryCatchStatement: typing.Type[TryCatchStatement]
    WhileStatement: typing.Type[WhileStatement]
