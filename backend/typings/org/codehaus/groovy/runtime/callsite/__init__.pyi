
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import groovyjarjarasm.asm
import java.lang.reflect
import java.util
import jpype
import org
import org.codehaus.groovy.reflection
import typing



class BooleanClosureWrapper:
    def __init__(self, closure: groovy.lang.Closure): ...
    def call(self, *object: typing.Any) -> bool: ...
    _callForMap__K = typing.TypeVar('_callForMap__K')  # <K>
    _callForMap__V = typing.TypeVar('_callForMap__V')  # <V>
    def callForMap(self, entry: java.util.Map.Entry[_callForMap__K, _callForMap__V]) -> bool: ...

class BooleanReturningMethodInvoker:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    def convertToBoolean(self, object: typing.Any) -> bool: ...
    def invoke(self, object: typing.Any, *object2: typing.Any) -> bool: ...

class CallSite:
    @typing.overload
    def call(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    def callGetProperty(self, object: typing.Any) -> typing.Any: ...
    def callGetPropertySafe(self, object: typing.Any) -> typing.Any: ...
    def callGroovyObjectGetProperty(self, object: typing.Any) -> typing.Any: ...
    def callGroovyObjectGetPropertySafe(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    def getArray(self) -> 'CallSiteArray': ...
    def getIndex(self) -> int: ...
    def getName(self) -> str: ...
    def getProperty(self, object: typing.Any) -> typing.Any: ...

class CallSiteArray:
    array: typing.MutableSequence[CallSite] = ...
    NOPARAM: typing.ClassVar[typing.MutableSequence[typing.Any]] = ...
    owner: typing.Type = ...
    def __init__(self, class_: typing.Type, stringArray: typing.Union[typing.List[str], jpype.JArray]): ...
    @staticmethod
    def defaultCall(callSite: CallSite, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @staticmethod
    def defaultCallConstructor(callSite: CallSite, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @staticmethod
    def defaultCallCurrent(callSite: CallSite, groovyObject: groovy.lang.GroovyObject, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @staticmethod
    def defaultCallStatic(callSite: CallSite, class_: typing.Type, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...

class CallSiteAwareMetaMethod(groovy.lang.MetaMethod):
    def __init__(self): ...
    def createPojoCallSite(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray], object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> CallSite: ...

class CallSiteClassLoader(org.codehaus.groovy.reflection.ClassLoaderForClassArtifacts):
    def __init__(self, class_: typing.Type): ...

class CallSiteGenerator:
    @staticmethod
    def compilePogoMethod(cachedMethod: org.codehaus.groovy.reflection.CachedMethod) -> java.lang.reflect.Constructor: ...
    @staticmethod
    def compilePojoMethod(cachedMethod: org.codehaus.groovy.reflection.CachedMethod) -> java.lang.reflect.Constructor: ...
    @staticmethod
    def compileStaticMethod(cachedMethod: org.codehaus.groovy.reflection.CachedMethod) -> java.lang.reflect.Constructor: ...
    @staticmethod
    def genCallWithFixedParams(classWriter: groovyjarjarasm.asm.ClassWriter, string: str, string2: str, cachedMethod: org.codehaus.groovy.reflection.CachedMethod, string3: str) -> None: ...
    @staticmethod
    def genCallXxxWithArray(classWriter: groovyjarjarasm.asm.ClassWriter, string: str, string2: str, cachedMethod: org.codehaus.groovy.reflection.CachedMethod, string3: str) -> None: ...
    @staticmethod
    def genPogoMetaMethodSite(cachedMethod: org.codehaus.groovy.reflection.CachedMethod, classWriter: groovyjarjarasm.asm.ClassWriter, string: str) -> typing.MutableSequence[int]: ...
    @staticmethod
    def genPojoMetaMethodSite(cachedMethod: org.codehaus.groovy.reflection.CachedMethod, classWriter: groovyjarjarasm.asm.ClassWriter, string: str) -> typing.MutableSequence[int]: ...
    @staticmethod
    def genStaticMetaMethodSite(cachedMethod: org.codehaus.groovy.reflection.CachedMethod, classWriter: groovyjarjarasm.asm.ClassWriter, string: str) -> typing.MutableSequence[int]: ...
    @staticmethod
    def isCompilable(cachedMethod: org.codehaus.groovy.reflection.CachedMethod) -> bool: ...

class GroovySunClassLoader(org.codehaus.groovy.reflection.SunClassLoader):
    sunVM: typing.ClassVar[org.codehaus.groovy.reflection.SunClassLoader] = ...

class AbstractCallSite(CallSite):
    @typing.overload
    def __init__(self, callSite: CallSite): ...
    @typing.overload
    def __init__(self, callSiteArray: CallSiteArray, int: int, string: str): ...
    def acceptGetProperty(self, object: typing.Any) -> CallSite: ...
    def acceptGroovyObjectGetProperty(self, object: typing.Any) -> CallSite: ...
    @typing.overload
    def call(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    def callGetProperty(self, object: typing.Any) -> typing.Any: ...
    def callGetPropertySafe(self, object: typing.Any) -> typing.Any: ...
    def callGroovyObjectGetProperty(self, object: typing.Any) -> typing.Any: ...
    def callGroovyObjectGetPropertySafe(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def callSafe(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    def getArray(self) -> CallSiteArray: ...
    def getIndex(self) -> int: ...
    def getName(self) -> str: ...
    def getProperty(self, object: typing.Any) -> typing.Any: ...

class DummyCallSite(AbstractCallSite):
    def __init__(self, callSiteArray: CallSiteArray, int: int, string: str): ...

class GetEffectivePogoFieldSite(AbstractCallSite):
    def __init__(self, callSite: CallSite, metaClass: groovy.lang.MetaClass, cachedField: org.codehaus.groovy.reflection.CachedField): ...
    def acceptGetProperty(self, object: typing.Any) -> CallSite: ...
    def acceptGroovyObjectGetProperty(self, object: typing.Any) -> CallSite: ...
    def callGetProperty(self, object: typing.Any) -> typing.Any: ...
    def callGroovyObjectGetProperty(self, object: typing.Any) -> typing.Any: ...
    def getProperty(self, object: typing.Any) -> typing.Any: ...

class GetEffectivePojoPropertySite(AbstractCallSite):
    def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaProperty: groovy.lang.MetaProperty): ...
    def acceptGetProperty(self, object: typing.Any) -> CallSite: ...
    def getProperty(self, object: typing.Any) -> typing.Any: ...

class MetaClassSite(AbstractCallSite):
    def __init__(self, callSite: CallSite, metaClass: groovy.lang.MetaClass): ...

class NullCallSite(AbstractCallSite):
    def __init__(self, callSite: CallSite): ...
    @typing.overload
    def call(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    def getProperty(self, object: typing.Any) -> typing.Any: ...

class PerInstancePojoMetaClassSite(AbstractCallSite):
    def __init__(self, callSite: CallSite, classInfo: org.codehaus.groovy.reflection.ClassInfo): ...
    @typing.overload
    def call(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...

class PogoGetPropertySite(AbstractCallSite):
    def __init__(self, callSite: CallSite, class_: typing.Type): ...
    def acceptGetProperty(self, object: typing.Any) -> CallSite: ...
    def acceptGroovyObjectGetProperty(self, object: typing.Any) -> CallSite: ...
    def getProperty(self, object: typing.Any) -> typing.Any: ...

class PogoInterceptableSite(AbstractCallSite):
    def __init__(self, callSite: CallSite): ...
    @typing.overload
    def call(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...

class PogoMetaClassGetPropertySite(AbstractCallSite):
    def __init__(self, callSite: CallSite, metaClass: groovy.lang.MetaClass): ...
    def acceptGetProperty(self, object: typing.Any) -> CallSite: ...
    def acceptGroovyObjectGetProperty(self, object: typing.Any) -> CallSite: ...
    def getProperty(self, object: typing.Any) -> typing.Any: ...

class PojoMetaClassGetPropertySite(AbstractCallSite):
    def __init__(self, callSite: CallSite): ...
    def acceptGetProperty(self, object: typing.Any) -> CallSite: ...
    def callGetProperty(self, object: typing.Any) -> typing.Any: ...
    def getProperty(self, object: typing.Any) -> typing.Any: ...

class ConstructorMetaClassSite(MetaClassSite):
    def __init__(self, callSite: CallSite, metaClass: groovy.lang.MetaClass): ...
    @typing.overload
    def callConstructor(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...

class MetaClassConstructorSite(MetaClassSite):
    def __init__(self, callSite: CallSite, metaClass: groovy.lang.MetaClass): ...
    @typing.overload
    def callConstructor(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...

class MetaMethodSite(MetaClassSite):
    def __init__(self, callSite: CallSite, metaClass: groovy.lang.MetaClass, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...

class PogoMetaClassSite(MetaClassSite):
    def __init__(self, callSite: CallSite, metaClass: groovy.lang.MetaClass): ...
    @typing.overload
    def call(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...

class PojoMetaClassSite(MetaClassSite):
    def __init__(self, callSite: CallSite, metaClass: groovy.lang.MetaClass): ...
    @typing.overload
    def call(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...

class StaticMetaClassSite(MetaClassSite):
    def __init__(self, callSite: CallSite, metaClass: groovy.lang.MetaClass): ...
    @typing.overload
    def call(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...

class ConstructorMetaMethodSite(MetaMethodSite):
    def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
    @typing.overload
    def callConstructor(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...

class PlainObjectMetaMethodSite(MetaMethodSite):
    def __init__(self, callSite: CallSite, metaClass: groovy.lang.MetaClass, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...

class ConstructorSite(MetaClassSite):
    def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, cachedConstructor: org.codehaus.groovy.reflection.CachedConstructor, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
    @typing.overload
    def callConstructor(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def callConstructor(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @staticmethod
    def createConstructorSite(callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, cachedConstructor: org.codehaus.groovy.reflection.CachedConstructor, classArray: typing.Union[typing.List[typing.Type], jpype.JArray], objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> 'ConstructorSite': ...
    class ConstructorSiteNoUnwrap(org.codehaus.groovy.runtime.callsite.ConstructorSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, cachedConstructor: org.codehaus.groovy.reflection.CachedConstructor, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        @typing.overload
        def callConstructor(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    class ConstructorSiteNoUnwrapNoCoerce(org.codehaus.groovy.runtime.callsite.ConstructorSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, cachedConstructor: org.codehaus.groovy.reflection.CachedConstructor, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        @typing.overload
        def callConstructor(self, object: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class NoParamSite(org.codehaus.groovy.runtime.callsite.ConstructorSite.ConstructorSiteNoUnwrapNoCoerce):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, cachedConstructor: org.codehaus.groovy.reflection.CachedConstructor, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        @typing.overload
        def callConstructor(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    class NoParamSiteInnerClass(org.codehaus.groovy.runtime.callsite.ConstructorSite.ConstructorSiteNoUnwrapNoCoerce):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, cachedConstructor: org.codehaus.groovy.reflection.CachedConstructor, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        @typing.overload
        def callConstructor(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
        @typing.overload
        def callConstructor(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...

class PogoMetaMethodSite(PlainObjectMetaMethodSite):
    def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
    @typing.overload
    def call(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callCurrent(self, groovyObject: groovy.lang.GroovyObject, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @staticmethod
    def createCachedMethodSite(callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, cachedMethod: org.codehaus.groovy.reflection.CachedMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray], objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> CallSite: ...
    @staticmethod
    def createPogoMetaMethodSite(callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray], objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> CallSite: ...
    def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class PogoCachedMethodSite(org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, cachedMethod: org.codehaus.groovy.reflection.CachedMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class PogoCachedMethodSiteNoUnwrap(org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.PogoCachedMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, cachedMethod: org.codehaus.groovy.reflection.CachedMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class PogoCachedMethodSiteNoUnwrapNoCoerce(org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.PogoCachedMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, cachedMethod: org.codehaus.groovy.reflection.CachedMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class PogoMetaMethodSiteNoUnwrap(org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class PogoMetaMethodSiteNoUnwrapNoCoerce(org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...

class PojoMetaMethodSite(PlainObjectMetaMethodSite):
    def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
    @typing.overload
    def call(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @staticmethod
    def createCachedMethodSite(callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, cachedMethod: org.codehaus.groovy.reflection.CachedMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray], objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> CallSite: ...
    @staticmethod
    def createNonAwareCallSite(callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray], objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> CallSite: ...
    @staticmethod
    def createPojoMetaMethodSite(callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray], object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> CallSite: ...
    def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class PojoCachedMethodSite(org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class PojoCachedMethodSiteNoUnwrap(org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.PojoCachedMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class PojoCachedMethodSiteNoUnwrapNoCoerce(org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.PojoCachedMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class PojoMetaMethodSiteNoUnwrap(org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class PojoMetaMethodSiteNoUnwrapNoCoerce(org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...

class StaticMetaMethodSite(MetaMethodSite):
    def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
    @typing.overload
    def call(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> typing.Any: ...
    @typing.overload
    def call(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any, object3: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> typing.Any: ...
    @typing.overload
    def callStatic(self, class_: typing.Type, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    @staticmethod
    def createStaticMetaMethodSite(callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray], objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> CallSite: ...
    def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class StaticMetaMethodSiteNoUnwrap(org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...
    class StaticMetaMethodSiteNoUnwrapNoCoerce(org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite):
        def __init__(self, callSite: CallSite, metaClassImpl: groovy.lang.MetaClassImpl, metaMethod: groovy.lang.MetaMethod, classArray: typing.Union[typing.List[typing.Type], jpype.JArray]): ...
        def invoke(self, object: typing.Any, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> typing.Any: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.runtime.callsite")``.

    AbstractCallSite: typing.Type[AbstractCallSite]
    BooleanClosureWrapper: typing.Type[BooleanClosureWrapper]
    BooleanReturningMethodInvoker: typing.Type[BooleanReturningMethodInvoker]
    CallSite: typing.Type[CallSite]
    CallSiteArray: typing.Type[CallSiteArray]
    CallSiteAwareMetaMethod: typing.Type[CallSiteAwareMetaMethod]
    CallSiteClassLoader: typing.Type[CallSiteClassLoader]
    CallSiteGenerator: typing.Type[CallSiteGenerator]
    ConstructorMetaClassSite: typing.Type[ConstructorMetaClassSite]
    ConstructorMetaMethodSite: typing.Type[ConstructorMetaMethodSite]
    ConstructorSite: typing.Type[ConstructorSite]
    DummyCallSite: typing.Type[DummyCallSite]
    GetEffectivePogoFieldSite: typing.Type[GetEffectivePogoFieldSite]
    GetEffectivePojoPropertySite: typing.Type[GetEffectivePojoPropertySite]
    GroovySunClassLoader: typing.Type[GroovySunClassLoader]
    MetaClassConstructorSite: typing.Type[MetaClassConstructorSite]
    MetaClassSite: typing.Type[MetaClassSite]
    MetaMethodSite: typing.Type[MetaMethodSite]
    NullCallSite: typing.Type[NullCallSite]
    PerInstancePojoMetaClassSite: typing.Type[PerInstancePojoMetaClassSite]
    PlainObjectMetaMethodSite: typing.Type[PlainObjectMetaMethodSite]
    PogoGetPropertySite: typing.Type[PogoGetPropertySite]
    PogoInterceptableSite: typing.Type[PogoInterceptableSite]
    PogoMetaClassGetPropertySite: typing.Type[PogoMetaClassGetPropertySite]
    PogoMetaClassSite: typing.Type[PogoMetaClassSite]
    PogoMetaMethodSite: typing.Type[PogoMetaMethodSite]
    PojoMetaClassGetPropertySite: typing.Type[PojoMetaClassGetPropertySite]
    PojoMetaClassSite: typing.Type[PojoMetaClassSite]
    PojoMetaMethodSite: typing.Type[PojoMetaMethodSite]
    StaticMetaClassSite: typing.Type[StaticMetaClassSite]
    StaticMetaMethodSite: typing.Type[StaticMetaMethodSite]
