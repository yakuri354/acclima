
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import _jpype
import groovy.lang
import java.lang
import java.math
import java.util
import jpype
import typing



class DefaultTypeTransformation:
    def __init__(self): ...
    _arrayAsCollection_1__T = typing.TypeVar('_arrayAsCollection_1__T')  # <T>
    @typing.overload
    @staticmethod
    def arrayAsCollection(object: typing.Any) -> java.util.Collection: ...
    @typing.overload
    @staticmethod
    def arrayAsCollection(tArray: typing.Union[typing.List[_arrayAsCollection_1__T], jpype.JArray]) -> java.util.Collection[_arrayAsCollection_1__T]: ...
    @staticmethod
    def asArray(object: typing.Any, class_: typing.Type) -> typing.Any: ...
    _asCollection_1__T = typing.TypeVar('_asCollection_1__T')  # <T>
    @typing.overload
    @staticmethod
    def asCollection(object: typing.Any) -> java.util.Collection: ...
    @typing.overload
    @staticmethod
    def asCollection(tArray: typing.Union[typing.List[_asCollection_1__T], jpype.JArray]) -> java.util.Collection[_asCollection_1__T]: ...
    @staticmethod
    def booleanUnbox(object: typing.Any) -> bool: ...
    @typing.overload
    @staticmethod
    def box(boolean: bool) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def box(byte: int) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def box(char: str) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def box(double: float) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def box(float: float) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def box(int: int) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def box(long: int) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def box(short: int) -> typing.Any: ...
    @staticmethod
    def byteUnbox(object: typing.Any) -> int: ...
    @staticmethod
    def castToBoolean(object: typing.Any) -> bool: ...
    @staticmethod
    def castToChar(object: typing.Any) -> str: ...
    @typing.overload
    @staticmethod
    def castToNumber(object: typing.Any) -> java.lang.Number: ...
    @typing.overload
    @staticmethod
    def castToNumber(object: typing.Any, class_: typing.Type) -> java.lang.Number: ...
    @staticmethod
    def castToType(object: typing.Any, class_: typing.Type) -> typing.Any: ...
    @staticmethod
    def castToVargsArray(objectArray: typing.Union[typing.List[typing.Any], jpype.JArray], int: int, class_: typing.Type[typing.Any]) -> typing.Any: ...
    @staticmethod
    def charUnbox(object: typing.Any) -> str: ...
    @staticmethod
    def compareArrayEqual(object: typing.Any, object2: typing.Any) -> bool: ...
    @staticmethod
    def compareEqual(object: typing.Any, object2: typing.Any) -> bool: ...
    @staticmethod
    def compareTo(object: typing.Any, object2: typing.Any) -> int: ...
    @staticmethod
    def convertToBooleanArray(object: typing.Any) -> typing.MutableSequence[bool]: ...
    @staticmethod
    def convertToByteArray(object: typing.Any) -> typing.MutableSequence[int]: ...
    @staticmethod
    def convertToCharArray(object: typing.Any) -> typing.MutableSequence[str]: ...
    @staticmethod
    def convertToDoubleArray(object: typing.Any) -> typing.MutableSequence[float]: ...
    @staticmethod
    def convertToFloatArray(object: typing.Any) -> typing.MutableSequence[float]: ...
    @staticmethod
    def convertToIntArray(object: typing.Any) -> typing.MutableSequence[int]: ...
    @staticmethod
    def convertToLongArray(object: typing.Any) -> typing.MutableSequence[int]: ...
    @staticmethod
    def convertToPrimitiveArray(object: typing.Any, class_: typing.Type) -> typing.Any: ...
    @staticmethod
    def convertToShortArray(object: typing.Any) -> typing.MutableSequence[int]: ...
    @staticmethod
    def doubleUnbox(object: typing.Any) -> float: ...
    @staticmethod
    def floatUnbox(object: typing.Any) -> float: ...
    @staticmethod
    def getCharFromSizeOneString(object: typing.Any) -> str: ...
    @staticmethod
    def intUnbox(object: typing.Any) -> int: ...
    @staticmethod
    def isEnumSubclass(object: typing.Any) -> bool: ...
    @staticmethod
    def longUnbox(object: typing.Any) -> int: ...
    @staticmethod
    def primitiveArrayBox(object: typing.Any) -> typing.MutableSequence[typing.Any]: ...
    @staticmethod
    def primitiveArrayToList(object: typing.Any) -> java.util.List: ...
    @staticmethod
    def shortUnbox(object: typing.Any) -> int: ...

class GroovyCastException(java.lang.ClassCastException):
    @typing.overload
    def __init__(self, object: typing.Any, class_: typing.Type): ...
    @typing.overload
    def __init__(self, object: typing.Any, class_: typing.Type, exception: java.lang.Exception): ...
    @typing.overload
    def __init__(self, string: str): ...

class NumberMath:
    def __init__(self): ...
    @staticmethod
    def abs(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def add(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def addImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def and_(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def bitwiseNegate(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def compareTo(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> int: ...
    def compareToImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> int: ...
    @staticmethod
    def divide(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def divideImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def getMath(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> 'NumberMath': ...
    @staticmethod
    def intdiv(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def isBigDecimal(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> bool: ...
    @staticmethod
    def isBigInteger(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> bool: ...
    @staticmethod
    def isByte(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> bool: ...
    @staticmethod
    def isFloatingPoint(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> bool: ...
    @staticmethod
    def isInteger(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> bool: ...
    @staticmethod
    def isLong(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> bool: ...
    @staticmethod
    def isShort(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> bool: ...
    @staticmethod
    def leftShift(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def mod(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def multiply(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def multiplyImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def or_(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def rightShift(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def rightShiftUnsigned(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def subtract(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def subtractImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def toBigDecimal(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.math.BigDecimal: ...
    @staticmethod
    def toBigInteger(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.math.BigInteger: ...
    @staticmethod
    def unaryMinus(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def unaryPlus(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    @staticmethod
    def xor(number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...

class NumberMathModificationInfo:
    instance: typing.ClassVar['NumberMathModificationInfo'] = ...
    byte_plus: bool = ...
    short_plus: bool = ...
    int_plus: bool = ...
    long_plus: bool = ...
    float_plus: bool = ...
    double_plus: bool = ...
    byte_minus: bool = ...
    short_minus: bool = ...
    int_minus: bool = ...
    long_minus: bool = ...
    float_minus: bool = ...
    double_minus: bool = ...
    byte_multiply: bool = ...
    short_multiply: bool = ...
    int_multiply: bool = ...
    long_multiply: bool = ...
    float_multiply: bool = ...
    double_multiply: bool = ...
    byte_div: bool = ...
    short_div: bool = ...
    int_div: bool = ...
    long_div: bool = ...
    float_div: bool = ...
    double_div: bool = ...
    byte_or: bool = ...
    short_or: bool = ...
    int_or: bool = ...
    long_or: bool = ...
    float_or: bool = ...
    double_or: bool = ...
    byte_and: bool = ...
    short_and: bool = ...
    int_and: bool = ...
    long_and: bool = ...
    float_and: bool = ...
    double_and: bool = ...
    byte_xor: bool = ...
    short_xor: bool = ...
    int_xor: bool = ...
    long_xor: bool = ...
    float_xor: bool = ...
    double_xor: bool = ...
    byte_intdiv: bool = ...
    short_intdiv: bool = ...
    int_intdiv: bool = ...
    long_intdiv: bool = ...
    float_intdiv: bool = ...
    double_intdiv: bool = ...
    byte_mod: bool = ...
    short_mod: bool = ...
    int_mod: bool = ...
    long_mod: bool = ...
    float_mod: bool = ...
    double_mod: bool = ...
    byte_leftShift: bool = ...
    short_leftShift: bool = ...
    int_leftShift: bool = ...
    long_leftShift: bool = ...
    float_leftShift: bool = ...
    double_leftShift: bool = ...
    byte_rightShift: bool = ...
    short_rightShift: bool = ...
    int_rightShift: bool = ...
    long_rightShift: bool = ...
    float_rightShift: bool = ...
    double_rightShift: bool = ...
    byte_rightShiftUnsigned: bool = ...
    short_rightShiftUnsigned: bool = ...
    int_rightShiftUnsigned: bool = ...
    long_rightShiftUnsigned: bool = ...
    float_rightShiftUnsigned: bool = ...
    double_rightShiftUnsigned: bool = ...
    @typing.overload
    @staticmethod
    def and_(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def and_(short: int, long: int) -> int: ...
    def checkIfStdMethod(self, metaMethod: groovy.lang.MetaMethod) -> None: ...
    @typing.overload
    @staticmethod
    def div(byte: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(byte: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(double: float, byte: int) -> float: ...
    @typing.overload
    @staticmethod
    def div(double: float, double2: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(double: float, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(double: float, int: int) -> float: ...
    @typing.overload
    @staticmethod
    def div(double: float, long: int) -> float: ...
    @typing.overload
    @staticmethod
    def div(double: float, short: int) -> float: ...
    @typing.overload
    @staticmethod
    def div(float: float, byte: int) -> float: ...
    @typing.overload
    @staticmethod
    def div(float: float, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(float: float, float2: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(float: float, int: int) -> float: ...
    @typing.overload
    @staticmethod
    def div(float: float, long: int) -> float: ...
    @typing.overload
    @staticmethod
    def div(float: float, short: int) -> float: ...
    @typing.overload
    @staticmethod
    def div(int: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(int: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(long: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(long: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(short: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(short: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def div(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def div(short: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def intdiv(short: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def leftShift(short: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(byte: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(byte: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(double: float, byte: int) -> float: ...
    @typing.overload
    @staticmethod
    def minus(double: float, double2: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(double: float, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(double: float, int: int) -> float: ...
    @typing.overload
    @staticmethod
    def minus(double: float, long: int) -> float: ...
    @typing.overload
    @staticmethod
    def minus(double: float, short: int) -> float: ...
    @typing.overload
    @staticmethod
    def minus(float: float, byte: int) -> float: ...
    @typing.overload
    @staticmethod
    def minus(float: float, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(float: float, float2: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(float: float, int: int) -> float: ...
    @typing.overload
    @staticmethod
    def minus(float: float, long: int) -> float: ...
    @typing.overload
    @staticmethod
    def minus(float: float, short: int) -> float: ...
    @typing.overload
    @staticmethod
    def minus(int: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(int: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(long: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(long: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(short: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(short: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def minus(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def minus(short: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def mod(short: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(byte: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(byte: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(double: float, byte: int) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(double: float, double2: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(double: float, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(double: float, int: int) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(double: float, long: int) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(double: float, short: int) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(float: float, byte: int) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(float: float, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(float: float, float2: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(float: float, int: int) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(float: float, long: int) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(float: float, short: int) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(int: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(int: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(long: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(long: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(short: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(short: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def multiply(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def multiply(short: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def or_(short: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(byte: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(byte: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(double: float, byte: int) -> float: ...
    @typing.overload
    @staticmethod
    def plus(double: float, double2: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(double: float, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(double: float, int: int) -> float: ...
    @typing.overload
    @staticmethod
    def plus(double: float, long: int) -> float: ...
    @typing.overload
    @staticmethod
    def plus(double: float, short: int) -> float: ...
    @typing.overload
    @staticmethod
    def plus(float: float, byte: int) -> float: ...
    @typing.overload
    @staticmethod
    def plus(float: float, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(float: float, float2: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(float: float, int: int) -> float: ...
    @typing.overload
    @staticmethod
    def plus(float: float, long: int) -> float: ...
    @typing.overload
    @staticmethod
    def plus(float: float, short: int) -> float: ...
    @typing.overload
    @staticmethod
    def plus(int: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(int: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(long: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(long: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(short: int, double: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(short: int, float: float) -> float: ...
    @typing.overload
    @staticmethod
    def plus(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def plus(short: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShift(short: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def rightShiftUnsigned(short: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(byte: int, byte2: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(byte: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(byte: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(int: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(int: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(short: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(short: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(short: int, short2: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(byte: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(int: int, long: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(long: int, byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(long: int, int: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(long: int, long2: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(long: int, short: int) -> int: ...
    @typing.overload
    @staticmethod
    def xor(short: int, long: int) -> int: ...

class ShortTypeHandling:
    def __init__(self): ...
    @staticmethod
    def castToChar(object: typing.Any) -> str: ...
    @staticmethod
    def castToClass(object: typing.Any) -> typing.Type: ...
    @staticmethod
    def castToEnum(object: typing.Any, class_: typing.Type[java.lang.Enum]) -> java.lang.Enum: ...
    @staticmethod
    def castToString(object: typing.Any) -> str: ...

class BigDecimalMath(NumberMath):
    DIVISION_EXTRA_PRECISION: typing.ClassVar[int] = ...
    DIVISION_MIN_SCALE: typing.ClassVar[int] = ...
    INSTANCE: typing.ClassVar['BigDecimalMath'] = ...
    def addImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def compareToImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> int: ...
    def divideImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def multiplyImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def subtractImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...

class BigIntegerMath(NumberMath):
    INSTANCE: typing.ClassVar['BigIntegerMath'] = ...
    def addImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def compareToImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> int: ...
    def divideImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def multiplyImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def subtractImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...

class FloatingPointMath(NumberMath):
    INSTANCE: typing.ClassVar['FloatingPointMath'] = ...
    def addImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def compareToImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> int: ...
    def divideImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def multiplyImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def subtractImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...

class IntegerMath(NumberMath):
    INSTANCE: typing.ClassVar['IntegerMath'] = ...
    def addImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def compareToImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> int: ...
    def divideImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def multiplyImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def subtractImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...

class LongMath(NumberMath):
    INSTANCE: typing.ClassVar['LongMath'] = ...
    def addImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def compareToImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> int: ...
    def divideImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def multiplyImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...
    def subtractImpl(self, number: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat], number2: typing.Union[_jpype._JNumberLong, _jpype._JNumberFloat, typing.SupportsIndex, typing.SupportsFloat]) -> java.lang.Number: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.runtime.typehandling")``.

    BigDecimalMath: typing.Type[BigDecimalMath]
    BigIntegerMath: typing.Type[BigIntegerMath]
    DefaultTypeTransformation: typing.Type[DefaultTypeTransformation]
    FloatingPointMath: typing.Type[FloatingPointMath]
    GroovyCastException: typing.Type[GroovyCastException]
    IntegerMath: typing.Type[IntegerMath]
    LongMath: typing.Type[LongMath]
    NumberMath: typing.Type[NumberMath]
    NumberMathModificationInfo: typing.Type[NumberMathModificationInfo]
    ShortTypeHandling: typing.Type[ShortTypeHandling]
