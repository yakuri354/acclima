
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import java.io
import java.net
import java.util
import jpype
import jpype.protocol
import org.codehaus.groovy.ast
import org.codehaus.groovy.control
import typing



class JavaAwareCompilationUnit(org.codehaus.groovy.control.CompilationUnit):
    @typing.overload
    def __init__(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration): ...
    @typing.overload
    def __init__(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration, groovyClassLoader: groovy.lang.GroovyClassLoader): ...
    @typing.overload
    def __init__(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration, groovyClassLoader: groovy.lang.GroovyClassLoader, groovyClassLoader2: groovy.lang.GroovyClassLoader): ...
    @typing.overload
    def addSources(self, fileArray: typing.Union[typing.List[java.io.File], jpype.JArray]) -> None: ...
    @typing.overload
    def addSources(self, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def configure(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration) -> None: ...
    def getCompilerFactory(self) -> 'JavaCompilerFactory': ...
    def gotoPhase(self, int: int) -> None: ...
    def setCompilerFactory(self, javaCompilerFactory: 'JavaCompilerFactory') -> None: ...

class JavaAwareResolveVisitor(org.codehaus.groovy.control.ResolveVisitor):
    def __init__(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit): ...
    def addError(self, string: str, aSTNode: org.codehaus.groovy.ast.ASTNode) -> None: ...
    def visitConstructor(self, constructorNode: org.codehaus.groovy.ast.ConstructorNode) -> None: ...

class JavaCompiler:
    def compile(self, list: java.util.List[str], compilationUnit: org.codehaus.groovy.control.CompilationUnit) -> None: ...

class JavaCompilerFactory:
    def createCompiler(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration) -> JavaCompiler: ...

class JavaStubCompilationUnit(org.codehaus.groovy.control.CompilationUnit):
    @typing.overload
    def __init__(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration, groovyClassLoader: groovy.lang.GroovyClassLoader): ...
    @typing.overload
    def __init__(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration, groovyClassLoader: groovy.lang.GroovyClassLoader, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]): ...
    @typing.overload
    def addSource(self, string: str, inputStream: java.io.InputStream) -> org.codehaus.groovy.control.SourceUnit: ...
    @typing.overload
    def addSource(self, string: str, string2: str) -> org.codehaus.groovy.control.SourceUnit: ...
    @typing.overload
    def addSource(self, sourceUnit: org.codehaus.groovy.control.SourceUnit) -> org.codehaus.groovy.control.SourceUnit: ...
    @typing.overload
    def addSource(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> org.codehaus.groovy.control.SourceUnit: ...
    @typing.overload
    def addSource(self, uRL: java.net.URL) -> org.codehaus.groovy.control.SourceUnit: ...
    @typing.overload
    def compile(self, int: int) -> None: ...
    @typing.overload
    def compile(self) -> None: ...
    def configure(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration) -> None: ...
    def getStubCount(self) -> int: ...

class JavaStubGenerator:
    @typing.overload
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]): ...
    @typing.overload
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], boolean: bool, boolean2: bool, string: str): ...
    def clean(self) -> None: ...
    def generateClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...

class JavacCompilerFactory(JavaCompilerFactory):
    def __init__(self): ...
    def createCompiler(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration) -> JavaCompiler: ...

class JavacJavaCompiler(JavaCompiler):
    def __init__(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration): ...
    def compile(self, list: java.util.List[str], compilationUnit: org.codehaus.groovy.control.CompilationUnit) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.tools.javac")``.

    JavaAwareCompilationUnit: typing.Type[JavaAwareCompilationUnit]
    JavaAwareResolveVisitor: typing.Type[JavaAwareResolveVisitor]
    JavaCompiler: typing.Type[JavaCompiler]
    JavaCompilerFactory: typing.Type[JavaCompilerFactory]
    JavaStubCompilationUnit: typing.Type[JavaStubCompilationUnit]
    JavaStubGenerator: typing.Type[JavaStubGenerator]
    JavacCompilerFactory: typing.Type[JavacCompilerFactory]
    JavacJavaCompiler: typing.Type[JavacJavaCompiler]
