
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import java.io
import java.lang
import java.util
import java.util.regex
import jpype
import org.codehaus.groovy.antlr
import org.codehaus.groovy.antlr.parser
import org.codehaus.groovy.antlr.treewalker
import org.codehaus.groovy.groovydoc
import org.codehaus.groovy.tools.groovydoc.gstringTemplates
import typing



class ArrayClassDocWrapper(org.codehaus.groovy.groovydoc.GroovyClassDoc):
    def __init__(self, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc): ...
    def annotations(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyAnnotationRef]: ...
    def commentText(self) -> str: ...
    def compareTo(self, object: typing.Any) -> int: ...
    @typing.overload
    def constructors(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyConstructorDoc]: ...
    @typing.overload
    def constructors(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyConstructorDoc]: ...
    def containingClass(self) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def containingPackage(self) -> org.codehaus.groovy.groovydoc.GroovyPackageDoc: ...
    def definesSerializableFields(self) -> bool: ...
    def enumConstants(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    @typing.overload
    def fields(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    @typing.overload
    def fields(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    def findClass(self, string: str) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def firstSentenceCommentText(self) -> str: ...
    def getDelegate(self) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def getFullPathName(self) -> str: ...
    def getRawCommentText(self) -> str: ...
    def getRelativeRootPath(self) -> str: ...
    def importedClasses(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def importedPackages(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyPackageDoc]: ...
    @typing.overload
    def innerClasses(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    @typing.overload
    def innerClasses(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def interfaceTypes(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyType]: ...
    def interfaces(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def isAbstract(self) -> bool: ...
    def isAnnotationType(self) -> bool: ...
    def isAnnotationTypeElement(self) -> bool: ...
    def isClass(self) -> bool: ...
    def isConstructor(self) -> bool: ...
    def isDeprecated(self) -> bool: ...
    def isEnum(self) -> bool: ...
    def isEnumConstant(self) -> bool: ...
    def isError(self) -> bool: ...
    def isException(self) -> bool: ...
    def isExternalizable(self) -> bool: ...
    def isField(self) -> bool: ...
    def isFinal(self) -> bool: ...
    def isIncluded(self) -> bool: ...
    def isInterface(self) -> bool: ...
    def isMethod(self) -> bool: ...
    def isOrdinaryClass(self) -> bool: ...
    def isPackagePrivate(self) -> bool: ...
    def isPrimitive(self) -> bool: ...
    def isPrivate(self) -> bool: ...
    def isProtected(self) -> bool: ...
    def isPublic(self) -> bool: ...
    def isSerializable(self) -> bool: ...
    def isStatic(self) -> bool: ...
    @typing.overload
    def methods(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyMethodDoc]: ...
    @typing.overload
    def methods(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyMethodDoc]: ...
    def modifierSpecifier(self) -> int: ...
    def modifiers(self) -> str: ...
    def name(self) -> str: ...
    def properties(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    def qualifiedName(self) -> str: ...
    def qualifiedTypeName(self) -> str: ...
    def serializableFields(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    def serializationMethods(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyMethodDoc]: ...
    def setRawCommentText(self, string: str) -> None: ...
    def simpleTypeName(self) -> str: ...
    def subclassOf(self, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc) -> bool: ...
    def superclass(self) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def superclassType(self) -> org.codehaus.groovy.groovydoc.GroovyType: ...
    def toString(self) -> str: ...
    def typeName(self) -> str: ...

class ExternalGroovyClassDoc(org.codehaus.groovy.groovydoc.GroovyClassDoc):
    def __init__(self, class_: typing.Type): ...
    def annotations(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyAnnotationRef]: ...
    def commentText(self) -> str: ...
    def compareTo(self, object: typing.Any) -> int: ...
    @typing.overload
    def constructors(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyConstructorDoc]: ...
    @typing.overload
    def constructors(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyConstructorDoc]: ...
    def containingClass(self) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def containingPackage(self) -> org.codehaus.groovy.groovydoc.GroovyPackageDoc: ...
    def definesSerializableFields(self) -> bool: ...
    def enumConstants(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    def equals(self, object: typing.Any) -> bool: ...
    def externalClass(self) -> typing.Type: ...
    @typing.overload
    def fields(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    @typing.overload
    def fields(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    def findClass(self, string: str) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def firstSentenceCommentText(self) -> str: ...
    def getFullPathName(self) -> str: ...
    def getRawCommentText(self) -> str: ...
    def getRelativeRootPath(self) -> str: ...
    def getTypeSourceDescription(self) -> str: ...
    def hashCode(self) -> int: ...
    def importedClasses(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def importedPackages(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyPackageDoc]: ...
    @typing.overload
    def innerClasses(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    @typing.overload
    def innerClasses(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def interfaceTypes(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyType]: ...
    def interfaces(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def isAbstract(self) -> bool: ...
    def isAnnotationType(self) -> bool: ...
    def isAnnotationTypeElement(self) -> bool: ...
    def isClass(self) -> bool: ...
    def isConstructor(self) -> bool: ...
    def isDeprecated(self) -> bool: ...
    def isEnum(self) -> bool: ...
    def isEnumConstant(self) -> bool: ...
    def isError(self) -> bool: ...
    def isException(self) -> bool: ...
    def isExternalizable(self) -> bool: ...
    def isField(self) -> bool: ...
    def isFinal(self) -> bool: ...
    def isIncluded(self) -> bool: ...
    def isInterface(self) -> bool: ...
    def isMethod(self) -> bool: ...
    def isOrdinaryClass(self) -> bool: ...
    def isPackagePrivate(self) -> bool: ...
    def isPrimitive(self) -> bool: ...
    def isPrivate(self) -> bool: ...
    def isProtected(self) -> bool: ...
    def isPublic(self) -> bool: ...
    def isSerializable(self) -> bool: ...
    def isStatic(self) -> bool: ...
    @typing.overload
    def methods(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyMethodDoc]: ...
    @typing.overload
    def methods(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyMethodDoc]: ...
    def modifierSpecifier(self) -> int: ...
    def modifiers(self) -> str: ...
    def name(self) -> str: ...
    def properties(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    def qualifiedName(self) -> str: ...
    def qualifiedTypeName(self) -> str: ...
    def serializableFields(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    def serializationMethods(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyMethodDoc]: ...
    def setRawCommentText(self, string: str) -> None: ...
    def simpleTypeName(self) -> str: ...
    def subclassOf(self, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc) -> bool: ...
    def superclass(self) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def superclassType(self) -> org.codehaus.groovy.groovydoc.GroovyType: ...
    def typeName(self) -> str: ...

class GroovyDocTemplateEngine:
    @typing.overload
    def __init__(self, groovyDocTool: 'GroovyDocTool', resourceManager: 'ResourceManager', string: str): ...
    @typing.overload
    def __init__(self, groovyDocTool: 'GroovyDocTool', resourceManager: 'ResourceManager', stringArray: typing.Union[typing.List[str], jpype.JArray], stringArray2: typing.Union[typing.List[str], jpype.JArray], stringArray3: typing.Union[typing.List[str], jpype.JArray], properties: java.util.Properties): ...
    def copyBinaryResource(self, string: str, string2: str) -> None: ...

class GroovyDocTool:
    @typing.overload
    def __init__(self, stringArray: typing.Union[typing.List[str], jpype.JArray]): ...
    @typing.overload
    def __init__(self, resourceManager: 'ResourceManager', stringArray: typing.Union[typing.List[str], jpype.JArray], string2: str): ...
    @typing.overload
    def __init__(self, resourceManager: 'ResourceManager', stringArray: typing.Union[typing.List[str], jpype.JArray], stringArray2: typing.Union[typing.List[str], jpype.JArray], stringArray3: typing.Union[typing.List[str], jpype.JArray], stringArray4: typing.Union[typing.List[str], jpype.JArray], list: java.util.List['LinkArgument'], properties: java.util.Properties): ...
    def add(self, list: java.util.List[str]) -> None: ...
    def getRootDoc(self) -> org.codehaus.groovy.groovydoc.GroovyRootDoc: ...
    def renderToOutput(self, outputTool: 'OutputTool', string: str) -> None: ...

class GroovyDocWriter:
    def __init__(self, groovyDocTool: GroovyDocTool, outputTool: 'OutputTool', groovyDocTemplateEngine: GroovyDocTemplateEngine, properties: java.util.Properties): ...
    def writeClassToOutput(self, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc, string: str) -> None: ...
    def writeClasses(self, groovyRootDoc: org.codehaus.groovy.groovydoc.GroovyRootDoc, string: str) -> None: ...
    def writePackageToOutput(self, groovyPackageDoc: org.codehaus.groovy.groovydoc.GroovyPackageDoc, string: str) -> None: ...
    def writePackages(self, groovyRootDoc: org.codehaus.groovy.groovydoc.GroovyRootDoc, string: str) -> None: ...
    def writeRoot(self, groovyRootDoc: org.codehaus.groovy.groovydoc.GroovyRootDoc, string: str) -> None: ...
    def writeRootDocToOutput(self, groovyRootDoc: org.codehaus.groovy.groovydoc.GroovyRootDoc, string: str) -> None: ...

class GroovyRootDocBuilder:
    def __init__(self, groovyDocTool: GroovyDocTool, stringArray: typing.Union[typing.List[str], jpype.JArray], list: java.util.List['LinkArgument'], properties: java.util.Properties): ...
    def buildTree(self, list: java.util.List[str]) -> None: ...
    def getClassDocsFromSingleSource(self, string: str, string2: str, string3: str) -> java.util.Map[str, org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def getRootDoc(self) -> org.codehaus.groovy.groovydoc.GroovyRootDoc: ...

class LinkArgument:
    def __init__(self): ...
    def getHref(self) -> str: ...
    def getPackages(self) -> str: ...
    def setHref(self, string: str) -> None: ...
    def setPackages(self, string: str) -> None: ...

class Main(groovy.lang.GroovyObject):
    def __init__(self): ...
    @staticmethod
    def collectSourceFileNames(list: java.util.List[str], stringArray: typing.Union[typing.List[str], jpype.JArray], list2: java.util.List[str]) -> typing.Any: ...
    @staticmethod
    def execute() -> None: ...
    @staticmethod
    def main(*string: str) -> None: ...

class OutputTool:
    def makeOutputArea(self, string: str) -> None: ...
    def writeToOutput(self, string: str, string2: str, string3: str) -> None: ...

class ResourceManager:
    def getReader(self, string: str) -> java.io.Reader: ...

class SimpleGroovyAnnotationRef(org.codehaus.groovy.groovydoc.GroovyAnnotationRef):
    def __init__(self, string: str, string2: str): ...
    def description(self) -> str: ...
    def isTypeAvailable(self) -> bool: ...
    def name(self) -> str: ...
    def setName(self, string: str) -> None: ...
    def setType(self, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc) -> None: ...
    def type(self) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...

class SimpleGroovyClassDocAssembler(org.codehaus.groovy.antlr.treewalker.VisitorAdapter, org.codehaus.groovy.antlr.parser.GroovyTokenTypes):
    def __init__(self, string: str, string2: str, sourceBuffer: org.codehaus.groovy.antlr.SourceBuffer, list: java.util.List[LinkArgument], properties: java.util.Properties, boolean: bool): ...
    def getGroovyClassDocs(self) -> java.util.Map[str, org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def pop(self) -> org.codehaus.groovy.antlr.GroovySourceAST: ...
    def push(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST) -> None: ...
    def visitAnnotationDef(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitAnnotationFieldDef(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitAssign(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitClassDef(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitCtorIdent(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitEnumConstantDef(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitEnumDef(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitExtendsClause(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitImplementsClause(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitImport(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitInterfaceDef(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitMethodCall(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitMethodDef(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitPackageDef(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitTraitDef(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitVariableDef(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...

class SimpleGroovyDoc(org.codehaus.groovy.groovydoc.GroovyDoc, org.codehaus.groovy.antlr.parser.GroovyTokenTypes):
    def __init__(self, string: str): ...
    @staticmethod
    def calculateFirstSentence(string: str) -> str: ...
    def commentText(self) -> str: ...
    def compareTo(self, object: typing.Any) -> int: ...
    def firstSentenceCommentText(self) -> str: ...
    def getRawCommentText(self) -> str: ...
    def getTypeDescription(self) -> str: ...
    def getTypeSourceDescription(self) -> str: ...
    def isAnnotationType(self) -> bool: ...
    def isAnnotationTypeElement(self) -> bool: ...
    def isClass(self) -> bool: ...
    def isConstructor(self) -> bool: ...
    def isDeprecated(self) -> bool: ...
    def isEnum(self) -> bool: ...
    def isEnumConstant(self) -> bool: ...
    def isError(self) -> bool: ...
    def isException(self) -> bool: ...
    def isField(self) -> bool: ...
    def isIncluded(self) -> bool: ...
    def isInterface(self) -> bool: ...
    def isMethod(self) -> bool: ...
    def isOrdinaryClass(self) -> bool: ...
    def isScript(self) -> bool: ...
    def isTrait(self) -> bool: ...
    def name(self) -> str: ...
    def setDeprecated(self, boolean: bool) -> None: ...
    def setRawCommentText(self, string: str) -> None: ...
    def setScript(self, boolean: bool) -> None: ...
    def setTokenType(self, int: int) -> None: ...
    def tags(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyTag]: ...
    def toString(self) -> str: ...
    def tokenType(self) -> int: ...

class SimpleGroovyParameter(org.codehaus.groovy.groovydoc.GroovyParameter):
    def __init__(self, string: str): ...
    def addAnnotationRef(self, groovyAnnotationRef: org.codehaus.groovy.groovydoc.GroovyAnnotationRef) -> None: ...
    def annotations(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyAnnotationRef]: ...
    def defaultValue(self) -> str: ...
    def isTypeAvailable(self) -> bool: ...
    def name(self) -> str: ...
    def setDefaultValue(self, string: str) -> None: ...
    def setType(self, groovyType: org.codehaus.groovy.groovydoc.GroovyType) -> None: ...
    def setTypeName(self, string: str) -> None: ...
    def setVararg(self, boolean: bool) -> None: ...
    def type(self) -> org.codehaus.groovy.groovydoc.GroovyType: ...
    def typeName(self) -> str: ...
    def vararg(self) -> bool: ...

class SimpleGroovyTag(org.codehaus.groovy.groovydoc.GroovyTag):
    def __init__(self, string: str, string2: str, string3: str): ...
    def name(self) -> str: ...
    def param(self) -> str: ...
    def text(self) -> str: ...

class SimpleGroovyType(org.codehaus.groovy.groovydoc.GroovyType):
    def __init__(self, string: str): ...
    def isPrimitive(self) -> bool: ...
    def qualifiedTypeName(self) -> str: ...
    def simpleTypeName(self) -> str: ...
    def typeName(self) -> str: ...

class ClasspathResourceManager(ResourceManager):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, classLoader: java.lang.ClassLoader): ...
    def getInputStream(self, string: str) -> java.io.InputStream: ...
    def getReader(self, string: str) -> java.io.Reader: ...

class FileOutputTool(OutputTool):
    def __init__(self): ...
    def makeOutputArea(self, string: str) -> None: ...
    def writeToOutput(self, string: str, string2: str, string3: str) -> None: ...

class FileSystemResourceManager(ResourceManager):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    def getReader(self, string: str) -> java.io.Reader: ...

class MockOutputTool(OutputTool):
    def __init__(self): ...
    def getText(self, string: str) -> str: ...
    def isValidOutputArea(self, string: str) -> bool: ...
    def makeOutputArea(self, string: str) -> None: ...
    def toString(self) -> str: ...
    def writeToOutput(self, string: str, string2: str, string3: str) -> None: ...

class SimpleGroovyPackageDoc(SimpleGroovyDoc, org.codehaus.groovy.groovydoc.GroovyPackageDoc):
    def __init__(self, string: str): ...
    @typing.overload
    def allClasses(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    @typing.overload
    def allClasses(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def description(self) -> str: ...
    def enums(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def errors(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def exceptions(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def findClass(self, string: str) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def getRelativeRootPath(self) -> str: ...
    def interfaces(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def nameWithDots(self) -> str: ...
    def ordinaryClasses(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def putAll(self, map: typing.Union[java.util.Map[str, org.codehaus.groovy.groovydoc.GroovyClassDoc], typing.Mapping[str, org.codehaus.groovy.groovydoc.GroovyClassDoc]]) -> None: ...
    def setDescription(self, string: str) -> None: ...
    def setSummary(self, string: str) -> None: ...
    def summary(self) -> str: ...

class SimpleGroovyProgramElementDoc(SimpleGroovyDoc, org.codehaus.groovy.groovydoc.GroovyProgramElementDoc):
    def __init__(self, string: str): ...
    def addAnnotationRef(self, groovyAnnotationRef: org.codehaus.groovy.groovydoc.GroovyAnnotationRef) -> None: ...
    def annotations(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyAnnotationRef]: ...
    def containingClass(self) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def containingPackage(self) -> org.codehaus.groovy.groovydoc.GroovyPackageDoc: ...
    def isFinal(self) -> bool: ...
    def isPackagePrivate(self) -> bool: ...
    def isPrivate(self) -> bool: ...
    def isProtected(self) -> bool: ...
    def isPublic(self) -> bool: ...
    def isStatic(self) -> bool: ...
    def modifierSpecifier(self) -> int: ...
    def modifiers(self) -> str: ...
    def qualifiedName(self) -> str: ...
    def setContainingPackage(self, groovyPackageDoc: org.codehaus.groovy.groovydoc.GroovyPackageDoc) -> None: ...
    def setFinal(self, boolean: bool) -> None: ...
    def setPackagePrivate(self, boolean: bool) -> None: ...
    def setPrivate(self, boolean: bool) -> None: ...
    def setProtected(self, boolean: bool) -> None: ...
    def setPublic(self, boolean: bool) -> None: ...
    def setStatic(self, boolean: bool) -> None: ...

class SimpleGroovyRootDoc(SimpleGroovyDoc, org.codehaus.groovy.groovydoc.GroovyRootDoc):
    def __init__(self, string: str): ...
    def classNamed(self, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc, string: str) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def classNamedExact(self, string: str) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def classes(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def description(self) -> str: ...
    def getResolvedClasses(self) -> java.util.Map[str, org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def getVisibleClasses(self, list: java.util.List) -> java.util.Map[str, org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def options(self) -> typing.MutableSequence[typing.MutableSequence[str]]: ...
    def packageNamed(self, string: str) -> org.codehaus.groovy.groovydoc.GroovyPackageDoc: ...
    def printError(self, string: str) -> None: ...
    def printNotice(self, string: str) -> None: ...
    def printWarning(self, string: str) -> None: ...
    def put(self, string: str, groovyPackageDoc: org.codehaus.groovy.groovydoc.GroovyPackageDoc) -> None: ...
    def putAllClasses(self, map: typing.Union[java.util.Map[str, org.codehaus.groovy.groovydoc.GroovyClassDoc], typing.Mapping[str, org.codehaus.groovy.groovydoc.GroovyClassDoc]]) -> None: ...
    def resolve(self) -> None: ...
    def setDescription(self, string: str) -> None: ...
    def specifiedClasses(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def specifiedPackages(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyPackageDoc]: ...
    def summary(self) -> str: ...

class SimpleGroovyAbstractableElementDoc(SimpleGroovyProgramElementDoc):
    def __init__(self, string: str): ...
    def isAbstract(self) -> bool: ...
    def setAbstract(self, boolean: bool) -> None: ...

class SimpleGroovyClassDoc(SimpleGroovyAbstractableElementDoc, org.codehaus.groovy.groovydoc.GroovyClassDoc):
    TAG_REGEX: typing.ClassVar[java.util.regex.Pattern] = ...
    DOCROOT_PATTERN2: typing.ClassVar[str] = ...
    DOCROOT_PATTERN: typing.ClassVar[str] = ...
    LINK_REGEX: typing.ClassVar[java.util.regex.Pattern] = ...
    LITERAL_REGEX: typing.ClassVar[java.util.regex.Pattern] = ...
    CODE_REGEX: typing.ClassVar[java.util.regex.Pattern] = ...
    REF_LABEL_REGEX: typing.ClassVar[java.util.regex.Pattern] = ...
    NAME_ARGS_REGEX: typing.ClassVar[java.util.regex.Pattern] = ...
    SPLIT_ARGS_REGEX: typing.ClassVar[java.util.regex.Pattern] = ...
    @typing.overload
    def __init__(self, list: java.util.List[str], string: str): ...
    @typing.overload
    def __init__(self, list: java.util.List[str], map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]], string: str): ...
    @typing.overload
    def __init__(self, list: java.util.List[str], map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]], string: str, list2: java.util.List[LinkArgument]): ...
    @typing.overload
    def add(self, groovyConstructorDoc: org.codehaus.groovy.groovydoc.GroovyConstructorDoc) -> bool: ...
    @typing.overload
    def add(self, groovyFieldDoc: org.codehaus.groovy.groovydoc.GroovyFieldDoc) -> bool: ...
    @typing.overload
    def add(self, groovyMethodDoc: org.codehaus.groovy.groovydoc.GroovyMethodDoc) -> bool: ...
    def addEnumConstant(self, groovyFieldDoc: org.codehaus.groovy.groovydoc.GroovyFieldDoc) -> bool: ...
    def addInterfaceName(self, string: str) -> None: ...
    def addNested(self, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc) -> bool: ...
    def addProperty(self, groovyFieldDoc: org.codehaus.groovy.groovydoc.GroovyFieldDoc) -> bool: ...
    def commentText(self) -> str: ...
    @typing.overload
    def constructors(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyConstructorDoc]: ...
    @typing.overload
    def constructors(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyConstructorDoc]: ...
    @staticmethod
    def decodeSpecialSymbols(string: str) -> str: ...
    def definesSerializableFields(self) -> bool: ...
    @staticmethod
    def encodeAngleBrackets(string: str) -> str: ...
    @staticmethod
    def encodeAngleBracketsInTagBody(string: str, pattern: java.util.regex.Pattern) -> str: ...
    @staticmethod
    def encodeSpecialSymbols(string: str) -> str: ...
    def enumConstants(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    @typing.overload
    def fields(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    @typing.overload
    def fields(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    def findClass(self, string: str) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def firstSentenceCommentText(self) -> str: ...
    @typing.overload
    def getDocUrl(self, string: str) -> str: ...
    @typing.overload
    def getDocUrl(self, string: str, boolean: bool) -> str: ...
    @typing.overload
    @staticmethod
    def getDocUrl(string: str, boolean: bool, list: java.util.List[LinkArgument], string2: str, groovyRootDoc: org.codehaus.groovy.groovydoc.GroovyRootDoc, simpleGroovyClassDoc: 'SimpleGroovyClassDoc') -> str: ...
    def getFullPathName(self) -> str: ...
    def getNameWithTypeArgs(self) -> str: ...
    def getOuter(self) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def getParentClasses(self) -> java.util.List[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def getParentInterfaces(self) -> java.util.Set[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def getRelativeRootPath(self) -> str: ...
    def getSuperClassName(self) -> str: ...
    def importedClasses(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def importedPackages(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyPackageDoc]: ...
    @typing.overload
    def innerClasses(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    @typing.overload
    def innerClasses(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def interfaceTypes(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyType]: ...
    def interfaces(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...
    def isExternalizable(self) -> bool: ...
    def isGroovy(self) -> bool: ...
    def isPrimitive(self) -> bool: ...
    def isSerializable(self) -> bool: ...
    @typing.overload
    def methods(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyMethodDoc]: ...
    @typing.overload
    def methods(self, boolean: bool) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyMethodDoc]: ...
    def properties(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    def qualifiedTypeName(self) -> str: ...
    @typing.overload
    def replaceAllTags(self, string: str, string2: str, string3: str, pattern: java.util.regex.Pattern) -> str: ...
    @typing.overload
    @staticmethod
    def replaceAllTags(string: str, string2: str, string3: str, pattern: java.util.regex.Pattern, list: java.util.List[LinkArgument], string4: str, groovyRootDoc: org.codehaus.groovy.groovydoc.GroovyRootDoc, simpleGroovyClassDoc: 'SimpleGroovyClassDoc') -> str: ...
    def replaceAllTagsCollated(self, string: str, string2: str, string3: str, string4: str, string5: str, pattern: java.util.regex.Pattern) -> str: ...
    def replaceTags(self, string: str) -> str: ...
    def serializableFields(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyFieldDoc]: ...
    def serializationMethods(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyMethodDoc]: ...
    def setFullPathName(self, string: str) -> None: ...
    def setGroovy(self, boolean: bool) -> None: ...
    def setNameWithTypeArgs(self, string: str) -> None: ...
    def setOuter(self, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc) -> None: ...
    def setSuperClass(self, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc) -> None: ...
    def setSuperClassName(self, string: str) -> None: ...
    def simpleTypeName(self) -> str: ...
    def subclassOf(self, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc) -> bool: ...
    def superclass(self) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def superclassType(self) -> org.codehaus.groovy.groovydoc.GroovyType: ...
    def typeName(self) -> str: ...

class SimpleGroovyMemberDoc(SimpleGroovyAbstractableElementDoc, org.codehaus.groovy.groovydoc.GroovyMemberDoc):
    def __init__(self, string: str, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc): ...
    def commentText(self) -> str: ...
    def firstSentenceCommentText(self) -> str: ...
    def isSynthetic(self) -> bool: ...

class SimpleGroovyExecutableMemberDoc(SimpleGroovyMemberDoc, org.codehaus.groovy.groovydoc.GroovyExecutableMemberDoc):
    def __init__(self, string: str, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc): ...
    def add(self, groovyParameter: org.codehaus.groovy.groovydoc.GroovyParameter) -> None: ...
    def flatSignature(self) -> str: ...
    def isNative(self) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isVarArgs(self) -> bool: ...
    def parameters(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyParameter]: ...
    def signature(self) -> str: ...
    def thrownExceptionTypes(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyType]: ...
    def thrownExceptions(self) -> typing.MutableSequence[org.codehaus.groovy.groovydoc.GroovyClassDoc]: ...

class SimpleGroovyFieldDoc(SimpleGroovyMemberDoc, org.codehaus.groovy.groovydoc.GroovyFieldDoc):
    def __init__(self, string: str, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc): ...
    def constantValue(self) -> typing.Any: ...
    def constantValueExpression(self) -> str: ...
    def isTransient(self) -> bool: ...
    def isVolatile(self) -> bool: ...
    def setConstantValueExpression(self, string: str) -> None: ...
    def setType(self, groovyType: org.codehaus.groovy.groovydoc.GroovyType) -> None: ...
    def type(self) -> org.codehaus.groovy.groovydoc.GroovyType: ...

class SimpleGroovyConstructorDoc(SimpleGroovyExecutableMemberDoc, org.codehaus.groovy.groovydoc.GroovyConstructorDoc):
    def __init__(self, string: str, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc): ...

class SimpleGroovyMethodDoc(SimpleGroovyExecutableMemberDoc, org.codehaus.groovy.groovydoc.GroovyMethodDoc):
    def __init__(self, string: str, groovyClassDoc: org.codehaus.groovy.groovydoc.GroovyClassDoc): ...
    def isAbstract(self) -> bool: ...
    def overriddenClass(self) -> org.codehaus.groovy.groovydoc.GroovyClassDoc: ...
    def overriddenMethod(self) -> org.codehaus.groovy.groovydoc.GroovyMethodDoc: ...
    def overriddenType(self) -> org.codehaus.groovy.groovydoc.GroovyType: ...
    def overrides(self, groovyMethodDoc: org.codehaus.groovy.groovydoc.GroovyMethodDoc) -> bool: ...
    def returnType(self) -> org.codehaus.groovy.groovydoc.GroovyType: ...
    def setReturnType(self, groovyType: org.codehaus.groovy.groovydoc.GroovyType) -> None: ...
    def setTypeParameters(self, string: str) -> None: ...
    def typeParameters(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.tools.groovydoc")``.

    ArrayClassDocWrapper: typing.Type[ArrayClassDocWrapper]
    ClasspathResourceManager: typing.Type[ClasspathResourceManager]
    ExternalGroovyClassDoc: typing.Type[ExternalGroovyClassDoc]
    FileOutputTool: typing.Type[FileOutputTool]
    FileSystemResourceManager: typing.Type[FileSystemResourceManager]
    GroovyDocTemplateEngine: typing.Type[GroovyDocTemplateEngine]
    GroovyDocTool: typing.Type[GroovyDocTool]
    GroovyDocWriter: typing.Type[GroovyDocWriter]
    GroovyRootDocBuilder: typing.Type[GroovyRootDocBuilder]
    LinkArgument: typing.Type[LinkArgument]
    Main: typing.Type[Main]
    MockOutputTool: typing.Type[MockOutputTool]
    OutputTool: typing.Type[OutputTool]
    ResourceManager: typing.Type[ResourceManager]
    SimpleGroovyAbstractableElementDoc: typing.Type[SimpleGroovyAbstractableElementDoc]
    SimpleGroovyAnnotationRef: typing.Type[SimpleGroovyAnnotationRef]
    SimpleGroovyClassDoc: typing.Type[SimpleGroovyClassDoc]
    SimpleGroovyClassDocAssembler: typing.Type[SimpleGroovyClassDocAssembler]
    SimpleGroovyConstructorDoc: typing.Type[SimpleGroovyConstructorDoc]
    SimpleGroovyDoc: typing.Type[SimpleGroovyDoc]
    SimpleGroovyExecutableMemberDoc: typing.Type[SimpleGroovyExecutableMemberDoc]
    SimpleGroovyFieldDoc: typing.Type[SimpleGroovyFieldDoc]
    SimpleGroovyMemberDoc: typing.Type[SimpleGroovyMemberDoc]
    SimpleGroovyMethodDoc: typing.Type[SimpleGroovyMethodDoc]
    SimpleGroovyPackageDoc: typing.Type[SimpleGroovyPackageDoc]
    SimpleGroovyParameter: typing.Type[SimpleGroovyParameter]
    SimpleGroovyProgramElementDoc: typing.Type[SimpleGroovyProgramElementDoc]
    SimpleGroovyRootDoc: typing.Type[SimpleGroovyRootDoc]
    SimpleGroovyTag: typing.Type[SimpleGroovyTag]
    SimpleGroovyType: typing.Type[SimpleGroovyType]
    gstringTemplates: org.codehaus.groovy.tools.groovydoc.gstringTemplates.__module_protocol__
