
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import groovyjarjarasm.asm
import groovyjarjarcommonscli
import groovyjarjarpicocli
import java.io
import java.lang
import java.net
import java.util
import jpype
import jpype.protocol
import org.apache.groovy.docgenerator
import org.codehaus.groovy.control
import org.codehaus.groovy.tools.ast
import org.codehaus.groovy.tools.groovydoc
import org.codehaus.groovy.tools.gse
import org.codehaus.groovy.tools.javac
import org.codehaus.groovy.tools.shell
import org.codehaus.groovy.tools.xml
import typing



class Compiler:
    DEFAULT: typing.ClassVar['Compiler'] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration): ...
    @typing.overload
    def compile(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @typing.overload
    def compile(self, fileArray: typing.Union[typing.List[java.io.File], jpype.JArray]) -> None: ...
    @typing.overload
    def compile(self, string: str, string2: str) -> None: ...
    @typing.overload
    def compile(self, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class DgmConverter(groovyjarjarasm.asm.Opcodes):
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class DocGenerator(groovy.lang.GroovyObject):
    def __init__(self, list: java.util.List[typing.Union[java.io.File, jpype.protocol.SupportsPath]], file: typing.Union[java.io.File, jpype.protocol.SupportsPath]): ...
    def generateAll(self) -> None: ...
    def getDelegate(self) -> org.apache.groovy.docgenerator.DocGenerator: ...
    def getDocSource(self) -> org.apache.groovy.docgenerator.DocGenerator.DocSource: ...
    def getOutputDir(self) -> java.io.File: ...
    def getSourceFiles(self) -> java.util.List: ...
    @staticmethod
    def main(*string: str) -> None: ...
    def setDelegate(self, docGenerator: org.apache.groovy.docgenerator.DocGenerator) -> None: ...
    def setDocSource(self, docSource: org.apache.groovy.docgenerator.DocGenerator.DocSource) -> None: ...
    def setOutputDir(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def setSourceFiles(self, list: java.util.List) -> None: ...

class ErrorReporter:
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable, boolean: bool): ...
    @typing.overload
    def write(self, printStream: java.io.PrintStream) -> None: ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter) -> None: ...

class FileSystemCompiler:
    @typing.overload
    def __init__(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration): ...
    @typing.overload
    def __init__(self, compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration, compilationUnit: org.codehaus.groovy.control.CompilationUnit): ...
    @staticmethod
    def checkFiles(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> int: ...
    @typing.overload
    @staticmethod
    def commandLineCompile(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    @typing.overload
    @staticmethod
    def commandLineCompile(stringArray: typing.Union[typing.List[str], jpype.JArray], boolean: bool) -> None: ...
    @staticmethod
    def commandLineCompileWithErrorHandling(stringArray: typing.Union[typing.List[str], jpype.JArray], boolean: bool) -> None: ...
    @typing.overload
    def compile(self, fileArray: typing.Union[typing.List[java.io.File], jpype.JArray]) -> None: ...
    @typing.overload
    def compile(self, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    @staticmethod
    def configureParser(compilationOptions: 'FileSystemCompiler.CompilationOptions') -> groovyjarjarpicocli.CommandLine: ...
    @staticmethod
    def createCompilationOptions() -> groovyjarjarcommonscli.Options: ...
    @staticmethod
    def createTempDir() -> java.io.File: ...
    @staticmethod
    def deleteRecursive(file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @typing.overload
    @staticmethod
    def displayHelp() -> None: ...
    @typing.overload
    @staticmethod
    def displayHelp(options: groovyjarjarcommonscli.Options) -> None: ...
    @typing.overload
    @staticmethod
    def displayHelp(printWriter: java.io.PrintWriter) -> None: ...
    @typing.overload
    @staticmethod
    def displayVersion() -> None: ...
    @typing.overload
    @staticmethod
    def displayVersion(printWriter: java.io.PrintWriter) -> None: ...
    @typing.overload
    @staticmethod
    def doCompilation(compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration, compilationUnit: org.codehaus.groovy.control.CompilationUnit, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    @typing.overload
    @staticmethod
    def doCompilation(compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration, compilationUnit: org.codehaus.groovy.control.CompilationUnit, stringArray: typing.Union[typing.List[str], jpype.JArray], boolean: bool) -> None: ...
    @staticmethod
    def generateCompilerConfigurationFromOptions(commandLine: groovyjarjarcommonscli.CommandLine) -> org.codehaus.groovy.control.CompilerConfiguration: ...
    @staticmethod
    def generateFileNamesFromOptions(commandLine: groovyjarjarcommonscli.CommandLine) -> typing.MutableSequence[str]: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    @staticmethod
    def validateFiles(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> bool: ...
    class CompilationOptions:
        def __init__(self): ...
        def generateFileNames(self) -> typing.MutableSequence[str]: ...
        def toCompilerConfiguration(self) -> org.codehaus.groovy.control.CompilerConfiguration: ...

class GrapeMain(java.lang.Runnable, groovy.lang.GroovyObject):
    def __init__(self): ...
    def getUnmatched(self) -> java.util.List[str]: ...
    @staticmethod
    def main(*string: str) -> None: ...
    def run(self) -> None: ...
    def setUnmatched(self, list: java.util.List[str]) -> None: ...

class GrapeUtil:
    def __init__(self): ...
    @staticmethod
    def getIvyParts(string: str) -> java.util.Map[str, typing.Any]: ...

class GroovyClass:
    EMPTY_ARRAY: typing.ClassVar[typing.MutableSequence['GroovyClass']] = ...
    def __init__(self, string: str, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]): ...
    def getBytes(self) -> typing.MutableSequence[int]: ...
    def getName(self) -> str: ...

class GroovyStarter:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    @staticmethod
    def rootLoader(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class LoaderConfiguration:
    def __init__(self): ...
    def addClassPath(self, string: str) -> None: ...
    @typing.overload
    def addFile(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @typing.overload
    def addFile(self, string: str) -> None: ...
    def configure(self, inputStream: java.io.InputStream) -> None: ...
    def getClassPathUrls(self) -> typing.MutableSequence[java.net.URL]: ...
    def getGrabUrls(self) -> java.util.List[str]: ...
    def getMainClass(self) -> str: ...
    def setMainClass(self, string: str) -> None: ...
    def setRequireMain(self, boolean: bool) -> None: ...

class RootLoader(java.net.URLClassLoader):
    @typing.overload
    def __init__(self, uRLArray: typing.Union[typing.List[java.net.URL], jpype.JArray], classLoader: java.lang.ClassLoader): ...
    @typing.overload
    def __init__(self, loaderConfiguration: LoaderConfiguration): ...
    def addURL(self, uRL: java.net.URL) -> None: ...
    def getResource(self, string: str) -> java.net.URL: ...

class StringHelper:
    def __init__(self): ...
    @staticmethod
    def tokenizeUnquoted(string: str) -> typing.MutableSequence[str]: ...

class Utilities:
    def __init__(self): ...
    @staticmethod
    def eol() -> str: ...
    @staticmethod
    def isJavaIdentifier(string: str) -> bool: ...
    @staticmethod
    def repeatString(string: str, int: int) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.tools")``.

    Compiler: typing.Type[Compiler]
    DgmConverter: typing.Type[DgmConverter]
    DocGenerator: typing.Type[DocGenerator]
    ErrorReporter: typing.Type[ErrorReporter]
    FileSystemCompiler: typing.Type[FileSystemCompiler]
    GrapeMain: typing.Type[GrapeMain]
    GrapeUtil: typing.Type[GrapeUtil]
    GroovyClass: typing.Type[GroovyClass]
    GroovyStarter: typing.Type[GroovyStarter]
    LoaderConfiguration: typing.Type[LoaderConfiguration]
    RootLoader: typing.Type[RootLoader]
    StringHelper: typing.Type[StringHelper]
    Utilities: typing.Type[Utilities]
    ast: org.codehaus.groovy.tools.ast.__module_protocol__
    groovydoc: org.codehaus.groovy.tools.groovydoc.__module_protocol__
    gse: org.codehaus.groovy.tools.gse.__module_protocol__
    javac: org.codehaus.groovy.tools.javac.__module_protocol__
    shell: org.codehaus.groovy.tools.shell.__module_protocol__
    xml: org.codehaus.groovy.tools.xml.__module_protocol__
