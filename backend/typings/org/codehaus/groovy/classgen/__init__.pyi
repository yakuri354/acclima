
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import groovyjarjarasm.asm
import java.io
import java.lang
import java.util
import jpype
import jpype.protocol
import org.codehaus.groovy.ast
import org.codehaus.groovy.ast.expr
import org.codehaus.groovy.ast.stmt
import org.codehaus.groovy.classgen.asm
import org.codehaus.groovy.control
import typing



class AnnotationVisitor:
    def __init__(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, errorCollector: org.codehaus.groovy.control.ErrorCollector): ...
    def checkCircularReference(self, classNode: org.codehaus.groovy.ast.ClassNode, classNode2: org.codehaus.groovy.ast.ClassNode, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...
    def checkReturnType(self, classNode: org.codehaus.groovy.ast.ClassNode, aSTNode: org.codehaus.groovy.ast.ASTNode) -> None: ...
    def setReportClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visit(self, annotationNode: org.codehaus.groovy.ast.AnnotationNode) -> org.codehaus.groovy.ast.AnnotationNode: ...

class BytecodeExpression(org.codehaus.groovy.ast.expr.Expression):
    NOP: typing.ClassVar['BytecodeExpression'] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, classNode: org.codehaus.groovy.ast.ClassNode): ...
    def transformExpression(self, expressionTransformer: org.codehaus.groovy.ast.expr.ExpressionTransformer) -> org.codehaus.groovy.ast.expr.Expression: ...
    @typing.overload
    def visit(self, methodVisitor: groovyjarjarasm.asm.MethodVisitor) -> None: ...
    @typing.overload
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class BytecodeInstruction:
    def __init__(self): ...
    def visit(self, methodVisitor: groovyjarjarasm.asm.MethodVisitor) -> None: ...

class BytecodeSequence(org.codehaus.groovy.ast.stmt.Statement):
    @typing.overload
    def __init__(self, list: java.util.List): ...
    @typing.overload
    def __init__(self, bytecodeInstruction: BytecodeInstruction): ...
    def getInstructions(self) -> java.util.List: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class ClassCompletionVerifier(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    def __init__(self, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    def getClassNode(self) -> org.codehaus.groovy.ast.ClassNode: ...
    def visitBinaryExpression(self, binaryExpression: org.codehaus.groovy.ast.expr.BinaryExpression) -> None: ...
    def visitCatchStatement(self, catchStatement: org.codehaus.groovy.ast.stmt.CatchStatement) -> None: ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitConstantExpression(self, constantExpression: org.codehaus.groovy.ast.expr.ConstantExpression) -> None: ...
    def visitConstructor(self, constructorNode: org.codehaus.groovy.ast.ConstructorNode) -> None: ...
    def visitDeclarationExpression(self, declarationExpression: org.codehaus.groovy.ast.expr.DeclarationExpression) -> None: ...
    def visitField(self, fieldNode: org.codehaus.groovy.ast.FieldNode) -> None: ...
    def visitGStringExpression(self, gStringExpression: org.codehaus.groovy.ast.expr.GStringExpression) -> None: ...
    def visitMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...
    def visitMethodCallExpression(self, methodCallExpression: org.codehaus.groovy.ast.expr.MethodCallExpression) -> None: ...
    def visitProperty(self, propertyNode: org.codehaus.groovy.ast.PropertyNode) -> None: ...

class ClassGenerator(org.codehaus.groovy.ast.ClassCodeVisitorSupport, groovyjarjarasm.asm.Opcodes):
    def __init__(self): ...
    def getInnerClasses(self) -> java.util.LinkedList[org.codehaus.groovy.ast.ClassNode]: ...
    def visitBytecodeSequence(self, bytecodeSequence: BytecodeSequence) -> None: ...

class ClassGeneratorException(java.lang.RuntimeException):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...

class EnumCompletionVisitor(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    def __init__(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...

class EnumVisitor(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    def __init__(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...

class ExtendedVerifier(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    JVM_ERROR_MESSAGE: typing.ClassVar[str] = ...
    def __init__(self, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    def addError(self, string: str, aSTNode: org.codehaus.groovy.ast.ASTNode) -> None: ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitConstructor(self, constructorNode: org.codehaus.groovy.ast.ConstructorNode) -> None: ...
    def visitDeclarationExpression(self, declarationExpression: org.codehaus.groovy.ast.expr.DeclarationExpression) -> None: ...
    def visitField(self, fieldNode: org.codehaus.groovy.ast.FieldNode) -> None: ...
    def visitGenericType(self, genericsType: org.codehaus.groovy.ast.GenericsType) -> None: ...
    def visitMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...
    def visitProperty(self, propertyNode: org.codehaus.groovy.ast.PropertyNode) -> None: ...

class FinalVariableAnalyzer(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    @typing.overload
    def __init__(self, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    @typing.overload
    def __init__(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, variableNotFinalCallback: 'FinalVariableAnalyzer.VariableNotFinalCallback'): ...
    def isEffectivelyFinal(self, variable: org.codehaus.groovy.ast.Variable) -> bool: ...
    def visitArgumentlistExpression(self, argumentListExpression: org.codehaus.groovy.ast.expr.ArgumentListExpression) -> None: ...
    def visitBinaryExpression(self, binaryExpression: org.codehaus.groovy.ast.expr.BinaryExpression) -> None: ...
    def visitBlockStatement(self, blockStatement: org.codehaus.groovy.ast.stmt.BlockStatement) -> None: ...
    def visitClosureExpression(self, closureExpression: org.codehaus.groovy.ast.expr.ClosureExpression) -> None: ...
    def visitIfElse(self, ifStatement: org.codehaus.groovy.ast.stmt.IfStatement) -> None: ...
    def visitPostfixExpression(self, postfixExpression: org.codehaus.groovy.ast.expr.PostfixExpression) -> None: ...
    def visitPrefixExpression(self, prefixExpression: org.codehaus.groovy.ast.expr.PrefixExpression) -> None: ...
    def visitTryCatchFinally(self, tryCatchStatement: org.codehaus.groovy.ast.stmt.TryCatchStatement) -> None: ...
    def visitVariableExpression(self, variableExpression: org.codehaus.groovy.ast.expr.VariableExpression) -> None: ...
    class VariableNotFinalCallback:
        def variableNotAlwaysInitialized(self, variableExpression: org.codehaus.groovy.ast.expr.VariableExpression) -> None: ...
        def variableNotFinal(self, variable: org.codehaus.groovy.ast.Variable, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...

class GeneratorContext:
    @typing.overload
    def __init__(self, compileUnit: org.codehaus.groovy.ast.CompileUnit): ...
    @typing.overload
    def __init__(self, compileUnit: org.codehaus.groovy.ast.CompileUnit, int: int): ...
    @staticmethod
    def encodeAsValidClassName(string: str) -> str: ...
    def getCompileUnit(self) -> org.codehaus.groovy.ast.CompileUnit: ...
    def getNextClosureInnerName(self, classNode: org.codehaus.groovy.ast.ClassNode, classNode2: org.codehaus.groovy.ast.ClassNode, methodNode: org.codehaus.groovy.ast.MethodNode) -> str: ...
    def getNextInnerClassIdx(self) -> int: ...

class InnerClassVisitorHelper(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    def __init__(self): ...

class ReturnAdder:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, returnStatementListener: 'ReturnAdder.ReturnStatementListener'): ...
    @staticmethod
    def addReturnIfNeeded(methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...
    def visitMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...
    class ReturnStatementListener:
        def returnStatementAdded(self, returnStatement: org.codehaus.groovy.ast.stmt.ReturnStatement) -> None: ...

class VariableScopeVisitor(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    @typing.overload
    def __init__(self, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    @typing.overload
    def __init__(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, boolean: bool): ...
    def prepareVisit(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitAnnotations(self, annotatedNode: org.codehaus.groovy.ast.AnnotatedNode) -> None: ...
    def visitBinaryExpression(self, binaryExpression: org.codehaus.groovy.ast.expr.BinaryExpression) -> None: ...
    def visitBlockStatement(self, blockStatement: org.codehaus.groovy.ast.stmt.BlockStatement) -> None: ...
    def visitCatchStatement(self, catchStatement: org.codehaus.groovy.ast.stmt.CatchStatement) -> None: ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitClosureExpression(self, closureExpression: org.codehaus.groovy.ast.expr.ClosureExpression) -> None: ...
    def visitConstructorCallExpression(self, constructorCallExpression: org.codehaus.groovy.ast.expr.ConstructorCallExpression) -> None: ...
    def visitDeclarationExpression(self, declarationExpression: org.codehaus.groovy.ast.expr.DeclarationExpression) -> None: ...
    def visitField(self, fieldNode: org.codehaus.groovy.ast.FieldNode) -> None: ...
    def visitFieldExpression(self, fieldExpression: org.codehaus.groovy.ast.expr.FieldExpression) -> None: ...
    def visitForLoop(self, forStatement: org.codehaus.groovy.ast.stmt.ForStatement) -> None: ...
    def visitIfElse(self, ifStatement: org.codehaus.groovy.ast.stmt.IfStatement) -> None: ...
    def visitMethodCallExpression(self, methodCallExpression: org.codehaus.groovy.ast.expr.MethodCallExpression) -> None: ...
    def visitProperty(self, propertyNode: org.codehaus.groovy.ast.PropertyNode) -> None: ...
    def visitPropertyExpression(self, propertyExpression: org.codehaus.groovy.ast.expr.PropertyExpression) -> None: ...
    def visitVariableExpression(self, variableExpression: org.codehaus.groovy.ast.expr.VariableExpression) -> None: ...

class Verifier(org.codehaus.groovy.ast.GroovyClassVisitor, groovyjarjarasm.asm.Opcodes):
    STATIC_METACLASS_BOOL: typing.ClassVar[str] = ...
    SWAP_INIT: typing.ClassVar[str] = ...
    INITIAL_EXPRESSION: typing.ClassVar[str] = ...
    DEFAULT_PARAMETER_GENERATED: typing.ClassVar[str] = ...
    def __init__(self): ...
    @staticmethod
    def capitalize(string: str) -> str: ...
    def getClassNode(self) -> org.codehaus.groovy.ast.ClassNode: ...
    def getMethodNode(self) -> org.codehaus.groovy.ast.MethodNode: ...
    @staticmethod
    def getTimestamp(class_: typing.Type) -> int: ...
    @staticmethod
    def getTimestampFromFieldName(string: str) -> int: ...
    @staticmethod
    def transformToPrimitiveConstantIfPossible(constantExpression: org.codehaus.groovy.ast.expr.ConstantExpression) -> org.codehaus.groovy.ast.expr.ConstantExpression: ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitConstructor(self, constructorNode: org.codehaus.groovy.ast.ConstructorNode) -> None: ...
    def visitField(self, fieldNode: org.codehaus.groovy.ast.FieldNode) -> None: ...
    def visitGenericType(self, genericsType: org.codehaus.groovy.ast.GenericsType) -> None: ...
    def visitMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...
    def visitProperty(self, propertyNode: org.codehaus.groovy.ast.PropertyNode) -> None: ...
    class DefaultArgsAction:
        def call(self, argumentListExpression: org.codehaus.groovy.ast.expr.ArgumentListExpression, parameterArray: typing.Union[typing.List[org.codehaus.groovy.ast.Parameter], jpype.JArray], methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...

class VerifierCodeVisitor(org.codehaus.groovy.ast.CodeVisitorSupport, groovyjarjarasm.asm.Opcodes):
    @staticmethod
    def assertValidIdentifier(string: str, string2: str, aSTNode: org.codehaus.groovy.ast.ASTNode) -> None: ...
    def visitConstructorCallExpression(self, constructorCallExpression: org.codehaus.groovy.ast.expr.ConstructorCallExpression) -> None: ...
    def visitFieldExpression(self, fieldExpression: org.codehaus.groovy.ast.expr.FieldExpression) -> None: ...
    def visitForLoop(self, forStatement: org.codehaus.groovy.ast.stmt.ForStatement) -> None: ...
    def visitListExpression(self, listExpression: org.codehaus.groovy.ast.expr.ListExpression) -> None: ...
    def visitVariableExpression(self, variableExpression: org.codehaus.groovy.ast.expr.VariableExpression) -> None: ...

class genArrayAccess(groovy.lang.Script):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, binding: groovy.lang.Binding): ...
    def genInners(self) -> typing.Any: ...
    @staticmethod
    def main(*string: str) -> None: ...
    @typing.overload
    def run(self) -> typing.Any: ...
    @typing.overload
    def run(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class genArrays(groovy.lang.Script):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, binding: groovy.lang.Binding): ...
    def genMethod(self, int: int) -> typing.Any: ...
    def genMethods(self) -> typing.Any: ...
    @staticmethod
    def main(*string: str) -> None: ...
    @typing.overload
    def run(self) -> typing.Any: ...
    @typing.overload
    def run(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class genDgmMath(groovy.lang.Script):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, binding: groovy.lang.Binding): ...
    def getMath(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @staticmethod
    def main(*string: str) -> None: ...
    @typing.overload
    def run(self) -> typing.Any: ...
    @typing.overload
    def run(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class genMathModification(groovy.lang.Script):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, binding: groovy.lang.Binding): ...
    def getMath(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    def isFloatingPoint(self, object: typing.Any) -> typing.Any: ...
    def isLong(self, object: typing.Any) -> typing.Any: ...
    @staticmethod
    def main(*string: str) -> None: ...
    @typing.overload
    def run(self) -> typing.Any: ...
    @typing.overload
    def run(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class AsmClassGenerator(ClassGenerator):
    setField: typing.ClassVar[org.codehaus.groovy.classgen.asm.MethodCallerMultiAdapter] = ...
    getField: typing.ClassVar[org.codehaus.groovy.classgen.asm.MethodCallerMultiAdapter] = ...
    setGroovyObjectField: typing.ClassVar[org.codehaus.groovy.classgen.asm.MethodCallerMultiAdapter] = ...
    getGroovyObjectField: typing.ClassVar[org.codehaus.groovy.classgen.asm.MethodCallerMultiAdapter] = ...
    setProperty: typing.ClassVar[org.codehaus.groovy.classgen.asm.MethodCallerMultiAdapter] = ...
    CREATE_DEBUG_INFO: typing.ClassVar[bool] = ...
    CREATE_LINE_NUMBER_INFO: typing.ClassVar[bool] = ...
    ASM_DEBUG: typing.ClassVar[bool] = ...
    MINIMUM_BYTECODE_VERSION: typing.ClassVar[str] = ...
    def __init__(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, generatorContext: GeneratorContext, classVisitor: groovyjarjarasm.asm.ClassVisitor, string: str): ...
    def addInnerClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> bool: ...
    @staticmethod
    def argumentSize(expression: org.codehaus.groovy.ast.expr.Expression) -> int: ...
    @staticmethod
    def containsSpreadExpression(expression: org.codehaus.groovy.ast.expr.Expression) -> bool: ...
    def despreadList(self, list: java.util.List, boolean: bool) -> None: ...
    def getController(self) -> org.codehaus.groovy.classgen.asm.WriterController: ...
    @staticmethod
    def getDeclaredFieldOfCurrentClassOrAccessibleFieldOfSuper(classNode: org.codehaus.groovy.ast.ClassNode, classNode2: org.codehaus.groovy.ast.ClassNode, string: str, boolean: bool) -> org.codehaus.groovy.ast.FieldNode: ...
    def getSourceUnit(self) -> org.codehaus.groovy.control.SourceUnit: ...
    @staticmethod
    def isNullConstant(expression: org.codehaus.groovy.ast.expr.Expression) -> bool: ...
    @staticmethod
    def isThisExpression(expression: org.codehaus.groovy.ast.expr.Expression) -> bool: ...
    def loadInstanceField(self, fieldExpression: org.codehaus.groovy.ast.expr.FieldExpression) -> None: ...
    def loadStaticField(self, fieldExpression: org.codehaus.groovy.ast.expr.FieldExpression) -> None: ...
    def loadWrapper(self, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...
    def onLineNumber(self, aSTNode: org.codehaus.groovy.ast.ASTNode, string: str) -> None: ...
    @staticmethod
    def samePackages(string: str, string2: str) -> bool: ...
    def throwException(self, string: str) -> None: ...
    def visitAnnotations(self, annotatedNode: org.codehaus.groovy.ast.AnnotatedNode) -> None: ...
    def visitArgumentlistExpression(self, argumentListExpression: org.codehaus.groovy.ast.expr.ArgumentListExpression) -> None: ...
    def visitArrayExpression(self, arrayExpression: org.codehaus.groovy.ast.expr.ArrayExpression) -> None: ...
    def visitAssertStatement(self, assertStatement: org.codehaus.groovy.ast.stmt.AssertStatement) -> None: ...
    def visitAttributeExpression(self, attributeExpression: org.codehaus.groovy.ast.expr.AttributeExpression) -> None: ...
    def visitBinaryExpression(self, binaryExpression: org.codehaus.groovy.ast.expr.BinaryExpression) -> None: ...
    def visitBitwiseNegationExpression(self, bitwiseNegationExpression: org.codehaus.groovy.ast.expr.BitwiseNegationExpression) -> None: ...
    def visitBlockStatement(self, blockStatement: org.codehaus.groovy.ast.stmt.BlockStatement) -> None: ...
    def visitBooleanExpression(self, booleanExpression: org.codehaus.groovy.ast.expr.BooleanExpression) -> None: ...
    def visitBreakStatement(self, breakStatement: org.codehaus.groovy.ast.stmt.BreakStatement) -> None: ...
    def visitBytecodeExpression(self, bytecodeExpression: BytecodeExpression) -> None: ...
    def visitBytecodeSequence(self, bytecodeSequence: BytecodeSequence) -> None: ...
    def visitCaseStatement(self, caseStatement: org.codehaus.groovy.ast.stmt.CaseStatement) -> None: ...
    def visitCastExpression(self, castExpression: org.codehaus.groovy.ast.expr.CastExpression) -> None: ...
    def visitCatchStatement(self, catchStatement: org.codehaus.groovy.ast.stmt.CatchStatement) -> None: ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitClassExpression(self, classExpression: org.codehaus.groovy.ast.expr.ClassExpression) -> None: ...
    def visitClosureExpression(self, closureExpression: org.codehaus.groovy.ast.expr.ClosureExpression) -> None: ...
    def visitClosureListExpression(self, closureListExpression: org.codehaus.groovy.ast.expr.ClosureListExpression) -> None: ...
    def visitConstantExpression(self, constantExpression: org.codehaus.groovy.ast.expr.ConstantExpression) -> None: ...
    def visitConstructor(self, constructorNode: org.codehaus.groovy.ast.ConstructorNode) -> None: ...
    def visitConstructorCallExpression(self, constructorCallExpression: org.codehaus.groovy.ast.expr.ConstructorCallExpression) -> None: ...
    def visitContinueStatement(self, continueStatement: org.codehaus.groovy.ast.stmt.ContinueStatement) -> None: ...
    def visitDeclarationExpression(self, declarationExpression: org.codehaus.groovy.ast.expr.DeclarationExpression) -> None: ...
    def visitDoWhileLoop(self, doWhileStatement: org.codehaus.groovy.ast.stmt.DoWhileStatement) -> None: ...
    def visitExpressionStatement(self, expressionStatement: org.codehaus.groovy.ast.stmt.ExpressionStatement) -> None: ...
    def visitField(self, fieldNode: org.codehaus.groovy.ast.FieldNode) -> None: ...
    def visitFieldExpression(self, fieldExpression: org.codehaus.groovy.ast.expr.FieldExpression) -> None: ...
    def visitForLoop(self, forStatement: org.codehaus.groovy.ast.stmt.ForStatement) -> None: ...
    def visitGStringExpression(self, gStringExpression: org.codehaus.groovy.ast.expr.GStringExpression) -> None: ...
    def visitGenericType(self, genericsType: org.codehaus.groovy.ast.GenericsType) -> None: ...
    def visitIfElse(self, ifStatement: org.codehaus.groovy.ast.stmt.IfStatement) -> None: ...
    def visitListExpression(self, listExpression: org.codehaus.groovy.ast.expr.ListExpression) -> None: ...
    def visitMapEntryExpression(self, mapEntryExpression: org.codehaus.groovy.ast.expr.MapEntryExpression) -> None: ...
    def visitMapExpression(self, mapExpression: org.codehaus.groovy.ast.expr.MapExpression) -> None: ...
    def visitMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...
    def visitMethodCallExpression(self, methodCallExpression: org.codehaus.groovy.ast.expr.MethodCallExpression) -> None: ...
    def visitMethodPointerExpression(self, methodPointerExpression: org.codehaus.groovy.ast.expr.MethodPointerExpression) -> None: ...
    def visitNotExpression(self, notExpression: org.codehaus.groovy.ast.expr.NotExpression) -> None: ...
    def visitPostfixExpression(self, postfixExpression: org.codehaus.groovy.ast.expr.PostfixExpression) -> None: ...
    def visitPrefixExpression(self, prefixExpression: org.codehaus.groovy.ast.expr.PrefixExpression) -> None: ...
    def visitProperty(self, propertyNode: org.codehaus.groovy.ast.PropertyNode) -> None: ...
    def visitPropertyExpression(self, propertyExpression: org.codehaus.groovy.ast.expr.PropertyExpression) -> None: ...
    def visitRangeExpression(self, rangeExpression: org.codehaus.groovy.ast.expr.RangeExpression) -> None: ...
    def visitReturnStatement(self, returnStatement: org.codehaus.groovy.ast.stmt.ReturnStatement) -> None: ...
    def visitSpreadExpression(self, spreadExpression: org.codehaus.groovy.ast.expr.SpreadExpression) -> None: ...
    def visitSpreadMapExpression(self, spreadMapExpression: org.codehaus.groovy.ast.expr.SpreadMapExpression) -> None: ...
    def visitStaticMethodCallExpression(self, staticMethodCallExpression: org.codehaus.groovy.ast.expr.StaticMethodCallExpression) -> None: ...
    def visitSwitch(self, switchStatement: org.codehaus.groovy.ast.stmt.SwitchStatement) -> None: ...
    def visitSynchronizedStatement(self, synchronizedStatement: org.codehaus.groovy.ast.stmt.SynchronizedStatement) -> None: ...
    def visitTernaryExpression(self, ternaryExpression: org.codehaus.groovy.ast.expr.TernaryExpression) -> None: ...
    def visitThrowStatement(self, throwStatement: org.codehaus.groovy.ast.stmt.ThrowStatement) -> None: ...
    def visitTryCatchFinally(self, tryCatchStatement: org.codehaus.groovy.ast.stmt.TryCatchStatement) -> None: ...
    def visitTupleExpression(self, tupleExpression: org.codehaus.groovy.ast.expr.TupleExpression) -> None: ...
    def visitUnaryMinusExpression(self, unaryMinusExpression: org.codehaus.groovy.ast.expr.UnaryMinusExpression) -> None: ...
    def visitUnaryPlusExpression(self, unaryPlusExpression: org.codehaus.groovy.ast.expr.UnaryPlusExpression) -> None: ...
    def visitVariableExpression(self, variableExpression: org.codehaus.groovy.ast.expr.VariableExpression) -> None: ...
    def visitWhileLoop(self, whileStatement: org.codehaus.groovy.ast.stmt.WhileStatement) -> None: ...

class DummyClassGenerator(ClassGenerator):
    def __init__(self, generatorContext: GeneratorContext, classVisitor: groovyjarjarasm.asm.ClassVisitor, classLoader: java.lang.ClassLoader, string: str): ...
    def visitAnnotations(self, annotatedNode: org.codehaus.groovy.ast.AnnotatedNode) -> None: ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitConstructor(self, constructorNode: org.codehaus.groovy.ast.ConstructorNode) -> None: ...
    def visitField(self, fieldNode: org.codehaus.groovy.ast.FieldNode) -> None: ...
    def visitMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...
    def visitProperty(self, propertyNode: org.codehaus.groovy.ast.PropertyNode) -> None: ...

class InnerClassCompletionVisitor(InnerClassVisitorHelper, groovyjarjarasm.asm.Opcodes):
    def __init__(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitConstructor(self, constructorNode: org.codehaus.groovy.ast.ConstructorNode) -> None: ...

class InnerClassVisitor(InnerClassVisitorHelper, groovyjarjarasm.asm.Opcodes):
    def __init__(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitClosureExpression(self, closureExpression: org.codehaus.groovy.ast.expr.ClosureExpression) -> None: ...
    def visitConstructorCallExpression(self, constructorCallExpression: org.codehaus.groovy.ast.expr.ConstructorCallExpression) -> None: ...
    def visitField(self, fieldNode: org.codehaus.groovy.ast.FieldNode) -> None: ...
    def visitProperty(self, propertyNode: org.codehaus.groovy.ast.PropertyNode) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.classgen")``.

    AnnotationVisitor: typing.Type[AnnotationVisitor]
    AsmClassGenerator: typing.Type[AsmClassGenerator]
    BytecodeExpression: typing.Type[BytecodeExpression]
    BytecodeInstruction: typing.Type[BytecodeInstruction]
    BytecodeSequence: typing.Type[BytecodeSequence]
    ClassCompletionVerifier: typing.Type[ClassCompletionVerifier]
    ClassGenerator: typing.Type[ClassGenerator]
    ClassGeneratorException: typing.Type[ClassGeneratorException]
    DummyClassGenerator: typing.Type[DummyClassGenerator]
    EnumCompletionVisitor: typing.Type[EnumCompletionVisitor]
    EnumVisitor: typing.Type[EnumVisitor]
    ExtendedVerifier: typing.Type[ExtendedVerifier]
    FinalVariableAnalyzer: typing.Type[FinalVariableAnalyzer]
    GeneratorContext: typing.Type[GeneratorContext]
    InnerClassCompletionVisitor: typing.Type[InnerClassCompletionVisitor]
    InnerClassVisitor: typing.Type[InnerClassVisitor]
    InnerClassVisitorHelper: typing.Type[InnerClassVisitorHelper]
    ReturnAdder: typing.Type[ReturnAdder]
    VariableScopeVisitor: typing.Type[VariableScopeVisitor]
    Verifier: typing.Type[Verifier]
    VerifierCodeVisitor: typing.Type[VerifierCodeVisitor]
    genArrayAccess: typing.Type[genArrayAccess]
    genArrays: typing.Type[genArrays]
    genDgmMath: typing.Type[genDgmMath]
    genMathModification: typing.Type[genMathModification]
    asm: org.codehaus.groovy.classgen.asm.__module_protocol__
