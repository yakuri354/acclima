
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import java.io
import java.util
import javax.script
import typing



class GroovyCompiledScript(javax.script.CompiledScript):
    def __init__(self, groovyScriptEngineImpl: 'GroovyScriptEngineImpl', class_: typing.Type[typing.Any]): ...
    @typing.overload
    def eval(self) -> typing.Any: ...
    @typing.overload
    def eval(self, bindings: javax.script.Bindings) -> typing.Any: ...
    @typing.overload
    def eval(self, scriptContext: javax.script.ScriptContext) -> typing.Any: ...
    def getEngine(self) -> javax.script.ScriptEngine: ...

class GroovyScriptEngineFactory(javax.script.ScriptEngineFactory):
    def __init__(self): ...
    def getEngineName(self) -> str: ...
    def getEngineVersion(self) -> str: ...
    def getExtensions(self) -> java.util.List[str]: ...
    def getLanguageName(self) -> str: ...
    def getLanguageVersion(self) -> str: ...
    def getMethodCallSyntax(self, string: str, string2: str, *string3: str) -> str: ...
    def getMimeTypes(self) -> java.util.List[str]: ...
    def getNames(self) -> java.util.List[str]: ...
    def getOutputStatement(self, string: str) -> str: ...
    def getParameter(self, string: str) -> typing.Any: ...
    def getProgram(self, *string: str) -> str: ...
    def getScriptEngine(self) -> javax.script.ScriptEngine: ...

class GroovyScriptEngineImpl(javax.script.AbstractScriptEngine, javax.script.Compilable, javax.script.Invocable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, groovyClassLoader: groovy.lang.GroovyClassLoader): ...
    @typing.overload
    def compile(self, reader: java.io.Reader) -> javax.script.CompiledScript: ...
    @typing.overload
    def compile(self, string: str) -> javax.script.CompiledScript: ...
    def createBindings(self) -> javax.script.Bindings: ...
    @typing.overload
    def eval(self, reader: java.io.Reader) -> typing.Any: ...
    @typing.overload
    def eval(self, reader: java.io.Reader, bindings: javax.script.Bindings) -> typing.Any: ...
    @typing.overload
    def eval(self, string: str) -> typing.Any: ...
    @typing.overload
    def eval(self, string: str, bindings: javax.script.Bindings) -> typing.Any: ...
    @typing.overload
    def eval(self, reader: java.io.Reader, scriptContext: javax.script.ScriptContext) -> typing.Any: ...
    @typing.overload
    def eval(self, string: str, scriptContext: javax.script.ScriptContext) -> typing.Any: ...
    def getClassLoader(self) -> groovy.lang.GroovyClassLoader: ...
    def getFactory(self) -> javax.script.ScriptEngineFactory: ...
    _getInterface_0__T = typing.TypeVar('_getInterface_0__T')  # <T>
    _getInterface_1__T = typing.TypeVar('_getInterface_1__T')  # <T>
    @typing.overload
    def getInterface(self, class_: typing.Type[_getInterface_0__T]) -> _getInterface_0__T: ...
    @typing.overload
    def getInterface(self, object: typing.Any, class_: typing.Type[_getInterface_1__T]) -> _getInterface_1__T: ...
    def invokeFunction(self, string: str, *object: typing.Any) -> typing.Any: ...
    def invokeMethod(self, object: typing.Any, string: str, *object2: typing.Any) -> typing.Any: ...
    def setClassLoader(self, groovyClassLoader: groovy.lang.GroovyClassLoader) -> None: ...

class ScriptExtensions:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def eval(scriptEngine: javax.script.ScriptEngine, reader: java.io.Reader, binding: groovy.lang.Binding) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def eval(scriptEngine: javax.script.ScriptEngine, string: str, binding: groovy.lang.Binding) -> typing.Any: ...

class ScriptStaticExtensions:
    def __init__(self): ...
    @staticmethod
    def $static_propertyMissing(scriptEngineManager: javax.script.ScriptEngineManager, string: str) -> javax.script.ScriptEngine: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.jsr223")``.

    GroovyCompiledScript: typing.Type[GroovyCompiledScript]
    GroovyScriptEngineFactory: typing.Type[GroovyScriptEngineFactory]
    GroovyScriptEngineImpl: typing.Type[GroovyScriptEngineImpl]
    ScriptExtensions: typing.Type[ScriptExtensions]
    ScriptStaticExtensions: typing.Type[ScriptStaticExtensions]
