
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import jpype
import jpype.protocol
import org.apache.tools.ant
import org.apache.tools.ant.taskdefs
import org.apache.tools.ant.types
import org.codehaus.groovy.control
import org.codehaus.groovy.tools.groovydoc
import typing



class AntProjectPropertiesDelegate(java.util.Hashtable):
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map, typing.Mapping]): ...
    @typing.overload
    def __init__(self, project: org.apache.tools.ant.Project): ...
    def clear(self) -> None: ...
    def clone(self) -> typing.Any: ...
    def contains(self, object: typing.Any) -> bool: ...
    def containsKey(self, object: typing.Any) -> bool: ...
    def containsValue(self, object: typing.Any) -> bool: ...
    def elements(self) -> java.util.Enumeration: ...
    def entrySet(self) -> java.util.Set: ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, object: typing.Any) -> typing.Any: ...
    def hashCode(self) -> int: ...
    def isEmpty(self) -> bool: ...
    def keySet(self) -> java.util.Set: ...
    def keys(self) -> java.util.Enumeration: ...
    def put(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    def putAll(self, map: typing.Union[java.util.Map, typing.Mapping]) -> None: ...
    @typing.overload
    def remove(self, object: typing.Any, object2: typing.Any) -> bool: ...
    @typing.overload
    def remove(self, object: typing.Any) -> typing.Any: ...
    def size(self) -> int: ...
    def toString(self) -> str: ...
    def values(self) -> java.util.Collection: ...

class CompileTaskSupport(org.apache.tools.ant.taskdefs.MatchingTask):
    def __init__(self): ...
    def createClasspath(self) -> org.apache.tools.ant.types.Path: ...
    def createConfiguration(self) -> org.codehaus.groovy.control.CompilerConfiguration: ...
    def createSrc(self) -> org.apache.tools.ant.types.Path: ...
    def execute(self) -> None: ...
    def getClasspath(self) -> org.apache.tools.ant.types.Path: ...
    def getFailonerror(self) -> bool: ...
    def getSrcdir(self) -> org.apache.tools.ant.types.Path: ...
    def setClasspath(self, path: org.apache.tools.ant.types.Path) -> None: ...
    def setClasspathRef(self, reference: org.apache.tools.ant.types.Reference) -> None: ...
    def setDestdir(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def setFailonerror(self, boolean: bool) -> None: ...
    def setSrcdir(self, path: org.apache.tools.ant.types.Path) -> None: ...

class FileIterator(java.util.Iterator):
    @typing.overload
    def __init__(self, project: org.apache.tools.ant.Project, iterator: java.util.Iterator[org.apache.tools.ant.types.FileSet]): ...
    @typing.overload
    def __init__(self, project: org.apache.tools.ant.Project, iterator: java.util.Iterator[org.apache.tools.ant.types.FileSet], boolean: bool): ...
    def hasNext(self) -> bool: ...
    def next(self) -> typing.Any: ...
    def remove(self) -> None: ...

class FileScanner(org.apache.tools.ant.Task):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, project: org.apache.tools.ant.Project): ...
    def addFileset(self, fileSet: org.apache.tools.ant.types.FileSet) -> None: ...
    def clear(self) -> None: ...
    def directories(self) -> java.util.Iterator: ...
    def hasFiles(self) -> bool: ...
    def iterator(self) -> java.util.Iterator: ...

class FileSystemCompilerFacade:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class Groovy(org.apache.tools.ant.taskdefs.Java):
    def __init__(self): ...
    def addFileset(self, fileSet: org.apache.tools.ant.types.FileSet) -> None: ...
    def addText(self, string: str) -> None: ...
    def createArg(self) -> org.apache.tools.ant.types.Commandline.Argument: ...
    def createClasspath(self) -> org.apache.tools.ant.types.Path: ...
    def execute(self) -> None: ...
    def getClasspath(self) -> org.apache.tools.ant.types.Path: ...
    def getParameters(self) -> bool: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def setAppend(self, boolean: bool) -> None: ...
    def setClasspath(self, path: org.apache.tools.ant.types.Path) -> None: ...
    def setClasspathRef(self, reference: org.apache.tools.ant.types.Reference) -> None: ...
    def setConfigscript(self, string: str) -> None: ...
    def setContextClassLoader(self, boolean: bool) -> None: ...
    def setFork(self, boolean: bool) -> None: ...
    def setIncludeAntRuntime(self, boolean: bool) -> None: ...
    def setIndy(self, boolean: bool) -> None: ...
    def setOutput(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def setParameters(self, boolean: bool) -> None: ...
    def setScriptBaseClass(self, string: str) -> None: ...
    def setSrc(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def setStacktrace(self, boolean: bool) -> None: ...
    def setUseGroovyShell(self, boolean: bool) -> None: ...

class Groovyc(org.apache.tools.ant.taskdefs.MatchingTask):
    def __init__(self): ...
    def addConfiguredJavac(self, javac: org.apache.tools.ant.taskdefs.Javac) -> None: ...
    def createClasspath(self) -> org.apache.tools.ant.types.Path: ...
    def createSourcepath(self) -> org.apache.tools.ant.types.Path: ...
    def createSrc(self) -> org.apache.tools.ant.types.Path: ...
    def execute(self) -> None: ...
    def getClasspath(self) -> org.apache.tools.ant.types.Path: ...
    def getConfigscript(self) -> str: ...
    def getDestdir(self) -> java.io.File: ...
    def getEncoding(self) -> str: ...
    def getExecutable(self) -> str: ...
    def getFailonerror(self) -> bool: ...
    def getFileList(self) -> typing.MutableSequence[java.io.File]: ...
    def getForceLookupUnnamedFiles(self) -> bool: ...
    def getIncludeantruntime(self) -> bool: ...
    def getIncludejavaruntime(self) -> bool: ...
    def getIndy(self) -> bool: ...
    def getKeepStubs(self) -> bool: ...
    def getListfiles(self) -> bool: ...
    def getMemoryInitialSize(self) -> str: ...
    def getMemoryMaximumSize(self) -> str: ...
    def getParameters(self) -> bool: ...
    def getScriptBaseClass(self) -> str: ...
    def getScriptExtension(self) -> str: ...
    def getSourcepath(self) -> org.apache.tools.ant.types.Path: ...
    def getSrcdir(self) -> org.apache.tools.ant.types.Path: ...
    def getStubdir(self) -> java.io.File: ...
    def getTargetBytecode(self) -> str: ...
    def getTaskSuccess(self) -> bool: ...
    def getVerbose(self) -> bool: ...
    def isIncludeDestClasses(self) -> bool: ...
    def setClasspath(self, path: org.apache.tools.ant.types.Path) -> None: ...
    def setClasspathRef(self, reference: org.apache.tools.ant.types.Reference) -> None: ...
    def setConfigscript(self, string: str) -> None: ...
    def setDestdir(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def setEncoding(self, string: str) -> None: ...
    def setErrorProperty(self, string: str) -> None: ...
    def setExecutable(self, string: str) -> None: ...
    def setFailonerror(self, boolean: bool) -> None: ...
    def setForceLookupUnnamedFiles(self, boolean: bool) -> None: ...
    def setFork(self, boolean: bool) -> None: ...
    def setIncludeDestClasses(self, boolean: bool) -> None: ...
    def setIncludeantruntime(self, boolean: bool) -> None: ...
    def setIncludejavaruntime(self, boolean: bool) -> None: ...
    def setIndy(self, boolean: bool) -> None: ...
    def setJavaHome(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def setKeepStubs(self, boolean: bool) -> None: ...
    def setListfiles(self, boolean: bool) -> None: ...
    def setMemoryInitialSize(self, string: str) -> None: ...
    def setMemoryMaximumSize(self, string: str) -> None: ...
    def setParameters(self, boolean: bool) -> None: ...
    def setProceed(self, boolean: bool) -> None: ...
    def setScriptBaseClass(self, string: str) -> None: ...
    def setScriptExtension(self, string: str) -> None: ...
    def setSourcepath(self, path: org.apache.tools.ant.types.Path) -> None: ...
    def setSourcepathRef(self, reference: org.apache.tools.ant.types.Reference) -> None: ...
    def setSrcdir(self, path: org.apache.tools.ant.types.Path) -> None: ...
    def setStacktrace(self, boolean: bool) -> None: ...
    def setStubdir(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def setTargetBytecode(self, string: str) -> None: ...
    def setUpdatedProperty(self, string: str) -> None: ...
    def setVerbose(self, boolean: bool) -> None: ...

class Groovydoc(org.apache.tools.ant.Task):
    def __init__(self): ...
    def createLink(self) -> org.codehaus.groovy.tools.groovydoc.LinkArgument: ...
    def execute(self) -> None: ...
    def setAccess(self, string: str) -> None: ...
    def setAuthor(self, boolean: bool) -> None: ...
    def setCharset(self, string: str) -> None: ...
    def setDestdir(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def setDoctitle(self, string: str) -> None: ...
    def setExtensions(self, string: str) -> None: ...
    def setFileEncoding(self, string: str) -> None: ...
    def setFooter(self, string: str) -> None: ...
    def setHeader(self, string: str) -> None: ...
    def setIncludeMainForScripts(self, boolean: bool) -> None: ...
    def setNoTimestamp(self, boolean: bool) -> None: ...
    def setNoVersionStamp(self, boolean: bool) -> None: ...
    def setOverview(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def setPackage(self, boolean: bool) -> None: ...
    def setPackagenames(self, string: str) -> None: ...
    def setPrivate(self, boolean: bool) -> None: ...
    def setProcessScripts(self, boolean: bool) -> None: ...
    def setProtected(self, boolean: bool) -> None: ...
    def setPublic(self, boolean: bool) -> None: ...
    def setSourcepath(self, path: org.apache.tools.ant.types.Path) -> None: ...
    def setStyleSheetFile(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def setUse(self, boolean: bool) -> None: ...
    def setWindowtitle(self, string: str) -> None: ...

class LoggingHelper:
    def __init__(self, task: org.apache.tools.ant.Task): ...
    def debug(self, string: str) -> None: ...
    @typing.overload
    def error(self, string: str) -> None: ...
    @typing.overload
    def error(self, string: str, throwable: java.lang.Throwable) -> None: ...
    def info(self, string: str) -> None: ...
    def verbose(self, string: str) -> None: ...
    def warn(self, string: str) -> None: ...

class RootLoaderRef(org.apache.tools.ant.taskdefs.MatchingTask):
    def __init__(self): ...
    def createClasspath(self) -> org.apache.tools.ant.types.Path: ...
    def execute(self) -> None: ...
    def setClasspath(self, path: org.apache.tools.ant.types.Path) -> None: ...
    def setClasspathRef(self, reference: org.apache.tools.ant.types.Reference) -> None: ...
    def setRef(self, string: str) -> None: ...

class UberCompileTask(org.apache.tools.ant.Task):
    def __init__(self): ...
    def createClasspath(self) -> org.apache.tools.ant.types.Path: ...
    def createGeneratestubs(self) -> 'UberCompileTask.GenStubsAdapter': ...
    def createGroovyc(self) -> 'UberCompileTask.GroovycAdapter': ...
    def createJavac(self) -> 'UberCompileTask.JavacAdapter': ...
    def createSrc(self) -> org.apache.tools.ant.types.Path: ...
    def execute(self) -> None: ...
    def getClasspath(self) -> org.apache.tools.ant.types.Path: ...
    def getSrcdir(self) -> org.apache.tools.ant.types.Path: ...
    def setClasspath(self, path: org.apache.tools.ant.types.Path) -> None: ...
    def setClasspathRef(self, reference: org.apache.tools.ant.types.Reference) -> None: ...
    def setDestdir(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def setSrcdir(self, path: org.apache.tools.ant.types.Path) -> None: ...
    class GenStubsAdapter: ...
    class GroovycAdapter: ...
    class JavacAdapter: ...

class GenerateStubsTask(CompileTaskSupport):
    def __init__(self): ...

class GroovycTask(CompileTaskSupport):
    def __init__(self): ...
    def setForce(self, boolean: bool) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.ant")``.

    AntProjectPropertiesDelegate: typing.Type[AntProjectPropertiesDelegate]
    CompileTaskSupport: typing.Type[CompileTaskSupport]
    FileIterator: typing.Type[FileIterator]
    FileScanner: typing.Type[FileScanner]
    FileSystemCompilerFacade: typing.Type[FileSystemCompilerFacade]
    GenerateStubsTask: typing.Type[GenerateStubsTask]
    Groovy: typing.Type[Groovy]
    Groovyc: typing.Type[Groovyc]
    GroovycTask: typing.Type[GroovycTask]
    Groovydoc: typing.Type[Groovydoc]
    LoggingHelper: typing.Type[LoggingHelper]
    RootLoaderRef: typing.Type[RootLoaderRef]
    UberCompileTask: typing.Type[UberCompileTask]
