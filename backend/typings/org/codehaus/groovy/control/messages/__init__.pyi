
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import org.codehaus.groovy.control
import org.codehaus.groovy.syntax
import typing



class Message:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def create(string: str, object: typing.Any, processingUnit: org.codehaus.groovy.control.ProcessingUnit) -> 'Message': ...
    @typing.overload
    @staticmethod
    def create(string: str, processingUnit: org.codehaus.groovy.control.ProcessingUnit) -> 'Message': ...
    @typing.overload
    @staticmethod
    def create(syntaxException: org.codehaus.groovy.syntax.SyntaxException, sourceUnit: org.codehaus.groovy.control.SourceUnit) -> 'Message': ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter, janitor: org.codehaus.groovy.control.Janitor) -> None: ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter) -> None: ...

class ExceptionMessage(Message):
    def __init__(self, exception: java.lang.Exception, boolean: bool, processingUnit: org.codehaus.groovy.control.ProcessingUnit): ...
    def getCause(self) -> java.lang.Exception: ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter) -> None: ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter, janitor: org.codehaus.groovy.control.Janitor) -> None: ...

class SimpleMessage(Message):
    @typing.overload
    def __init__(self, string: str, object: typing.Any, processingUnit: org.codehaus.groovy.control.ProcessingUnit): ...
    @typing.overload
    def __init__(self, string: str, processingUnit: org.codehaus.groovy.control.ProcessingUnit): ...
    def getMessage(self) -> str: ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter) -> None: ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter, janitor: org.codehaus.groovy.control.Janitor) -> None: ...

class SyntaxErrorMessage(Message):
    def __init__(self, syntaxException: org.codehaus.groovy.syntax.SyntaxException, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    def getCause(self) -> org.codehaus.groovy.syntax.SyntaxException: ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter) -> None: ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter, janitor: org.codehaus.groovy.control.Janitor) -> None: ...

class LocatedMessage(SimpleMessage):
    @typing.overload
    def __init__(self, string: str, object: typing.Any, cSTNode: org.codehaus.groovy.syntax.CSTNode, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    @typing.overload
    def __init__(self, string: str, cSTNode: org.codehaus.groovy.syntax.CSTNode, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter) -> None: ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter, janitor: org.codehaus.groovy.control.Janitor) -> None: ...

class WarningMessage(LocatedMessage):
    NONE: typing.ClassVar[int] = ...
    LIKELY_ERRORS: typing.ClassVar[int] = ...
    POSSIBLE_ERRORS: typing.ClassVar[int] = ...
    PARANOIA: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, string: str, object: typing.Any, cSTNode: org.codehaus.groovy.syntax.CSTNode, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    @typing.overload
    def __init__(self, int: int, string: str, cSTNode: org.codehaus.groovy.syntax.CSTNode, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
    @typing.overload
    def isRelevant(self, int: int) -> bool: ...
    @typing.overload
    @staticmethod
    def isRelevant(int: int, int2: int) -> bool: ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter) -> None: ...
    @typing.overload
    def write(self, printWriter: java.io.PrintWriter, janitor: org.codehaus.groovy.control.Janitor) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.control.messages")``.

    ExceptionMessage: typing.Type[ExceptionMessage]
    LocatedMessage: typing.Type[LocatedMessage]
    Message: typing.Type[Message]
    SimpleMessage: typing.Type[SimpleMessage]
    SyntaxErrorMessage: typing.Type[SyntaxErrorMessage]
    WarningMessage: typing.Type[WarningMessage]
