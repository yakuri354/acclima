
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import groovy.transform
import java.lang
import java.lang.annotation
import java.util
import org.codehaus.groovy.ast
import org.codehaus.groovy.ast.expr
import org.codehaus.groovy.ast.stmt
import org.codehaus.groovy.classgen
import org.codehaus.groovy.control
import org.codehaus.groovy.control.customizers.builder
import org.codehaus.groovy.transform
import typing



class CompilationCustomizer(org.codehaus.groovy.control.CompilationUnit.PrimaryClassNodeOperation):
    def __init__(self, compilePhase: org.codehaus.groovy.control.CompilePhase): ...
    def getPhase(self) -> org.codehaus.groovy.control.CompilePhase: ...

class ASTTransformationCustomizer(CompilationCustomizer, groovy.transform.CompilationUnitAware, groovy.lang.GroovyObject):
    @typing.overload
    def __init__(self, class_: typing.Type[java.lang.annotation.Annotation]): ...
    @typing.overload
    def __init__(self, class_: typing.Type[java.lang.annotation.Annotation], classLoader: java.lang.ClassLoader): ...
    @typing.overload
    def __init__(self, class_: typing.Type[java.lang.annotation.Annotation], string: str): ...
    @typing.overload
    def __init__(self, class_: typing.Type[java.lang.annotation.Annotation], string: str, classLoader: java.lang.ClassLoader): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map, typing.Mapping], class_: typing.Type[java.lang.annotation.Annotation]): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map, typing.Mapping], class_: typing.Type[java.lang.annotation.Annotation], classLoader: java.lang.ClassLoader): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map, typing.Mapping], class_: typing.Type[java.lang.annotation.Annotation], string: str): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map, typing.Mapping], class_: typing.Type[java.lang.annotation.Annotation], string: str, classLoader: java.lang.ClassLoader): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map, typing.Mapping], aSTTransformation: org.codehaus.groovy.transform.ASTTransformation): ...
    @typing.overload
    def __init__(self, aSTTransformation: org.codehaus.groovy.transform.ASTTransformation): ...
    def call(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, generatorContext: org.codehaus.groovy.classgen.GeneratorContext, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def getTransformation(self) -> org.codehaus.groovy.transform.ASTTransformation: ...
    def setAnnotationParameters(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def setCompilationUnit(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit) -> None: ...

class DelegatingCustomizer(CompilationCustomizer):
    def __init__(self, compilationCustomizer: CompilationCustomizer): ...
    def call(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, generatorContext: org.codehaus.groovy.classgen.GeneratorContext, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...

class ImportCustomizer(CompilationCustomizer):
    def __init__(self): ...
    def addImport(self, string: str, string2: str) -> 'ImportCustomizer': ...
    def addImports(self, *string: str) -> 'ImportCustomizer': ...
    def addStarImports(self, *string: str) -> 'ImportCustomizer': ...
    @typing.overload
    def addStaticImport(self, string: str, string2: str) -> 'ImportCustomizer': ...
    @typing.overload
    def addStaticImport(self, string: str, string2: str, string3: str) -> 'ImportCustomizer': ...
    def addStaticStars(self, *string: str) -> 'ImportCustomizer': ...
    def call(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, generatorContext: org.codehaus.groovy.classgen.GeneratorContext, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...

class SecureASTCustomizer(CompilationCustomizer):
    def __init__(self): ...
    def addExpressionCheckers(self, *expressionChecker: 'SecureASTCustomizer.ExpressionChecker') -> None: ...
    def addStatementCheckers(self, *statementChecker: 'SecureASTCustomizer.StatementChecker') -> None: ...
    def call(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, generatorContext: org.codehaus.groovy.classgen.GeneratorContext, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def getConstantTypesBlackList(self) -> java.util.List[str]: ...
    def getConstantTypesWhiteList(self) -> java.util.List[str]: ...
    def getExpressionsBlacklist(self) -> java.util.List[typing.Type[org.codehaus.groovy.ast.expr.Expression]]: ...
    def getExpressionsWhitelist(self) -> java.util.List[typing.Type[org.codehaus.groovy.ast.expr.Expression]]: ...
    def getImportsBlacklist(self) -> java.util.List[str]: ...
    def getImportsWhitelist(self) -> java.util.List[str]: ...
    def getReceiversBlackList(self) -> java.util.List[str]: ...
    def getReceiversWhiteList(self) -> java.util.List[str]: ...
    def getStarImportsBlacklist(self) -> java.util.List[str]: ...
    def getStarImportsWhitelist(self) -> java.util.List[str]: ...
    def getStatementsBlacklist(self) -> java.util.List[typing.Type[org.codehaus.groovy.ast.stmt.Statement]]: ...
    def getStatementsWhitelist(self) -> java.util.List[typing.Type[org.codehaus.groovy.ast.stmt.Statement]]: ...
    def getStaticImportsBlacklist(self) -> java.util.List[str]: ...
    def getStaticImportsWhitelist(self) -> java.util.List[str]: ...
    def getStaticStarImportsBlacklist(self) -> java.util.List[str]: ...
    def getStaticStarImportsWhitelist(self) -> java.util.List[str]: ...
    def getTokensBlacklist(self) -> java.util.List[int]: ...
    def getTokensWhitelist(self) -> java.util.List[int]: ...
    def isClosuresAllowed(self) -> bool: ...
    def isIndirectImportCheckEnabled(self) -> bool: ...
    def isMethodDefinitionAllowed(self) -> bool: ...
    def isPackageAllowed(self) -> bool: ...
    def setClosuresAllowed(self, boolean: bool) -> None: ...
    def setConstantTypesBlackList(self, list: java.util.List[str]) -> None: ...
    def setConstantTypesClassesBlackList(self, list: java.util.List[typing.Type]) -> None: ...
    def setConstantTypesClassesWhiteList(self, list: java.util.List[typing.Type]) -> None: ...
    def setConstantTypesWhiteList(self, list: java.util.List[str]) -> None: ...
    def setExpressionsBlacklist(self, list: java.util.List[typing.Type[org.codehaus.groovy.ast.expr.Expression]]) -> None: ...
    def setExpressionsWhitelist(self, list: java.util.List[typing.Type[org.codehaus.groovy.ast.expr.Expression]]) -> None: ...
    def setImportsBlacklist(self, list: java.util.List[str]) -> None: ...
    def setImportsWhitelist(self, list: java.util.List[str]) -> None: ...
    def setIndirectImportCheckEnabled(self, boolean: bool) -> None: ...
    def setMethodDefinitionAllowed(self, boolean: bool) -> None: ...
    def setPackageAllowed(self, boolean: bool) -> None: ...
    def setReceiversBlackList(self, list: java.util.List[str]) -> None: ...
    def setReceiversClassesBlackList(self, list: java.util.List[typing.Type]) -> None: ...
    def setReceiversClassesWhiteList(self, list: java.util.List[typing.Type]) -> None: ...
    def setReceiversWhiteList(self, list: java.util.List[str]) -> None: ...
    def setStarImportsBlacklist(self, list: java.util.List[str]) -> None: ...
    def setStarImportsWhitelist(self, list: java.util.List[str]) -> None: ...
    def setStatementsBlacklist(self, list: java.util.List[typing.Type[org.codehaus.groovy.ast.stmt.Statement]]) -> None: ...
    def setStatementsWhitelist(self, list: java.util.List[typing.Type[org.codehaus.groovy.ast.stmt.Statement]]) -> None: ...
    def setStaticImportsBlacklist(self, list: java.util.List[str]) -> None: ...
    def setStaticImportsWhitelist(self, list: java.util.List[str]) -> None: ...
    def setStaticStarImportsBlacklist(self, list: java.util.List[str]) -> None: ...
    def setStaticStarImportsWhitelist(self, list: java.util.List[str]) -> None: ...
    def setTokensBlacklist(self, list: java.util.List[int]) -> None: ...
    def setTokensWhitelist(self, list: java.util.List[int]) -> None: ...
    class ExpressionChecker:
        def isAuthorized(self, expression: org.codehaus.groovy.ast.expr.Expression) -> bool: ...
    class StatementChecker:
        def isAuthorized(self, statement: org.codehaus.groovy.ast.stmt.Statement) -> bool: ...

class SourceAwareCustomizer(DelegatingCustomizer):
    def __init__(self, compilationCustomizer: CompilationCustomizer): ...
    def accept(self, string: str) -> bool: ...
    def acceptBaseName(self, string: str) -> bool: ...
    def acceptClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> bool: ...
    def acceptExtension(self, string: str) -> bool: ...
    def acceptSource(self, sourceUnit: org.codehaus.groovy.control.SourceUnit) -> bool: ...
    def call(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, generatorContext: org.codehaus.groovy.classgen.GeneratorContext, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def setBaseNameValidator(self, closure: groovy.lang.Closure[bool]) -> None: ...
    def setClassValidator(self, closure: groovy.lang.Closure[bool]) -> None: ...
    def setExtensionValidator(self, closure: groovy.lang.Closure[bool]) -> None: ...
    def setSourceUnitValidator(self, closure: groovy.lang.Closure[bool]) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.control.customizers")``.

    ASTTransformationCustomizer: typing.Type[ASTTransformationCustomizer]
    CompilationCustomizer: typing.Type[CompilationCustomizer]
    DelegatingCustomizer: typing.Type[DelegatingCustomizer]
    ImportCustomizer: typing.Type[ImportCustomizer]
    SecureASTCustomizer: typing.Type[SecureASTCustomizer]
    SourceAwareCustomizer: typing.Type[SourceAwareCustomizer]
    builder: org.codehaus.groovy.control.customizers.builder.__module_protocol__
