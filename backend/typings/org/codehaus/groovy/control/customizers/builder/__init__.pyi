
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import groovy.util
import java.util
import org.codehaus.groovy.control
import org.codehaus.groovy.control.customizers
import typing



class ASTTransformationCustomizerFactory(groovy.util.AbstractFactory, groovy.lang.GroovyObject):
    def __init__(self): ...
    def isLeaf(self) -> bool: ...
    def newInstance(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any, map: typing.Union[java.util.Map, typing.Mapping]) -> typing.Any: ...
    def onHandleNodeAttributes(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, map: typing.Union[java.util.Map, typing.Mapping]) -> bool: ...

class CompilerCustomizationBuilder(groovy.util.FactoryBuilderSupport):
    def __init__(self): ...
    @staticmethod
    def withConfig(compilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration, closure: groovy.lang.Closure) -> org.codehaus.groovy.control.CompilerConfiguration: ...

class ImportCustomizerFactory(groovy.util.AbstractFactory):
    def __init__(self): ...
    def isHandlesNodeChildren(self) -> bool: ...
    def newInstance(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any, map: typing.Union[java.util.Map, typing.Mapping]) -> typing.Any: ...
    def onNodeChildren(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, closure: groovy.lang.Closure) -> bool: ...

class PostCompletionFactory:
    def postCompleteNode(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any) -> typing.Any: ...

class SecureASTCustomizerFactory(groovy.util.AbstractFactory):
    def __init__(self): ...
    def isHandlesNodeChildren(self) -> bool: ...
    def newInstance(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any, map: typing.Union[java.util.Map, typing.Mapping]) -> typing.Any: ...
    def onNodeChildren(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, closure: groovy.lang.Closure) -> bool: ...

class CustomizersFactory(groovy.util.AbstractFactory, PostCompletionFactory):
    def __init__(self): ...
    def newInstance(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any, map: typing.Union[java.util.Map, typing.Mapping]) -> typing.Any: ...
    def postCompleteNode(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    def setChild(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any) -> None: ...

class InlinedASTCustomizerFactory(groovy.util.AbstractFactory, PostCompletionFactory):
    def __init__(self): ...
    def isHandlesNodeChildren(self) -> bool: ...
    def newInstance(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any, map: typing.Union[java.util.Map, typing.Mapping]) -> typing.Any: ...
    def onNodeChildren(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, closure: groovy.lang.Closure) -> bool: ...
    def postCompleteNode(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any) -> typing.Any: ...

class SourceAwareCustomizerFactory(groovy.util.AbstractFactory, PostCompletionFactory):
    def __init__(self): ...
    def newInstance(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any, map: typing.Union[java.util.Map, typing.Mapping]) -> typing.Any: ...
    def postCompleteNode(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    def setChild(self, factoryBuilderSupport: groovy.util.FactoryBuilderSupport, object: typing.Any, object2: typing.Any) -> None: ...
    class SourceOptions:
        delegate: org.codehaus.groovy.control.customizers.CompilationCustomizer = ...
        extensionValidator: groovy.lang.Closure = ...
        unitValidator: groovy.lang.Closure = ...
        basenameValidator: groovy.lang.Closure = ...
        classValidator: groovy.lang.Closure = ...
        extension: str = ...
        basename: str = ...
        extensions: java.util.List = ...
        basenames: java.util.List = ...
        def __init__(self): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.control.customizers.builder")``.

    ASTTransformationCustomizerFactory: typing.Type[ASTTransformationCustomizerFactory]
    CompilerCustomizationBuilder: typing.Type[CompilerCustomizationBuilder]
    CustomizersFactory: typing.Type[CustomizersFactory]
    ImportCustomizerFactory: typing.Type[ImportCustomizerFactory]
    InlinedASTCustomizerFactory: typing.Type[InlinedASTCustomizerFactory]
    PostCompletionFactory: typing.Type[PostCompletionFactory]
    SecureASTCustomizerFactory: typing.Type[SecureASTCustomizerFactory]
    SourceAwareCustomizerFactory: typing.Type[SourceAwareCustomizerFactory]
