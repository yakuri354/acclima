
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import groovyjarjarasm.asm
import java.io
import java.lang
import java.net
import java.security
import java.util
import jpype
import jpype.protocol
import org.codehaus.groovy
import org.codehaus.groovy.ast
import org.codehaus.groovy.ast.expr
import org.codehaus.groovy.ast.stmt
import org.codehaus.groovy.classgen
import org.codehaus.groovy.control.customizers
import org.codehaus.groovy.control.io
import org.codehaus.groovy.control.messages
import org.codehaus.groovy.syntax
import org.codehaus.groovy.tools
import typing



class ASTTransformationsContext:
    def __init__(self, compilationUnit: 'CompilationUnit', groovyClassLoader: groovy.lang.GroovyClassLoader): ...
    def getCompilationUnit(self) -> 'CompilationUnit': ...
    def getGlobalTransformNames(self) -> java.util.Set[str]: ...
    def getTransformLoader(self) -> groovy.lang.GroovyClassLoader: ...

class AnnotationConstantsVisitor(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    def __init__(self): ...
    @typing.overload
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    @typing.overload
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode, sourceUnit: 'SourceUnit') -> None: ...

class BytecodeProcessor:
    def processBytecode(self, string: str, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> typing.MutableSequence[int]: ...

class ClassNodeResolver:
    def __init__(self): ...
    def cacheClass(self, string: str, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def findClassNode(self, string: str, compilationUnit: 'CompilationUnit') -> 'ClassNodeResolver.LookupResult': ...
    def getFromClassCache(self, string: str) -> org.codehaus.groovy.ast.ClassNode: ...
    def resolveName(self, string: str, compilationUnit: 'CompilationUnit') -> 'ClassNodeResolver.LookupResult': ...
    class LookupResult:
        def __init__(self, sourceUnit: 'SourceUnit', classNode: org.codehaus.groovy.ast.ClassNode): ...
        def getClassNode(self) -> org.codehaus.groovy.ast.ClassNode: ...
        def getSourceUnit(self) -> 'SourceUnit': ...
        def isClassNode(self) -> bool: ...
        def isSourceUnit(self) -> bool: ...

class CompilationFailedException(groovy.lang.GroovyRuntimeException):
    @typing.overload
    def __init__(self, int: int, processingUnit: 'ProcessingUnit'): ...
    @typing.overload
    def __init__(self, int: int, processingUnit: 'ProcessingUnit', throwable: java.lang.Throwable): ...
    def getUnit(self) -> 'ProcessingUnit': ...

class CompilePhase(java.lang.Enum['CompilePhase']):
    INITIALIZATION: typing.ClassVar['CompilePhase'] = ...
    PARSING: typing.ClassVar['CompilePhase'] = ...
    CONVERSION: typing.ClassVar['CompilePhase'] = ...
    SEMANTIC_ANALYSIS: typing.ClassVar['CompilePhase'] = ...
    CANONICALIZATION: typing.ClassVar['CompilePhase'] = ...
    INSTRUCTION_SELECTION: typing.ClassVar['CompilePhase'] = ...
    CLASS_GENERATION: typing.ClassVar['CompilePhase'] = ...
    OUTPUT: typing.ClassVar['CompilePhase'] = ...
    FINALIZATION: typing.ClassVar['CompilePhase'] = ...
    phases: typing.ClassVar[typing.MutableSequence['CompilePhase']] = ...
    @staticmethod
    def fromPhaseNumber(int: int) -> 'CompilePhase': ...
    def getPhaseNumber(self) -> int: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CompilePhase': ...
    @staticmethod
    def values() -> typing.MutableSequence['CompilePhase']: ...

class CompilerConfiguration:
    INVOKEDYNAMIC: typing.ClassVar[str] = ...
    JDK4: typing.ClassVar[str] = ...
    JDK5: typing.ClassVar[str] = ...
    JDK6: typing.ClassVar[str] = ...
    JDK7: typing.ClassVar[str] = ...
    JDK8: typing.ClassVar[str] = ...
    JDK9: typing.ClassVar[str] = ...
    JDK10: typing.ClassVar[str] = ...
    JDK11: typing.ClassVar[str] = ...
    JDK12: typing.ClassVar[str] = ...
    POST_JDK5: typing.ClassVar[str] = ...
    PRE_JDK5: typing.ClassVar[str] = ...
    JDK_TO_BYTECODE_VERSION_MAP: typing.ClassVar[java.util.Map] = ...
    ALLOWED_JDKS: typing.ClassVar[typing.MutableSequence[str]] = ...
    CURRENT_JVM_VERSION: typing.ClassVar[str] = ...
    DEFAULT_SOURCE_ENCODING: typing.ClassVar[str] = ...
    DEFAULT: typing.ClassVar['CompilerConfiguration'] = ...
    ASM_API_VERSION: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, properties: java.util.Properties): ...
    @typing.overload
    def __init__(self, compilerConfiguration: 'CompilerConfiguration'): ...
    def addCompilationCustomizers(self, *compilationCustomizer: org.codehaus.groovy.control.customizers.CompilationCustomizer) -> 'CompilerConfiguration': ...
    def configure(self, properties: java.util.Properties) -> None: ...
    def getBytecodePostprocessor(self) -> BytecodeProcessor: ...
    def getClasspath(self) -> java.util.List[str]: ...
    def getCompilationCustomizers(self) -> java.util.List[org.codehaus.groovy.control.customizers.CompilationCustomizer]: ...
    def getDebug(self) -> bool: ...
    def getDefaultScriptExtension(self) -> str: ...
    def getDisabledGlobalASTTransformations(self) -> java.util.Set[str]: ...
    def getJointCompilationOptions(self) -> java.util.Map[str, typing.Any]: ...
    def getMinimumRecompilationInterval(self) -> int: ...
    def getOptimizationOptions(self) -> java.util.Map[str, bool]: ...
    def getOutput(self) -> java.io.PrintWriter: ...
    def getParameters(self) -> bool: ...
    def getPluginFactory(self) -> 'ParserPluginFactory': ...
    def getRecompileGroovySource(self) -> bool: ...
    def getScriptBaseClass(self) -> str: ...
    def getScriptExtensions(self) -> java.util.Set[str]: ...
    def getSourceEncoding(self) -> str: ...
    def getTargetBytecode(self) -> str: ...
    def getTargetDirectory(self) -> java.io.File: ...
    def getTolerance(self) -> int: ...
    def getVerbose(self) -> bool: ...
    def getWarningLevel(self) -> int: ...
    def isIndyEnabled(self) -> bool: ...
    @staticmethod
    def isPostJDK5(string: str) -> bool: ...
    @staticmethod
    def isPostJDK7(string: str) -> bool: ...
    @staticmethod
    def isPostJDK8(string: str) -> bool: ...
    @staticmethod
    def isPostJDK9(string: str) -> bool: ...
    def setBytecodePostprocessor(self, bytecodeProcessor: BytecodeProcessor) -> None: ...
    def setClasspath(self, string: str) -> None: ...
    def setClasspathList(self, list: java.util.List[str]) -> None: ...
    def setDebug(self, boolean: bool) -> None: ...
    def setDefaultScriptExtension(self, string: str) -> None: ...
    def setDisabledGlobalASTTransformations(self, set: java.util.Set[str]) -> None: ...
    def setJointCompilationOptions(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def setMinimumRecompilationInterval(self, int: int) -> None: ...
    def setOptimizationOptions(self, map: typing.Union[java.util.Map[str, bool], typing.Mapping[str, bool]]) -> None: ...
    def setOutput(self, printWriter: java.io.PrintWriter) -> None: ...
    def setParameters(self, boolean: bool) -> None: ...
    def setPluginFactory(self, parserPluginFactory: 'ParserPluginFactory') -> None: ...
    def setRecompileGroovySource(self, boolean: bool) -> None: ...
    def setScriptBaseClass(self, string: str) -> None: ...
    def setScriptExtensions(self, set: java.util.Set[str]) -> None: ...
    def setSourceEncoding(self, string: str) -> None: ...
    def setTargetBytecode(self, string: str) -> None: ...
    @typing.overload
    def setTargetDirectory(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @typing.overload
    def setTargetDirectory(self, string: str) -> None: ...
    def setTolerance(self, int: int) -> None: ...
    def setVerbose(self, boolean: bool) -> None: ...
    def setWarningLevel(self, int: int) -> None: ...

class ConfigurationException(java.lang.RuntimeException, org.codehaus.groovy.GroovyExceptionInterface):
    @typing.overload
    def __init__(self, exception: java.lang.Exception): ...
    @typing.overload
    def __init__(self, string: str): ...
    def getCause(self) -> java.lang.Throwable: ...
    def isFatal(self) -> bool: ...
    def setFatal(self, boolean: bool) -> None: ...

class ErrorCollector(java.io.Serializable):
    def __init__(self, compilerConfiguration: CompilerConfiguration): ...
    def addCollectorContents(self, errorCollector: 'ErrorCollector') -> None: ...
    @typing.overload
    def addError(self, string: str, cSTNode: org.codehaus.groovy.syntax.CSTNode, sourceUnit: 'SourceUnit') -> None: ...
    @typing.overload
    def addError(self, message: org.codehaus.groovy.control.messages.Message) -> None: ...
    @typing.overload
    def addError(self, message: org.codehaus.groovy.control.messages.Message, boolean: bool) -> None: ...
    @typing.overload
    def addError(self, syntaxException: org.codehaus.groovy.syntax.SyntaxException, sourceUnit: 'SourceUnit') -> None: ...
    @typing.overload
    def addErrorAndContinue(self, message: org.codehaus.groovy.control.messages.Message) -> None: ...
    @typing.overload
    def addErrorAndContinue(self, syntaxException: org.codehaus.groovy.syntax.SyntaxException, sourceUnit: 'SourceUnit') -> None: ...
    def addException(self, exception: java.lang.Exception, sourceUnit: 'SourceUnit') -> None: ...
    def addFatalError(self, message: org.codehaus.groovy.control.messages.Message) -> None: ...
    @typing.overload
    def addWarning(self, int: int, string: str, object: typing.Any, cSTNode: org.codehaus.groovy.syntax.CSTNode, sourceUnit: 'SourceUnit') -> None: ...
    @typing.overload
    def addWarning(self, int: int, string: str, cSTNode: org.codehaus.groovy.syntax.CSTNode, sourceUnit: 'SourceUnit') -> None: ...
    @typing.overload
    def addWarning(self, warningMessage: org.codehaus.groovy.control.messages.WarningMessage) -> None: ...
    def getConfiguration(self) -> CompilerConfiguration: ...
    def getError(self, int: int) -> org.codehaus.groovy.control.messages.Message: ...
    def getErrorCount(self) -> int: ...
    def getErrors(self) -> java.util.List: ...
    def getException(self, int: int) -> java.lang.Exception: ...
    def getLastError(self) -> org.codehaus.groovy.control.messages.Message: ...
    def getSyntaxError(self, int: int) -> org.codehaus.groovy.syntax.SyntaxException: ...
    def getWarning(self, int: int) -> org.codehaus.groovy.control.messages.WarningMessage: ...
    def getWarningCount(self) -> int: ...
    def getWarnings(self) -> java.util.List: ...
    def hasErrors(self) -> bool: ...
    def hasWarnings(self) -> bool: ...
    def write(self, printWriter: java.io.PrintWriter, janitor: 'Janitor') -> None: ...

class GenericsVisitor(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    def __init__(self, sourceUnit: 'SourceUnit'): ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitConstructorCallExpression(self, constructorCallExpression: org.codehaus.groovy.ast.expr.ConstructorCallExpression) -> None: ...
    def visitDeclarationExpression(self, declarationExpression: org.codehaus.groovy.ast.expr.DeclarationExpression) -> None: ...
    def visitField(self, fieldNode: org.codehaus.groovy.ast.FieldNode) -> None: ...
    def visitMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...

class HasCleanup:
    def cleanup(self) -> None: ...

class LabelVerifier(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    def __init__(self, sourceUnit: 'SourceUnit'): ...
    def visitBreakStatement(self, breakStatement: org.codehaus.groovy.ast.stmt.BreakStatement) -> None: ...
    def visitContinueStatement(self, continueStatement: org.codehaus.groovy.ast.stmt.ContinueStatement) -> None: ...
    def visitDoWhileLoop(self, doWhileStatement: org.codehaus.groovy.ast.stmt.DoWhileStatement) -> None: ...
    def visitForLoop(self, forStatement: org.codehaus.groovy.ast.stmt.ForStatement) -> None: ...
    def visitStatement(self, statement: org.codehaus.groovy.ast.stmt.Statement) -> None: ...
    def visitSwitch(self, switchStatement: org.codehaus.groovy.ast.stmt.SwitchStatement) -> None: ...
    def visitWhileLoop(self, whileStatement: org.codehaus.groovy.ast.stmt.WhileStatement) -> None: ...

class OptimizerVisitor(org.codehaus.groovy.ast.ClassCodeExpressionTransformer):
    def __init__(self, compilationUnit: 'CompilationUnit'): ...
    def transform(self, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.Expression: ...
    @typing.overload
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    @typing.overload
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode, sourceUnit: 'SourceUnit') -> None: ...
    def visitClosureExpression(self, closureExpression: org.codehaus.groovy.ast.expr.ClosureExpression) -> None: ...

class ParserPlugin:
    def buildAST(self, sourceUnit: 'SourceUnit', classLoader: java.lang.ClassLoader, reduction: org.codehaus.groovy.syntax.Reduction) -> org.codehaus.groovy.ast.ModuleNode: ...
    def parseCST(self, sourceUnit: 'SourceUnit', reader: java.io.Reader) -> org.codehaus.groovy.syntax.Reduction: ...

class ParserPluginFactory:
    def __init__(self): ...
    def createParserPlugin(self) -> ParserPlugin: ...
    @typing.overload
    @staticmethod
    def newInstance() -> 'ParserPluginFactory': ...
    @typing.overload
    @staticmethod
    def newInstance(boolean: bool) -> 'ParserPluginFactory': ...

class Phases:
    INITIALIZATION: typing.ClassVar[int] = ...
    PARSING: typing.ClassVar[int] = ...
    CONVERSION: typing.ClassVar[int] = ...
    SEMANTIC_ANALYSIS: typing.ClassVar[int] = ...
    CANONICALIZATION: typing.ClassVar[int] = ...
    INSTRUCTION_SELECTION: typing.ClassVar[int] = ...
    CLASS_GENERATION: typing.ClassVar[int] = ...
    OUTPUT: typing.ClassVar[int] = ...
    FINALIZATION: typing.ClassVar[int] = ...
    ALL: typing.ClassVar[int] = ...
    descriptions: typing.ClassVar[typing.MutableSequence[str]] = ...
    def __init__(self): ...
    @staticmethod
    def getDescription(int: int) -> str: ...

class ProcessingUnit:
    def __init__(self, compilerConfiguration: CompilerConfiguration, groovyClassLoader: groovy.lang.GroovyClassLoader, errorCollector: ErrorCollector): ...
    def completePhase(self) -> None: ...
    def configure(self, compilerConfiguration: CompilerConfiguration) -> None: ...
    def getClassLoader(self) -> groovy.lang.GroovyClassLoader: ...
    def getConfiguration(self) -> CompilerConfiguration: ...
    def getErrorCollector(self) -> ErrorCollector: ...
    def getPhase(self) -> int: ...
    def getPhaseDescription(self) -> str: ...
    def gotoPhase(self, int: int) -> None: ...
    def nextPhase(self) -> None: ...
    def setClassLoader(self, groovyClassLoader: groovy.lang.GroovyClassLoader) -> None: ...
    def setConfiguration(self, compilerConfiguration: CompilerConfiguration) -> None: ...

class ResolveVisitor(org.codehaus.groovy.ast.ClassCodeExpressionTransformer):
    DEFAULT_IMPORTS: typing.ClassVar[typing.MutableSequence[str]] = ...
    QUESTION_MARK: typing.ClassVar[str] = ...
    EMPTY_STRING_ARRAY: typing.ClassVar[typing.MutableSequence[str]] = ...
    def __init__(self, compilationUnit: 'CompilationUnit'): ...
    def setClassNodeResolver(self, classNodeResolver: ClassNodeResolver) -> None: ...
    def startResolving(self, classNode: org.codehaus.groovy.ast.ClassNode, sourceUnit: 'SourceUnit') -> None: ...
    def transform(self, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.Expression: ...
    def visitAnnotations(self, annotatedNode: org.codehaus.groovy.ast.AnnotatedNode) -> None: ...
    def visitBlockStatement(self, blockStatement: org.codehaus.groovy.ast.stmt.BlockStatement) -> None: ...
    def visitCatchStatement(self, catchStatement: org.codehaus.groovy.ast.stmt.CatchStatement) -> None: ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitField(self, fieldNode: org.codehaus.groovy.ast.FieldNode) -> None: ...
    def visitForLoop(self, forStatement: org.codehaus.groovy.ast.stmt.ForStatement) -> None: ...
    def visitProperty(self, propertyNode: org.codehaus.groovy.ast.PropertyNode) -> None: ...

class SourceExtensionHandler:
    def __init__(self): ...
    @staticmethod
    def getRegisteredExtensions(classLoader: java.lang.ClassLoader) -> java.util.Set[str]: ...

class StaticImportVisitor(org.codehaus.groovy.ast.ClassCodeExpressionTransformer):
    def __init__(self): ...
    def transform(self, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.Expression: ...
    def visitAnnotations(self, annotatedNode: org.codehaus.groovy.ast.AnnotatedNode) -> None: ...
    @typing.overload
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    @typing.overload
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode, sourceUnit: 'SourceUnit') -> None: ...

class StaticVerifier(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    def __init__(self): ...
    @typing.overload
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    @typing.overload
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode, sourceUnit: 'SourceUnit') -> None: ...
    def visitClosureExpression(self, closureExpression: org.codehaus.groovy.ast.expr.ClosureExpression) -> None: ...
    def visitConstructorCallExpression(self, constructorCallExpression: org.codehaus.groovy.ast.expr.ConstructorCallExpression) -> None: ...
    def visitConstructorOrMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode, boolean: bool) -> None: ...
    def visitMethodCallExpression(self, methodCallExpression: org.codehaus.groovy.ast.expr.MethodCallExpression) -> None: ...
    def visitPropertyExpression(self, propertyExpression: org.codehaus.groovy.ast.expr.PropertyExpression) -> None: ...
    def visitVariableExpression(self, variableExpression: org.codehaus.groovy.ast.expr.VariableExpression) -> None: ...

class CompilationUnit(ProcessingUnit):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, groovyClassLoader: groovy.lang.GroovyClassLoader): ...
    @typing.overload
    def __init__(self, compilerConfiguration: CompilerConfiguration): ...
    @typing.overload
    def __init__(self, compilerConfiguration: CompilerConfiguration, codeSource: java.security.CodeSource, groovyClassLoader: groovy.lang.GroovyClassLoader): ...
    @typing.overload
    def __init__(self, compilerConfiguration: CompilerConfiguration, codeSource: java.security.CodeSource, groovyClassLoader: groovy.lang.GroovyClassLoader, groovyClassLoader2: groovy.lang.GroovyClassLoader): ...
    def addClassNode(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def addFirstPhaseOperation(self, primaryClassNodeOperation: 'CompilationUnit.PrimaryClassNodeOperation', int: int) -> None: ...
    def addNewPhaseOperation(self, sourceUnitOperation: 'CompilationUnit.SourceUnitOperation', int: int) -> None: ...
    @typing.overload
    def addPhaseOperation(self, groovyClassOperation: 'CompilationUnit.GroovyClassOperation') -> None: ...
    @typing.overload
    def addPhaseOperation(self, primaryClassNodeOperation: 'CompilationUnit.PrimaryClassNodeOperation', int: int) -> None: ...
    @typing.overload
    def addPhaseOperation(self, sourceUnitOperation: 'CompilationUnit.SourceUnitOperation', int: int) -> None: ...
    @typing.overload
    def addSource(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> 'SourceUnit': ...
    @typing.overload
    def addSource(self, string: str, inputStream: java.io.InputStream) -> 'SourceUnit': ...
    @typing.overload
    def addSource(self, string: str, string2: str) -> 'SourceUnit': ...
    @typing.overload
    def addSource(self, uRL: java.net.URL) -> 'SourceUnit': ...
    @typing.overload
    def addSource(self, sourceUnit: 'SourceUnit') -> 'SourceUnit': ...
    @typing.overload
    def addSources(self, fileArray: typing.Union[typing.List[java.io.File], jpype.JArray]) -> None: ...
    @typing.overload
    def addSources(self, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def applyToGeneratedGroovyClasses(self, groovyClassOperation: 'CompilationUnit.GroovyClassOperation') -> None: ...
    def applyToPrimaryClassNodes(self, primaryClassNodeOperation: 'CompilationUnit.PrimaryClassNodeOperation') -> None: ...
    def applyToSourceUnits(self, sourceUnitOperation: 'CompilationUnit.SourceUnitOperation') -> None: ...
    @typing.overload
    def compile(self) -> None: ...
    @typing.overload
    def compile(self, int: int) -> None: ...
    def configure(self, compilerConfiguration: CompilerConfiguration) -> None: ...
    def getAST(self) -> org.codehaus.groovy.ast.CompileUnit: ...
    def getASTTransformationsContext(self) -> ASTTransformationsContext: ...
    def getClassNode(self, string: str) -> org.codehaus.groovy.ast.ClassNode: ...
    def getClassNodeResolver(self) -> ClassNodeResolver: ...
    def getClassSourcesByPublicClassName(self) -> java.util.Map: ...
    def getClasses(self) -> java.util.List: ...
    def getClassgenCallback(self) -> 'CompilationUnit.ClassgenCallback': ...
    def getFirstClassNode(self) -> org.codehaus.groovy.ast.ClassNode: ...
    def getProgressCallback(self) -> 'CompilationUnit.ProgressCallback': ...
    def getSummariesByPublicClassName(self) -> java.util.Map: ...
    def getSummariesBySourceName(self) -> java.util.Map: ...
    def getTransformLoader(self) -> groovy.lang.GroovyClassLoader: ...
    def isPublicClass(self, string: str) -> bool: ...
    def iterator(self) -> java.util.Iterator['SourceUnit']: ...
    def setClassNodeResolver(self, classNodeResolver: ClassNodeResolver) -> None: ...
    def setClassgenCallback(self, classgenCallback: 'CompilationUnit.ClassgenCallback') -> None: ...
    def setProgressCallback(self, progressCallback: 'CompilationUnit.ProgressCallback') -> None: ...
    class ClassgenCallback:
        def __init__(self): ...
        def call(self, classVisitor: groovyjarjarasm.asm.ClassVisitor, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    class GroovyClassOperation:
        def __init__(self): ...
        def call(self, groovyClass: org.codehaus.groovy.tools.GroovyClass) -> None: ...
    class PrimaryClassNodeOperation:
        def __init__(self): ...
        def call(self, sourceUnit: 'SourceUnit', generatorContext: org.codehaus.groovy.classgen.GeneratorContext, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
        def needSortedInput(self) -> bool: ...
    class ProgressCallback:
        def __init__(self): ...
        def call(self, processingUnit: ProcessingUnit, int: int) -> None: ...
    class SourceUnitOperation:
        def __init__(self): ...
        def call(self, sourceUnit: 'SourceUnit') -> None: ...

class Janitor(HasCleanup):
    def __init__(self): ...
    def cleanup(self) -> None: ...
    def register(self, hasCleanup: HasCleanup) -> None: ...

class MultipleCompilationErrorsException(CompilationFailedException):
    def __init__(self, errorCollector: ErrorCollector): ...
    def getErrorCollector(self) -> ErrorCollector: ...
    def getMessage(self) -> str: ...

class SourceUnit(ProcessingUnit):
    @typing.overload
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], compilerConfiguration: CompilerConfiguration, groovyClassLoader: groovy.lang.GroovyClassLoader, errorCollector: ErrorCollector): ...
    @typing.overload
    def __init__(self, string: str, string2: str, compilerConfiguration: CompilerConfiguration, groovyClassLoader: groovy.lang.GroovyClassLoader, errorCollector: ErrorCollector): ...
    @typing.overload
    def __init__(self, string: str, readerSource: org.codehaus.groovy.control.io.ReaderSource, compilerConfiguration: CompilerConfiguration, groovyClassLoader: groovy.lang.GroovyClassLoader, errorCollector: ErrorCollector): ...
    @typing.overload
    def __init__(self, uRL: java.net.URL, compilerConfiguration: CompilerConfiguration, groovyClassLoader: groovy.lang.GroovyClassLoader, errorCollector: ErrorCollector): ...
    def addError(self, syntaxException: org.codehaus.groovy.syntax.SyntaxException) -> None: ...
    def addErrorAndContinue(self, syntaxException: org.codehaus.groovy.syntax.SyntaxException) -> None: ...
    def addException(self, exception: java.lang.Exception) -> None: ...
    def convert(self) -> None: ...
    @typing.overload
    @staticmethod
    def create(string: str, string2: str) -> 'SourceUnit': ...
    @typing.overload
    @staticmethod
    def create(string: str, string2: str, int: int) -> 'SourceUnit': ...
    def failedWithUnexpectedEOF(self) -> bool: ...
    def getAST(self) -> org.codehaus.groovy.ast.ModuleNode: ...
    def getCST(self) -> org.codehaus.groovy.syntax.Reduction: ...
    def getName(self) -> str: ...
    def getSample(self, int: int, int2: int, janitor: Janitor) -> str: ...
    def getSource(self) -> org.codehaus.groovy.control.io.ReaderSource: ...
    def parse(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.control")``.

    ASTTransformationsContext: typing.Type[ASTTransformationsContext]
    AnnotationConstantsVisitor: typing.Type[AnnotationConstantsVisitor]
    BytecodeProcessor: typing.Type[BytecodeProcessor]
    ClassNodeResolver: typing.Type[ClassNodeResolver]
    CompilationFailedException: typing.Type[CompilationFailedException]
    CompilationUnit: typing.Type[CompilationUnit]
    CompilePhase: typing.Type[CompilePhase]
    CompilerConfiguration: typing.Type[CompilerConfiguration]
    ConfigurationException: typing.Type[ConfigurationException]
    ErrorCollector: typing.Type[ErrorCollector]
    GenericsVisitor: typing.Type[GenericsVisitor]
    HasCleanup: typing.Type[HasCleanup]
    Janitor: typing.Type[Janitor]
    LabelVerifier: typing.Type[LabelVerifier]
    MultipleCompilationErrorsException: typing.Type[MultipleCompilationErrorsException]
    OptimizerVisitor: typing.Type[OptimizerVisitor]
    ParserPlugin: typing.Type[ParserPlugin]
    ParserPluginFactory: typing.Type[ParserPluginFactory]
    Phases: typing.Type[Phases]
    ProcessingUnit: typing.Type[ProcessingUnit]
    ResolveVisitor: typing.Type[ResolveVisitor]
    SourceExtensionHandler: typing.Type[SourceExtensionHandler]
    SourceUnit: typing.Type[SourceUnit]
    StaticImportVisitor: typing.Type[StaticImportVisitor]
    StaticVerifier: typing.Type[StaticVerifier]
    customizers: org.codehaus.groovy.control.customizers.__module_protocol__
    io: org.codehaus.groovy.control.io.__module_protocol__
    messages: org.codehaus.groovy.control.messages.__module_protocol__
