
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovyjarjarantlr
import groovyjarjarantlr.collections
import groovyjarjarantlr.collections.impl
import java.io
import java.util
import org.codehaus.groovy.antlr
import typing



class GroovyTokenTypes:
    EOF: typing.ClassVar[int] = ...
    NULL_TREE_LOOKAHEAD: typing.ClassVar[int] = ...
    BLOCK: typing.ClassVar[int] = ...
    MODIFIERS: typing.ClassVar[int] = ...
    OBJBLOCK: typing.ClassVar[int] = ...
    SLIST: typing.ClassVar[int] = ...
    METHOD_DEF: typing.ClassVar[int] = ...
    VARIABLE_DEF: typing.ClassVar[int] = ...
    INSTANCE_INIT: typing.ClassVar[int] = ...
    STATIC_INIT: typing.ClassVar[int] = ...
    TYPE: typing.ClassVar[int] = ...
    CLASS_DEF: typing.ClassVar[int] = ...
    INTERFACE_DEF: typing.ClassVar[int] = ...
    TRAIT_DEF: typing.ClassVar[int] = ...
    PACKAGE_DEF: typing.ClassVar[int] = ...
    ARRAY_DECLARATOR: typing.ClassVar[int] = ...
    EXTENDS_CLAUSE: typing.ClassVar[int] = ...
    IMPLEMENTS_CLAUSE: typing.ClassVar[int] = ...
    PARAMETERS: typing.ClassVar[int] = ...
    PARAMETER_DEF: typing.ClassVar[int] = ...
    LABELED_STAT: typing.ClassVar[int] = ...
    TYPECAST: typing.ClassVar[int] = ...
    INDEX_OP: typing.ClassVar[int] = ...
    POST_INC: typing.ClassVar[int] = ...
    POST_DEC: typing.ClassVar[int] = ...
    METHOD_CALL: typing.ClassVar[int] = ...
    EXPR: typing.ClassVar[int] = ...
    IMPORT: typing.ClassVar[int] = ...
    UNARY_MINUS: typing.ClassVar[int] = ...
    UNARY_PLUS: typing.ClassVar[int] = ...
    CASE_GROUP: typing.ClassVar[int] = ...
    ELIST: typing.ClassVar[int] = ...
    FOR_INIT: typing.ClassVar[int] = ...
    FOR_CONDITION: typing.ClassVar[int] = ...
    FOR_ITERATOR: typing.ClassVar[int] = ...
    EMPTY_STAT: typing.ClassVar[int] = ...
    FINAL: typing.ClassVar[int] = ...
    ABSTRACT: typing.ClassVar[int] = ...
    UNUSED_GOTO: typing.ClassVar[int] = ...
    UNUSED_CONST: typing.ClassVar[int] = ...
    UNUSED_DO: typing.ClassVar[int] = ...
    STRICTFP: typing.ClassVar[int] = ...
    SUPER_CTOR_CALL: typing.ClassVar[int] = ...
    CTOR_CALL: typing.ClassVar[int] = ...
    CTOR_IDENT: typing.ClassVar[int] = ...
    VARIABLE_PARAMETER_DEF: typing.ClassVar[int] = ...
    STRING_CONSTRUCTOR: typing.ClassVar[int] = ...
    STRING_CTOR_MIDDLE: typing.ClassVar[int] = ...
    CLOSABLE_BLOCK: typing.ClassVar[int] = ...
    IMPLICIT_PARAMETERS: typing.ClassVar[int] = ...
    SELECT_SLOT: typing.ClassVar[int] = ...
    DYNAMIC_MEMBER: typing.ClassVar[int] = ...
    LABELED_ARG: typing.ClassVar[int] = ...
    SPREAD_ARG: typing.ClassVar[int] = ...
    SPREAD_MAP_ARG: typing.ClassVar[int] = ...
    LIST_CONSTRUCTOR: typing.ClassVar[int] = ...
    MAP_CONSTRUCTOR: typing.ClassVar[int] = ...
    FOR_IN_ITERABLE: typing.ClassVar[int] = ...
    STATIC_IMPORT: typing.ClassVar[int] = ...
    ENUM_DEF: typing.ClassVar[int] = ...
    ENUM_CONSTANT_DEF: typing.ClassVar[int] = ...
    FOR_EACH_CLAUSE: typing.ClassVar[int] = ...
    ANNOTATION_DEF: typing.ClassVar[int] = ...
    ANNOTATIONS: typing.ClassVar[int] = ...
    ANNOTATION: typing.ClassVar[int] = ...
    ANNOTATION_MEMBER_VALUE_PAIR: typing.ClassVar[int] = ...
    ANNOTATION_FIELD_DEF: typing.ClassVar[int] = ...
    ANNOTATION_ARRAY_INIT: typing.ClassVar[int] = ...
    TYPE_ARGUMENTS: typing.ClassVar[int] = ...
    TYPE_ARGUMENT: typing.ClassVar[int] = ...
    TYPE_PARAMETERS: typing.ClassVar[int] = ...
    TYPE_PARAMETER: typing.ClassVar[int] = ...
    WILDCARD_TYPE: typing.ClassVar[int] = ...
    TYPE_UPPER_BOUNDS: typing.ClassVar[int] = ...
    TYPE_LOWER_BOUNDS: typing.ClassVar[int] = ...
    CLOSURE_LIST: typing.ClassVar[int] = ...
    MULTICATCH: typing.ClassVar[int] = ...
    MULTICATCH_TYPES: typing.ClassVar[int] = ...
    SH_COMMENT: typing.ClassVar[int] = ...
    LITERAL_package: typing.ClassVar[int] = ...
    LITERAL_import: typing.ClassVar[int] = ...
    LITERAL_static: typing.ClassVar[int] = ...
    LITERAL_def: typing.ClassVar[int] = ...
    LBRACK: typing.ClassVar[int] = ...
    RBRACK: typing.ClassVar[int] = ...
    IDENT: typing.ClassVar[int] = ...
    STRING_LITERAL: typing.ClassVar[int] = ...
    LT: typing.ClassVar[int] = ...
    DOT: typing.ClassVar[int] = ...
    LPAREN: typing.ClassVar[int] = ...
    LITERAL_class: typing.ClassVar[int] = ...
    LITERAL_interface: typing.ClassVar[int] = ...
    LITERAL_enum: typing.ClassVar[int] = ...
    LITERAL_trait: typing.ClassVar[int] = ...
    AT: typing.ClassVar[int] = ...
    QUESTION: typing.ClassVar[int] = ...
    LITERAL_extends: typing.ClassVar[int] = ...
    LITERAL_super: typing.ClassVar[int] = ...
    GT: typing.ClassVar[int] = ...
    COMMA: typing.ClassVar[int] = ...
    SR: typing.ClassVar[int] = ...
    BSR: typing.ClassVar[int] = ...
    LITERAL_void: typing.ClassVar[int] = ...
    LITERAL_boolean: typing.ClassVar[int] = ...
    LITERAL_byte: typing.ClassVar[int] = ...
    LITERAL_char: typing.ClassVar[int] = ...
    LITERAL_short: typing.ClassVar[int] = ...
    LITERAL_int: typing.ClassVar[int] = ...
    LITERAL_float: typing.ClassVar[int] = ...
    LITERAL_long: typing.ClassVar[int] = ...
    LITERAL_double: typing.ClassVar[int] = ...
    STAR: typing.ClassVar[int] = ...
    LITERAL_as: typing.ClassVar[int] = ...
    LITERAL_private: typing.ClassVar[int] = ...
    LITERAL_public: typing.ClassVar[int] = ...
    LITERAL_protected: typing.ClassVar[int] = ...
    LITERAL_transient: typing.ClassVar[int] = ...
    LITERAL_native: typing.ClassVar[int] = ...
    LITERAL_threadsafe: typing.ClassVar[int] = ...
    LITERAL_synchronized: typing.ClassVar[int] = ...
    LITERAL_volatile: typing.ClassVar[int] = ...
    RPAREN: typing.ClassVar[int] = ...
    ASSIGN: typing.ClassVar[int] = ...
    BAND: typing.ClassVar[int] = ...
    LCURLY: typing.ClassVar[int] = ...
    RCURLY: typing.ClassVar[int] = ...
    SEMI: typing.ClassVar[int] = ...
    LITERAL_default: typing.ClassVar[int] = ...
    LITERAL_throws: typing.ClassVar[int] = ...
    LITERAL_implements: typing.ClassVar[int] = ...
    LITERAL_this: typing.ClassVar[int] = ...
    TRIPLE_DOT: typing.ClassVar[int] = ...
    BOR: typing.ClassVar[int] = ...
    CLOSABLE_BLOCK_OP: typing.ClassVar[int] = ...
    COLON: typing.ClassVar[int] = ...
    LITERAL_if: typing.ClassVar[int] = ...
    LITERAL_else: typing.ClassVar[int] = ...
    LITERAL_while: typing.ClassVar[int] = ...
    LITERAL_switch: typing.ClassVar[int] = ...
    LITERAL_for: typing.ClassVar[int] = ...
    LITERAL_in: typing.ClassVar[int] = ...
    LITERAL_return: typing.ClassVar[int] = ...
    LITERAL_break: typing.ClassVar[int] = ...
    LITERAL_continue: typing.ClassVar[int] = ...
    LITERAL_throw: typing.ClassVar[int] = ...
    LITERAL_assert: typing.ClassVar[int] = ...
    PLUS: typing.ClassVar[int] = ...
    MINUS: typing.ClassVar[int] = ...
    LITERAL_case: typing.ClassVar[int] = ...
    LITERAL_try: typing.ClassVar[int] = ...
    LITERAL_finally: typing.ClassVar[int] = ...
    LITERAL_catch: typing.ClassVar[int] = ...
    SPREAD_DOT: typing.ClassVar[int] = ...
    OPTIONAL_DOT: typing.ClassVar[int] = ...
    MEMBER_POINTER: typing.ClassVar[int] = ...
    LITERAL_false: typing.ClassVar[int] = ...
    LITERAL_instanceof: typing.ClassVar[int] = ...
    LITERAL_new: typing.ClassVar[int] = ...
    LITERAL_null: typing.ClassVar[int] = ...
    LITERAL_true: typing.ClassVar[int] = ...
    PLUS_ASSIGN: typing.ClassVar[int] = ...
    MINUS_ASSIGN: typing.ClassVar[int] = ...
    STAR_ASSIGN: typing.ClassVar[int] = ...
    DIV_ASSIGN: typing.ClassVar[int] = ...
    MOD_ASSIGN: typing.ClassVar[int] = ...
    SR_ASSIGN: typing.ClassVar[int] = ...
    BSR_ASSIGN: typing.ClassVar[int] = ...
    SL_ASSIGN: typing.ClassVar[int] = ...
    BAND_ASSIGN: typing.ClassVar[int] = ...
    BXOR_ASSIGN: typing.ClassVar[int] = ...
    BOR_ASSIGN: typing.ClassVar[int] = ...
    STAR_STAR_ASSIGN: typing.ClassVar[int] = ...
    ELVIS_OPERATOR: typing.ClassVar[int] = ...
    LOR: typing.ClassVar[int] = ...
    LAND: typing.ClassVar[int] = ...
    BXOR: typing.ClassVar[int] = ...
    REGEX_FIND: typing.ClassVar[int] = ...
    REGEX_MATCH: typing.ClassVar[int] = ...
    NOT_EQUAL: typing.ClassVar[int] = ...
    EQUAL: typing.ClassVar[int] = ...
    IDENTICAL: typing.ClassVar[int] = ...
    NOT_IDENTICAL: typing.ClassVar[int] = ...
    COMPARE_TO: typing.ClassVar[int] = ...
    LE: typing.ClassVar[int] = ...
    GE: typing.ClassVar[int] = ...
    SL: typing.ClassVar[int] = ...
    RANGE_INCLUSIVE: typing.ClassVar[int] = ...
    RANGE_EXCLUSIVE: typing.ClassVar[int] = ...
    INC: typing.ClassVar[int] = ...
    DIV: typing.ClassVar[int] = ...
    MOD: typing.ClassVar[int] = ...
    DEC: typing.ClassVar[int] = ...
    STAR_STAR: typing.ClassVar[int] = ...
    BNOT: typing.ClassVar[int] = ...
    LNOT: typing.ClassVar[int] = ...
    STRING_CTOR_START: typing.ClassVar[int] = ...
    STRING_CTOR_END: typing.ClassVar[int] = ...
    NUM_INT: typing.ClassVar[int] = ...
    NUM_FLOAT: typing.ClassVar[int] = ...
    NUM_LONG: typing.ClassVar[int] = ...
    NUM_DOUBLE: typing.ClassVar[int] = ...
    NUM_BIG_INT: typing.ClassVar[int] = ...
    NUM_BIG_DECIMAL: typing.ClassVar[int] = ...
    NLS: typing.ClassVar[int] = ...
    DOLLAR: typing.ClassVar[int] = ...
    WS: typing.ClassVar[int] = ...
    ONE_NL: typing.ClassVar[int] = ...
    SL_COMMENT: typing.ClassVar[int] = ...
    ML_COMMENT: typing.ClassVar[int] = ...
    STRING_CH: typing.ClassVar[int] = ...
    REGEXP_LITERAL: typing.ClassVar[int] = ...
    DOLLAR_REGEXP_LITERAL: typing.ClassVar[int] = ...
    REGEXP_CTOR_END: typing.ClassVar[int] = ...
    DOLLAR_REGEXP_CTOR_END: typing.ClassVar[int] = ...
    ESCAPED_SLASH: typing.ClassVar[int] = ...
    ESCAPED_DOLLAR: typing.ClassVar[int] = ...
    REGEXP_SYMBOL: typing.ClassVar[int] = ...
    DOLLAR_REGEXP_SYMBOL: typing.ClassVar[int] = ...
    ESC: typing.ClassVar[int] = ...
    STRING_NL: typing.ClassVar[int] = ...
    HEX_DIGIT: typing.ClassVar[int] = ...
    VOCAB: typing.ClassVar[int] = ...
    LETTER: typing.ClassVar[int] = ...
    DIGIT: typing.ClassVar[int] = ...
    DIGITS_WITH_UNDERSCORE: typing.ClassVar[int] = ...
    DIGITS_WITH_UNDERSCORE_OPT: typing.ClassVar[int] = ...
    EXPONENT: typing.ClassVar[int] = ...
    FLOAT_SUFFIX: typing.ClassVar[int] = ...
    BIG_SUFFIX: typing.ClassVar[int] = ...

class GroovyLexer(groovyjarjarantlr.CharScanner, GroovyTokenTypes, groovyjarjarantlr.TokenStream):
    tracing: typing.ClassVar[bool] = ...
    _tokenSet_0: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_1: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_2: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_3: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_4: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_5: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_6: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_7: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_8: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_9: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_10: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_11: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_12: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_13: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    @typing.overload
    def __init__(self, inputBuffer: groovyjarjarantlr.InputBuffer): ...
    @typing.overload
    def __init__(self, lexerSharedInputState: groovyjarjarantlr.LexerSharedInputState): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream): ...
    @typing.overload
    def __init__(self, reader: java.io.Reader): ...
    def enableAssert(self, boolean: bool) -> None: ...
    def enableEnum(self, boolean: bool) -> None: ...
    def isAssertEnabled(self) -> bool: ...
    def isEnumEnabled(self) -> bool: ...
    def isWhitespaceIncluded(self) -> bool: ...
    def mASSIGN(self, boolean: bool) -> None: ...
    def mAT(self, boolean: bool) -> None: ...
    def mBAND(self, boolean: bool) -> None: ...
    def mBAND_ASSIGN(self, boolean: bool) -> None: ...
    def mBNOT(self, boolean: bool) -> None: ...
    def mBOR(self, boolean: bool) -> None: ...
    def mBOR_ASSIGN(self, boolean: bool) -> None: ...
    def mBSR(self, boolean: bool) -> None: ...
    def mBSR_ASSIGN(self, boolean: bool) -> None: ...
    def mBXOR(self, boolean: bool) -> None: ...
    def mBXOR_ASSIGN(self, boolean: bool) -> None: ...
    def mCLOSABLE_BLOCK_OP(self, boolean: bool) -> None: ...
    def mCOLON(self, boolean: bool) -> None: ...
    def mCOMMA(self, boolean: bool) -> None: ...
    def mCOMPARE_TO(self, boolean: bool) -> None: ...
    def mDEC(self, boolean: bool) -> None: ...
    def mDOLLAR_REGEXP_LITERAL(self, boolean: bool) -> None: ...
    def mDOT(self, boolean: bool) -> None: ...
    def mELVIS_OPERATOR(self, boolean: bool) -> None: ...
    def mEQUAL(self, boolean: bool) -> None: ...
    def mGE(self, boolean: bool) -> None: ...
    def mGT(self, boolean: bool) -> None: ...
    def mIDENT(self, boolean: bool) -> None: ...
    def mIDENTICAL(self, boolean: bool) -> None: ...
    def mINC(self, boolean: bool) -> None: ...
    def mLAND(self, boolean: bool) -> None: ...
    def mLBRACK(self, boolean: bool) -> None: ...
    def mLCURLY(self, boolean: bool) -> None: ...
    def mLE(self, boolean: bool) -> None: ...
    def mLNOT(self, boolean: bool) -> None: ...
    def mLOR(self, boolean: bool) -> None: ...
    def mLPAREN(self, boolean: bool) -> None: ...
    def mLT(self, boolean: bool) -> None: ...
    def mMEMBER_POINTER(self, boolean: bool) -> None: ...
    def mMINUS(self, boolean: bool) -> None: ...
    def mMINUS_ASSIGN(self, boolean: bool) -> None: ...
    def mML_COMMENT(self, boolean: bool) -> None: ...
    def mMOD(self, boolean: bool) -> None: ...
    def mMOD_ASSIGN(self, boolean: bool) -> None: ...
    def mNLS(self, boolean: bool) -> None: ...
    def mNOT_EQUAL(self, boolean: bool) -> None: ...
    def mNOT_IDENTICAL(self, boolean: bool) -> None: ...
    def mNUM_INT(self, boolean: bool) -> None: ...
    def mOPTIONAL_DOT(self, boolean: bool) -> None: ...
    def mPLUS(self, boolean: bool) -> None: ...
    def mPLUS_ASSIGN(self, boolean: bool) -> None: ...
    def mQUESTION(self, boolean: bool) -> None: ...
    def mRANGE_EXCLUSIVE(self, boolean: bool) -> None: ...
    def mRANGE_INCLUSIVE(self, boolean: bool) -> None: ...
    def mRBRACK(self, boolean: bool) -> None: ...
    def mRCURLY(self, boolean: bool) -> None: ...
    def mREGEXP_LITERAL(self, boolean: bool) -> None: ...
    def mREGEX_FIND(self, boolean: bool) -> None: ...
    def mREGEX_MATCH(self, boolean: bool) -> None: ...
    def mRPAREN(self, boolean: bool) -> None: ...
    def mSEMI(self, boolean: bool) -> None: ...
    def mSH_COMMENT(self, boolean: bool) -> None: ...
    def mSL(self, boolean: bool) -> None: ...
    def mSL_ASSIGN(self, boolean: bool) -> None: ...
    def mSL_COMMENT(self, boolean: bool) -> None: ...
    def mSPREAD_DOT(self, boolean: bool) -> None: ...
    def mSR(self, boolean: bool) -> None: ...
    def mSR_ASSIGN(self, boolean: bool) -> None: ...
    def mSTAR(self, boolean: bool) -> None: ...
    def mSTAR_ASSIGN(self, boolean: bool) -> None: ...
    def mSTAR_STAR(self, boolean: bool) -> None: ...
    def mSTAR_STAR_ASSIGN(self, boolean: bool) -> None: ...
    def mSTRING_LITERAL(self, boolean: bool) -> None: ...
    def mTRIPLE_DOT(self, boolean: bool) -> None: ...
    def mWS(self, boolean: bool) -> None: ...
    def nextToken(self) -> groovyjarjarantlr.Token: ...
    def plumb(self) -> groovyjarjarantlr.TokenStream: ...
    def setTokenObjectClass(self, string: str) -> None: ...
    def setWhitespaceIncluded(self, boolean: bool) -> None: ...
    def traceIn(self, string: str) -> None: ...
    def traceOut(self, string: str) -> None: ...

class GroovyRecognizer(groovyjarjarantlr.LLkParser, GroovyTokenTypes):
    tracing: typing.ClassVar[bool] = ...
    _tokenNames: typing.ClassVar[typing.MutableSequence[str]] = ...
    _tokenSet_0: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_1: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_2: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_3: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_4: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_5: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_6: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_7: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_8: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_9: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_10: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_11: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_12: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_13: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_14: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_15: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_16: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_17: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_18: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_19: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_20: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_21: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_22: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_23: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_24: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_25: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_26: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_27: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_28: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_29: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_30: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_31: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_32: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_33: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_34: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_35: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_36: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_37: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_38: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_39: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_40: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_41: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_42: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_43: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_44: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_45: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_46: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_47: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_48: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_49: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_50: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_51: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_52: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_53: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_54: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_55: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_56: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_57: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_58: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_59: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_60: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_61: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_62: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_63: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_64: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_65: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_66: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_67: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_68: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_69: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_70: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_71: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_72: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_73: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_74: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_75: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_76: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_77: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_78: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_79: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_80: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_81: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_82: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_83: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_84: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_85: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_86: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_87: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_88: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_89: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_90: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_91: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_92: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_93: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_94: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_95: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_96: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_97: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_98: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_99: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_100: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_101: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_102: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_103: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_104: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_105: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_106: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_107: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_108: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_109: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_110: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_111: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    @typing.overload
    def __init__(self, parserSharedInputState: groovyjarjarantlr.ParserSharedInputState): ...
    @typing.overload
    def __init__(self, tokenBuffer: groovyjarjarantlr.TokenBuffer): ...
    @typing.overload
    def __init__(self, tokenStream: groovyjarjarantlr.TokenStream): ...
    def aCase(self) -> None: ...
    def addWarning(self, string: str, string2: str) -> None: ...
    def additiveExpression(self, int: int) -> None: ...
    def andExpression(self, int: int) -> None: ...
    def annotation(self) -> None: ...
    def annotationArguments(self) -> None: ...
    def annotationBlock(self) -> None: ...
    def annotationDefinition(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def annotationField(self) -> None: ...
    def annotationIdent(self) -> None: ...
    def annotationMemberValueInitializer(self) -> None: ...
    def annotationMemberValuePair(self) -> None: ...
    def annotationMemberValuePairs(self) -> None: ...
    def annotationsInternal(self) -> None: ...
    def annotationsOpt(self) -> None: ...
    def appendedBlock(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def argList(self) -> None: ...
    def argument(self) -> int: ...
    def argumentLabel(self) -> None: ...
    def argumentLabelStart(self) -> None: ...
    def assignmentExpression(self, int: int) -> None: ...
    def assignmentLessExpression(self) -> None: ...
    def balancedBrackets(self) -> None: ...
    def balancedTokens(self) -> None: ...
    def blockBody(self, int: int) -> None: ...
    def branchStatement(self) -> None: ...
    def builtInType(self) -> None: ...
    def builtInTypeArraySpec(self, boolean: bool) -> None: ...
    def builtInTypeSpec(self, boolean: bool) -> None: ...
    def caseSList(self) -> None: ...
    def casesGroup(self) -> None: ...
    def checkSuspiciousExpressionStatement(self, int: int) -> None: ...
    def classBlock(self) -> None: ...
    def classDefinition(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def classField(self) -> None: ...
    def classOrInterfaceType(self, boolean: bool) -> None: ...
    def classTypeSpec(self, boolean: bool) -> None: ...
    def cloneToken(self, token: groovyjarjarantlr.Token) -> groovyjarjarantlr.Token: ...
    def closableBlock(self) -> None: ...
    def closableBlockConstructorExpression(self) -> None: ...
    def closableBlockParam(self) -> None: ...
    def closableBlockParamsOpt(self, boolean: bool) -> None: ...
    def closableBlockParamsStart(self) -> None: ...
    def closureList(self) -> None: ...
    def commandArgument(self) -> None: ...
    def commandArguments(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def commandArgumentsGreedy(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def compatibleBodyStatement(self) -> None: ...
    def compilationUnit(self) -> None: ...
    def compoundStatement(self) -> None: ...
    def conditionalExpression(self, int: int) -> None: ...
    def constant(self) -> None: ...
    def constantNumber(self) -> None: ...
    def constructorBody(self) -> None: ...
    def constructorDefinition(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def constructorStart(self) -> None: ...
    def controlExpressionList(self) -> None: ...
    @typing.overload
    def create(self, int: int, string: str, token: groovyjarjarantlr.Token, token2: groovyjarjarantlr.Token) -> groovyjarjarantlr.collections.AST: ...
    @typing.overload
    def create(self, int: int, string: str, aST: groovyjarjarantlr.collections.AST) -> groovyjarjarantlr.collections.AST: ...
    @typing.overload
    def create(self, int: int, string: str, aST: groovyjarjarantlr.collections.AST, token: groovyjarjarantlr.Token) -> groovyjarjarantlr.collections.AST: ...
    @typing.overload
    def create(self, int: int, string: str, aST: groovyjarjarantlr.collections.AST, aST2: groovyjarjarantlr.collections.AST) -> groovyjarjarantlr.collections.AST: ...
    def declaration(self) -> None: ...
    def declarationStart(self) -> None: ...
    def declaratorBrackets(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def dynamicMemberName(self) -> None: ...
    def enumBlock(self) -> None: ...
    def enumConstant(self) -> None: ...
    def enumConstantBlock(self) -> None: ...
    def enumConstantField(self) -> None: ...
    def enumConstants(self) -> None: ...
    def enumConstantsStart(self) -> None: ...
    def enumDefinition(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def equalityExpression(self, int: int) -> None: ...
    def exclusiveOrExpression(self, int: int) -> None: ...
    def explicitConstructorInvocation(self) -> None: ...
    def expression(self, int: int) -> None: ...
    def expressionStatement(self, int: int) -> None: ...
    def expressionStatementNoCheck(self) -> None: ...
    def finallyClause(self) -> None: ...
    def forCond(self) -> None: ...
    def forInClause(self) -> None: ...
    def forInit(self) -> None: ...
    def forIter(self) -> None: ...
    def forStatement(self) -> None: ...
    def genericMethod(self) -> None: ...
    def genericMethodStart(self) -> None: ...
    def getLexer(self) -> GroovyLexer: ...
    def getWarningList(self) -> java.util.List: ...
    def handler(self) -> None: ...
    def identifier(self) -> None: ...
    def identifierStar(self) -> None: ...
    def implementsClause(self) -> None: ...
    def implicitParameters(self) -> None: ...
    def importStatement(self) -> None: ...
    def inclusiveOrExpression(self, int: int) -> None: ...
    def indexPropertyArgs(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def interfaceBlock(self) -> None: ...
    def interfaceDefinition(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def interfaceExtends(self) -> None: ...
    def interfaceField(self) -> None: ...
    def keywordPropertyNames(self) -> None: ...
    def listOfVariables(self, aST: groovyjarjarantlr.collections.AST, aST2: groovyjarjarantlr.collections.AST, token: groovyjarjarantlr.Token) -> None: ...
    def listOrMapConstructorExpression(self) -> None: ...
    def logicalAndExpression(self, int: int) -> None: ...
    def logicalOrExpression(self, int: int) -> None: ...
    @typing.overload
    @staticmethod
    def make(inputBuffer: groovyjarjarantlr.InputBuffer) -> 'GroovyRecognizer': ...
    @typing.overload
    @staticmethod
    def make(lexerSharedInputState: groovyjarjarantlr.LexerSharedInputState) -> 'GroovyRecognizer': ...
    @typing.overload
    @staticmethod
    def make(inputStream: java.io.InputStream) -> 'GroovyRecognizer': ...
    @typing.overload
    @staticmethod
    def make(reader: java.io.Reader) -> 'GroovyRecognizer': ...
    @typing.overload
    @staticmethod
    def make(groovyLexer: GroovyLexer) -> 'GroovyRecognizer': ...
    def matchGenericTypeBracketsFailed(self, string: str, string2: str) -> None: ...
    def methodCallArgs(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def modifier(self) -> None: ...
    def modifiers(self) -> None: ...
    def modifiersInternal(self) -> None: ...
    def modifiersOpt(self) -> None: ...
    def multicatch(self) -> None: ...
    def multicatch_types(self) -> None: ...
    def multipleAssignment(self, int: int) -> None: ...
    def multipleAssignmentDeclaration(self) -> None: ...
    def multipleAssignmentDeclarationStart(self) -> None: ...
    def multiplicativeExpression(self, int: int) -> None: ...
    def namePart(self) -> None: ...
    def newArrayDeclarator(self) -> None: ...
    def newExpression(self) -> None: ...
    def nls(self) -> None: ...
    def nlsWarn(self) -> None: ...
    def openBlock(self) -> None: ...
    def openOrClosableBlock(self) -> None: ...
    def packageDefinition(self) -> None: ...
    def parameterDeclaration(self) -> None: ...
    def parameterDeclarationList(self) -> None: ...
    def parameterModifiersOpt(self) -> None: ...
    def parenthesizedExpression(self) -> None: ...
    def pathChain(self, int: int, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def pathElement(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def pathElementStart(self) -> None: ...
    def pathExpression(self, int: int) -> None: ...
    def postfixExpression(self, int: int) -> None: ...
    def powerExpression(self, int: int) -> None: ...
    def powerExpressionNotPlusMinus(self, int: int) -> None: ...
    def primaryExpression(self) -> None: ...
    def qualifiedTypeName(self) -> None: ...
    def regexExpression(self, int: int) -> None: ...
    def relationalExpression(self, int: int) -> None: ...
    def requireFailed(self, string: str, string2: str) -> None: ...
    def sep(self) -> None: ...
    def setFilename(self, string: str) -> None: ...
    def setSourceBuffer(self, sourceBuffer: org.codehaus.groovy.antlr.SourceBuffer) -> None: ...
    def shiftExpression(self, int: int) -> None: ...
    def singleDeclaration(self) -> None: ...
    def singleDeclarationNoInit(self) -> None: ...
    def singleVariable(self, aST: groovyjarjarantlr.collections.AST, aST2: groovyjarjarantlr.collections.AST) -> None: ...
    def snippetUnit(self) -> None: ...
    def statement(self, int: int) -> None: ...
    def statementLabelPrefix(self) -> None: ...
    def strictContextExpression(self, boolean: bool) -> bool: ...
    def stringConstructorExpression(self) -> None: ...
    def stringConstructorValuePart(self) -> None: ...
    def superClassClause(self) -> None: ...
    def suspiciousExpressionStatementStart(self) -> None: ...
    def throwsClause(self) -> None: ...
    def traceIn(self, string: str) -> None: ...
    def traceOut(self, string: str) -> None: ...
    def traitDefinition(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def tryBlock(self) -> None: ...
    def type(self) -> None: ...
    def typeArgument(self) -> None: ...
    def typeArgumentBounds(self) -> None: ...
    def typeArgumentSpec(self) -> None: ...
    def typeArguments(self) -> None: ...
    def typeArgumentsDiamond(self) -> None: ...
    def typeDefinitionStart(self) -> None: ...
    def typeNamePairs(self, aST: groovyjarjarantlr.collections.AST, token: groovyjarjarantlr.Token) -> None: ...
    def typeParameter(self) -> None: ...
    def typeParameterBounds(self) -> None: ...
    def typeParameters(self) -> None: ...
    def typeSpec(self, boolean: bool) -> None: ...
    def unaryExpression(self, int: int) -> None: ...
    def unaryExpressionNotPlusMinus(self, int: int) -> None: ...
    def upperCaseIdent(self) -> None: ...
    def varInitializer(self) -> None: ...
    def variableDeclarator(self, aST: groovyjarjarantlr.collections.AST, aST2: groovyjarjarantlr.collections.AST, token: groovyjarjarantlr.Token) -> None: ...
    def variableDefinitions(self, aST: groovyjarjarantlr.collections.AST, aST2: groovyjarjarantlr.collections.AST) -> None: ...
    def variableName(self) -> None: ...
    def wildcardType(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.antlr.parser")``.

    GroovyLexer: typing.Type[GroovyLexer]
    GroovyRecognizer: typing.Type[GroovyRecognizer]
    GroovyTokenTypes: typing.Type[GroovyTokenTypes]
