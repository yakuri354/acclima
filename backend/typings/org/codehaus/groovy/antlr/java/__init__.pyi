
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovyjarjarantlr
import groovyjarjarantlr.collections
import groovyjarjarantlr.collections.impl
import java.io
import java.util
import jpype
import org.codehaus.groovy.antlr
import org.codehaus.groovy.antlr.parser
import org.codehaus.groovy.antlr.treewalker
import typing



class Groovifier(org.codehaus.groovy.antlr.treewalker.VisitorAdapter, org.codehaus.groovy.antlr.parser.GroovyTokenTypes):
    @typing.overload
    def __init__(self, stringArray: typing.Union[typing.List[str], jpype.JArray]): ...
    @typing.overload
    def __init__(self, stringArray: typing.Union[typing.List[str], jpype.JArray], boolean: bool): ...
    def visitClassDef(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...
    def visitDefault(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...

class Java2GroovyConverter(org.codehaus.groovy.antlr.treewalker.VisitorAdapter):
    def __init__(self, stringArray: typing.Union[typing.List[str], jpype.JArray]): ...
    def visitDefault(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...

class Java2GroovyMain:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class Java2GroovyProcessor:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def convert(string: str, string2: str) -> str: ...
    @typing.overload
    @staticmethod
    def convert(string: str, string2: str, boolean: bool, boolean2: bool) -> str: ...
    @staticmethod
    def mindmap(string: str) -> str: ...
    @staticmethod
    def nodePrinter(string: str) -> str: ...
    @staticmethod
    def processFiles(list: java.util.List[str]) -> None: ...

class JavaTokenTypes:
    EOF: typing.ClassVar[int] = ...
    NULL_TREE_LOOKAHEAD: typing.ClassVar[int] = ...
    BLOCK: typing.ClassVar[int] = ...
    MODIFIERS: typing.ClassVar[int] = ...
    OBJBLOCK: typing.ClassVar[int] = ...
    SLIST: typing.ClassVar[int] = ...
    METHOD_DEF: typing.ClassVar[int] = ...
    VARIABLE_DEF: typing.ClassVar[int] = ...
    INSTANCE_INIT: typing.ClassVar[int] = ...
    STATIC_INIT: typing.ClassVar[int] = ...
    TYPE: typing.ClassVar[int] = ...
    CLASS_DEF: typing.ClassVar[int] = ...
    INTERFACE_DEF: typing.ClassVar[int] = ...
    PACKAGE_DEF: typing.ClassVar[int] = ...
    ARRAY_DECLARATOR: typing.ClassVar[int] = ...
    EXTENDS_CLAUSE: typing.ClassVar[int] = ...
    IMPLEMENTS_CLAUSE: typing.ClassVar[int] = ...
    PARAMETERS: typing.ClassVar[int] = ...
    PARAMETER_DEF: typing.ClassVar[int] = ...
    LABELED_STAT: typing.ClassVar[int] = ...
    TYPECAST: typing.ClassVar[int] = ...
    INDEX_OP: typing.ClassVar[int] = ...
    POST_INC: typing.ClassVar[int] = ...
    POST_DEC: typing.ClassVar[int] = ...
    METHOD_CALL: typing.ClassVar[int] = ...
    EXPR: typing.ClassVar[int] = ...
    ARRAY_INIT: typing.ClassVar[int] = ...
    IMPORT: typing.ClassVar[int] = ...
    UNARY_MINUS: typing.ClassVar[int] = ...
    UNARY_PLUS: typing.ClassVar[int] = ...
    CASE_GROUP: typing.ClassVar[int] = ...
    ELIST: typing.ClassVar[int] = ...
    FOR_INIT: typing.ClassVar[int] = ...
    FOR_CONDITION: typing.ClassVar[int] = ...
    FOR_ITERATOR: typing.ClassVar[int] = ...
    EMPTY_STAT: typing.ClassVar[int] = ...
    FINAL: typing.ClassVar[int] = ...
    ABSTRACT: typing.ClassVar[int] = ...
    STRICTFP: typing.ClassVar[int] = ...
    SUPER_CTOR_CALL: typing.ClassVar[int] = ...
    CTOR_CALL: typing.ClassVar[int] = ...
    VARIABLE_PARAMETER_DEF: typing.ClassVar[int] = ...
    STATIC_IMPORT: typing.ClassVar[int] = ...
    ENUM_DEF: typing.ClassVar[int] = ...
    ENUM_CONSTANT_DEF: typing.ClassVar[int] = ...
    FOR_EACH_CLAUSE: typing.ClassVar[int] = ...
    ANNOTATION_DEF: typing.ClassVar[int] = ...
    ANNOTATIONS: typing.ClassVar[int] = ...
    ANNOTATION: typing.ClassVar[int] = ...
    ANNOTATION_MEMBER_VALUE_PAIR: typing.ClassVar[int] = ...
    ANNOTATION_FIELD_DEF: typing.ClassVar[int] = ...
    ANNOTATION_ARRAY_INIT: typing.ClassVar[int] = ...
    TYPE_ARGUMENTS: typing.ClassVar[int] = ...
    TYPE_ARGUMENT: typing.ClassVar[int] = ...
    TYPE_PARAMETERS: typing.ClassVar[int] = ...
    TYPE_PARAMETER: typing.ClassVar[int] = ...
    WILDCARD_TYPE: typing.ClassVar[int] = ...
    TYPE_UPPER_BOUNDS: typing.ClassVar[int] = ...
    TYPE_LOWER_BOUNDS: typing.ClassVar[int] = ...
    LITERAL_package: typing.ClassVar[int] = ...
    SEMI: typing.ClassVar[int] = ...
    LITERAL_import: typing.ClassVar[int] = ...
    LITERAL_static: typing.ClassVar[int] = ...
    LBRACK: typing.ClassVar[int] = ...
    RBRACK: typing.ClassVar[int] = ...
    IDENT: typing.ClassVar[int] = ...
    DOT: typing.ClassVar[int] = ...
    QUESTION: typing.ClassVar[int] = ...
    LITERAL_extends: typing.ClassVar[int] = ...
    LITERAL_super: typing.ClassVar[int] = ...
    LT: typing.ClassVar[int] = ...
    GT: typing.ClassVar[int] = ...
    COMMA: typing.ClassVar[int] = ...
    SR: typing.ClassVar[int] = ...
    BSR: typing.ClassVar[int] = ...
    LITERAL_void: typing.ClassVar[int] = ...
    LITERAL_boolean: typing.ClassVar[int] = ...
    LITERAL_byte: typing.ClassVar[int] = ...
    LITERAL_char: typing.ClassVar[int] = ...
    LITERAL_short: typing.ClassVar[int] = ...
    LITERAL_int: typing.ClassVar[int] = ...
    LITERAL_float: typing.ClassVar[int] = ...
    LITERAL_long: typing.ClassVar[int] = ...
    LITERAL_double: typing.ClassVar[int] = ...
    STAR: typing.ClassVar[int] = ...
    LITERAL_private: typing.ClassVar[int] = ...
    LITERAL_public: typing.ClassVar[int] = ...
    LITERAL_protected: typing.ClassVar[int] = ...
    LITERAL_transient: typing.ClassVar[int] = ...
    LITERAL_native: typing.ClassVar[int] = ...
    LITERAL_threadsafe: typing.ClassVar[int] = ...
    LITERAL_synchronized: typing.ClassVar[int] = ...
    LITERAL_volatile: typing.ClassVar[int] = ...
    AT: typing.ClassVar[int] = ...
    LPAREN: typing.ClassVar[int] = ...
    RPAREN: typing.ClassVar[int] = ...
    ASSIGN: typing.ClassVar[int] = ...
    LCURLY: typing.ClassVar[int] = ...
    RCURLY: typing.ClassVar[int] = ...
    LITERAL_class: typing.ClassVar[int] = ...
    LITERAL_interface: typing.ClassVar[int] = ...
    LITERAL_enum: typing.ClassVar[int] = ...
    BAND: typing.ClassVar[int] = ...
    LITERAL_default: typing.ClassVar[int] = ...
    LITERAL_implements: typing.ClassVar[int] = ...
    LITERAL_this: typing.ClassVar[int] = ...
    LITERAL_throws: typing.ClassVar[int] = ...
    TRIPLE_DOT: typing.ClassVar[int] = ...
    COLON: typing.ClassVar[int] = ...
    LITERAL_if: typing.ClassVar[int] = ...
    LITERAL_else: typing.ClassVar[int] = ...
    LITERAL_while: typing.ClassVar[int] = ...
    LITERAL_do: typing.ClassVar[int] = ...
    LITERAL_break: typing.ClassVar[int] = ...
    LITERAL_continue: typing.ClassVar[int] = ...
    LITERAL_return: typing.ClassVar[int] = ...
    LITERAL_switch: typing.ClassVar[int] = ...
    LITERAL_throw: typing.ClassVar[int] = ...
    LITERAL_assert: typing.ClassVar[int] = ...
    LITERAL_for: typing.ClassVar[int] = ...
    LITERAL_case: typing.ClassVar[int] = ...
    LITERAL_try: typing.ClassVar[int] = ...
    LITERAL_finally: typing.ClassVar[int] = ...
    LITERAL_catch: typing.ClassVar[int] = ...
    BOR: typing.ClassVar[int] = ...
    PLUS_ASSIGN: typing.ClassVar[int] = ...
    MINUS_ASSIGN: typing.ClassVar[int] = ...
    STAR_ASSIGN: typing.ClassVar[int] = ...
    DIV_ASSIGN: typing.ClassVar[int] = ...
    MOD_ASSIGN: typing.ClassVar[int] = ...
    SR_ASSIGN: typing.ClassVar[int] = ...
    BSR_ASSIGN: typing.ClassVar[int] = ...
    SL_ASSIGN: typing.ClassVar[int] = ...
    BAND_ASSIGN: typing.ClassVar[int] = ...
    BXOR_ASSIGN: typing.ClassVar[int] = ...
    BOR_ASSIGN: typing.ClassVar[int] = ...
    LOR: typing.ClassVar[int] = ...
    LAND: typing.ClassVar[int] = ...
    BXOR: typing.ClassVar[int] = ...
    NOT_EQUAL: typing.ClassVar[int] = ...
    EQUAL: typing.ClassVar[int] = ...
    LE: typing.ClassVar[int] = ...
    GE: typing.ClassVar[int] = ...
    LITERAL_instanceof: typing.ClassVar[int] = ...
    SL: typing.ClassVar[int] = ...
    PLUS: typing.ClassVar[int] = ...
    MINUS: typing.ClassVar[int] = ...
    DIV: typing.ClassVar[int] = ...
    MOD: typing.ClassVar[int] = ...
    INC: typing.ClassVar[int] = ...
    DEC: typing.ClassVar[int] = ...
    BNOT: typing.ClassVar[int] = ...
    LNOT: typing.ClassVar[int] = ...
    LITERAL_true: typing.ClassVar[int] = ...
    LITERAL_false: typing.ClassVar[int] = ...
    LITERAL_null: typing.ClassVar[int] = ...
    LITERAL_new: typing.ClassVar[int] = ...
    NUM_INT: typing.ClassVar[int] = ...
    CHAR_LITERAL: typing.ClassVar[int] = ...
    STRING_LITERAL: typing.ClassVar[int] = ...
    NUM_FLOAT: typing.ClassVar[int] = ...
    NUM_LONG: typing.ClassVar[int] = ...
    NUM_DOUBLE: typing.ClassVar[int] = ...
    WS: typing.ClassVar[int] = ...
    SL_COMMENT: typing.ClassVar[int] = ...
    ML_COMMENT: typing.ClassVar[int] = ...
    ESC: typing.ClassVar[int] = ...
    HEX_DIGIT: typing.ClassVar[int] = ...
    VOCAB: typing.ClassVar[int] = ...
    EXPONENT: typing.ClassVar[int] = ...
    FLOAT_SUFFIX: typing.ClassVar[int] = ...

class PreJava2GroovyConverter(org.codehaus.groovy.antlr.treewalker.VisitorAdapter):
    def __init__(self, stringArray: typing.Union[typing.List[str], jpype.JArray]): ...
    def pop(self) -> org.codehaus.groovy.antlr.GroovySourceAST: ...
    def push(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST) -> None: ...
    def swapTwoChildren(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST) -> None: ...
    def visitDefault(self, groovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST, int: int) -> None: ...

class JavaLexer(groovyjarjarantlr.CharScanner, JavaTokenTypes, groovyjarjarantlr.TokenStream):
    _tokenSet_0: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_1: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_2: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_3: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_4: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_5: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    @typing.overload
    def __init__(self, inputBuffer: groovyjarjarantlr.InputBuffer): ...
    @typing.overload
    def __init__(self, lexerSharedInputState: groovyjarjarantlr.LexerSharedInputState): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream): ...
    @typing.overload
    def __init__(self, reader: java.io.Reader): ...
    def enableAssert(self, boolean: bool) -> None: ...
    def enableEnum(self, boolean: bool) -> None: ...
    def isAssertEnabled(self) -> bool: ...
    def isEnumEnabled(self) -> bool: ...
    def mASSIGN(self, boolean: bool) -> None: ...
    def mAT(self, boolean: bool) -> None: ...
    def mBAND(self, boolean: bool) -> None: ...
    def mBAND_ASSIGN(self, boolean: bool) -> None: ...
    def mBNOT(self, boolean: bool) -> None: ...
    def mBOR(self, boolean: bool) -> None: ...
    def mBOR_ASSIGN(self, boolean: bool) -> None: ...
    def mBSR(self, boolean: bool) -> None: ...
    def mBSR_ASSIGN(self, boolean: bool) -> None: ...
    def mBXOR(self, boolean: bool) -> None: ...
    def mBXOR_ASSIGN(self, boolean: bool) -> None: ...
    def mCHAR_LITERAL(self, boolean: bool) -> None: ...
    def mCOLON(self, boolean: bool) -> None: ...
    def mCOMMA(self, boolean: bool) -> None: ...
    def mDEC(self, boolean: bool) -> None: ...
    def mDIV(self, boolean: bool) -> None: ...
    def mDIV_ASSIGN(self, boolean: bool) -> None: ...
    def mEQUAL(self, boolean: bool) -> None: ...
    def mGE(self, boolean: bool) -> None: ...
    def mGT(self, boolean: bool) -> None: ...
    def mIDENT(self, boolean: bool) -> None: ...
    def mINC(self, boolean: bool) -> None: ...
    def mLAND(self, boolean: bool) -> None: ...
    def mLBRACK(self, boolean: bool) -> None: ...
    def mLCURLY(self, boolean: bool) -> None: ...
    def mLE(self, boolean: bool) -> None: ...
    def mLNOT(self, boolean: bool) -> None: ...
    def mLOR(self, boolean: bool) -> None: ...
    def mLPAREN(self, boolean: bool) -> None: ...
    def mLT(self, boolean: bool) -> None: ...
    def mMINUS(self, boolean: bool) -> None: ...
    def mMINUS_ASSIGN(self, boolean: bool) -> None: ...
    def mML_COMMENT(self, boolean: bool) -> None: ...
    def mMOD(self, boolean: bool) -> None: ...
    def mMOD_ASSIGN(self, boolean: bool) -> None: ...
    def mNOT_EQUAL(self, boolean: bool) -> None: ...
    def mNUM_INT(self, boolean: bool) -> None: ...
    def mPLUS(self, boolean: bool) -> None: ...
    def mPLUS_ASSIGN(self, boolean: bool) -> None: ...
    def mQUESTION(self, boolean: bool) -> None: ...
    def mRBRACK(self, boolean: bool) -> None: ...
    def mRCURLY(self, boolean: bool) -> None: ...
    def mRPAREN(self, boolean: bool) -> None: ...
    def mSEMI(self, boolean: bool) -> None: ...
    def mSL(self, boolean: bool) -> None: ...
    def mSL_ASSIGN(self, boolean: bool) -> None: ...
    def mSL_COMMENT(self, boolean: bool) -> None: ...
    def mSR(self, boolean: bool) -> None: ...
    def mSR_ASSIGN(self, boolean: bool) -> None: ...
    def mSTAR(self, boolean: bool) -> None: ...
    def mSTAR_ASSIGN(self, boolean: bool) -> None: ...
    def mSTRING_LITERAL(self, boolean: bool) -> None: ...
    def mWS(self, boolean: bool) -> None: ...
    def nextToken(self) -> groovyjarjarantlr.Token: ...
    def plumb(self) -> groovyjarjarantlr.TokenStream: ...

class JavaRecognizer(groovyjarjarantlr.LLkParser, JavaTokenTypes):
    _tokenNames: typing.ClassVar[typing.MutableSequence[str]] = ...
    _tokenSet_0: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_1: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_2: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_3: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_4: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_5: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_6: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_7: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_8: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_9: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_10: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_11: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_12: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_13: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_14: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_15: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_16: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_17: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_18: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_19: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_20: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_21: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_22: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_23: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_24: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_25: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_26: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_27: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_28: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_29: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_30: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_31: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_32: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_33: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_34: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_35: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_36: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_37: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_38: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_39: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_40: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_41: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_42: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_43: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_44: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_45: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_46: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_47: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_48: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    _tokenSet_49: typing.ClassVar[groovyjarjarantlr.collections.impl.BitSet] = ...
    @typing.overload
    def __init__(self, parserSharedInputState: groovyjarjarantlr.ParserSharedInputState): ...
    @typing.overload
    def __init__(self, tokenBuffer: groovyjarjarantlr.TokenBuffer): ...
    @typing.overload
    def __init__(self, tokenStream: groovyjarjarantlr.TokenStream): ...
    def aCase(self) -> None: ...
    def additiveExpression(self) -> None: ...
    def andExpression(self) -> None: ...
    def annotation(self) -> None: ...
    def annotationArguments(self) -> None: ...
    def annotationBlock(self) -> None: ...
    def annotationDefinition(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def annotationField(self) -> None: ...
    def annotationMemberArrayInitializer(self) -> None: ...
    def annotationMemberArrayValueInitializer(self) -> None: ...
    def annotationMemberValueInitializer(self) -> None: ...
    def annotationMemberValuePair(self) -> None: ...
    def annotations(self) -> None: ...
    def anntotationMemberValuePairs(self) -> None: ...
    def argList(self) -> None: ...
    def arrayInitializer(self) -> None: ...
    def assignmentExpression(self) -> None: ...
    def builtInType(self) -> None: ...
    def builtInTypeArraySpec(self, boolean: bool) -> None: ...
    def builtInTypeSpec(self, boolean: bool) -> None: ...
    def caseSList(self) -> None: ...
    def casesGroup(self) -> None: ...
    def classBlock(self) -> None: ...
    def classDefinition(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def classField(self) -> None: ...
    def classOrInterfaceType(self, boolean: bool) -> None: ...
    def classTypeSpec(self, boolean: bool) -> None: ...
    def compilationUnit(self) -> None: ...
    def compoundStatement(self) -> None: ...
    def conditionalExpression(self) -> None: ...
    def constant(self) -> None: ...
    def constructorBody(self) -> None: ...
    def create(self, int: int, string: str, token: groovyjarjarantlr.Token, token2: groovyjarjarantlr.Token) -> groovyjarjarantlr.collections.AST: ...
    def ctorHead(self) -> None: ...
    def declaration(self) -> None: ...
    def declaratorBrackets(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def enumBlock(self) -> None: ...
    def enumConstant(self) -> None: ...
    def enumConstantBlock(self) -> None: ...
    def enumConstantField(self) -> None: ...
    def enumDefinition(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def equalityExpression(self) -> None: ...
    def exclusiveOrExpression(self) -> None: ...
    def explicitConstructorInvocation(self) -> None: ...
    def expression(self) -> None: ...
    def expressionList(self) -> None: ...
    def finallyClause(self) -> None: ...
    def forCond(self) -> None: ...
    def forEachClause(self) -> None: ...
    def forInit(self) -> None: ...
    def forIter(self) -> None: ...
    def forStatement(self) -> None: ...
    def getLexer(self) -> JavaLexer: ...
    def handler(self) -> None: ...
    def identPrimary(self) -> None: ...
    def identifier(self) -> None: ...
    def identifierStar(self) -> None: ...
    def implementsClause(self) -> None: ...
    def importDefinition(self) -> None: ...
    def inclusiveOrExpression(self) -> None: ...
    def initializer(self) -> None: ...
    def interfaceBlock(self) -> None: ...
    def interfaceDefinition(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def interfaceExtends(self) -> None: ...
    def interfaceField(self) -> None: ...
    def logicalAndExpression(self) -> None: ...
    def logicalOrExpression(self) -> None: ...
    @typing.overload
    @staticmethod
    def make(inputBuffer: groovyjarjarantlr.InputBuffer) -> 'JavaRecognizer': ...
    @typing.overload
    @staticmethod
    def make(lexerSharedInputState: groovyjarjarantlr.LexerSharedInputState) -> 'JavaRecognizer': ...
    @typing.overload
    @staticmethod
    def make(inputStream: java.io.InputStream) -> 'JavaRecognizer': ...
    @typing.overload
    @staticmethod
    def make(reader: java.io.Reader) -> 'JavaRecognizer': ...
    @typing.overload
    @staticmethod
    def make(javaLexer: JavaLexer) -> 'JavaRecognizer': ...
    def modifier(self) -> None: ...
    def modifiers(self) -> None: ...
    def multicatch(self) -> None: ...
    def multicatch_types(self) -> None: ...
    def multiplicativeExpression(self) -> None: ...
    def newArrayDeclarator(self) -> None: ...
    def newExpression(self) -> None: ...
    def packageDefinition(self) -> None: ...
    def parameterDeclaration(self) -> None: ...
    def parameterDeclarationList(self) -> None: ...
    def parameterModifier(self) -> None: ...
    def postfixExpression(self) -> None: ...
    def primaryExpression(self) -> None: ...
    def relationalExpression(self) -> None: ...
    def setFilename(self, string: str) -> None: ...
    def setSourceBuffer(self, sourceBuffer: org.codehaus.groovy.antlr.SourceBuffer) -> None: ...
    def shiftExpression(self) -> None: ...
    def statement(self) -> None: ...
    def superClassClause(self) -> None: ...
    def throwsClause(self) -> None: ...
    def traditionalForClause(self) -> None: ...
    def tryBlock(self) -> None: ...
    def type(self) -> None: ...
    def typeArgument(self) -> None: ...
    def typeArgumentBounds(self) -> None: ...
    def typeArgumentSpec(self) -> None: ...
    def typeArguments(self) -> None: ...
    def typeArgumentsOrDiamond(self) -> None: ...
    def typeDefinition(self) -> None: ...
    def typeParameter(self) -> None: ...
    def typeParameterBounds(self) -> None: ...
    def typeParameters(self) -> None: ...
    def typeSpec(self, boolean: bool) -> None: ...
    def unaryExpression(self) -> None: ...
    def unaryExpressionNotPlusMinus(self) -> None: ...
    def varInitializer(self) -> None: ...
    def variableDeclarator(self, aST: groovyjarjarantlr.collections.AST, aST2: groovyjarjarantlr.collections.AST) -> None: ...
    def variableDefinitions(self, aST: groovyjarjarantlr.collections.AST, aST2: groovyjarjarantlr.collections.AST) -> None: ...
    def variableLengthParameterDeclaration(self) -> None: ...
    def wildcardType(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.antlr.java")``.

    Groovifier: typing.Type[Groovifier]
    Java2GroovyConverter: typing.Type[Java2GroovyConverter]
    Java2GroovyMain: typing.Type[Java2GroovyMain]
    Java2GroovyProcessor: typing.Type[Java2GroovyProcessor]
    JavaLexer: typing.Type[JavaLexer]
    JavaRecognizer: typing.Type[JavaRecognizer]
    JavaTokenTypes: typing.Type[JavaTokenTypes]
    PreJava2GroovyConverter: typing.Type[PreJava2GroovyConverter]
