
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovyjarjarantlr
import groovyjarjarantlr.collections
import java.awt.event
import java.io
import java.lang
import java.nio
import java.util
import javax.swing
import jpype
import org.codehaus.groovy.antlr.java
import org.codehaus.groovy.antlr.parser
import org.codehaus.groovy.antlr.treewalker
import org.codehaus.groovy.ast
import org.codehaus.groovy.ast.expr
import org.codehaus.groovy.control
import org.codehaus.groovy.syntax
import typing



class ASTParserException(org.codehaus.groovy.syntax.ParserException):
    @typing.overload
    def __init__(self, string: str, aSTRuntimeException: 'ASTRuntimeException'): ...
    @typing.overload
    def __init__(self, aSTRuntimeException: 'ASTRuntimeException'): ...
    def getAst(self) -> groovyjarjarantlr.collections.AST: ...

class ASTRuntimeException(java.lang.RuntimeException):
    @typing.overload
    def __init__(self, aST: groovyjarjarantlr.collections.AST, string: str): ...
    @typing.overload
    def __init__(self, aST: groovyjarjarantlr.collections.AST, string: str, throwable: java.lang.Throwable): ...
    def getAst(self) -> groovyjarjarantlr.collections.AST: ...
    def getColumn(self) -> int: ...
    def getLine(self) -> int: ...

class AntlrASTProcessor:
    def process(self, aST: groovyjarjarantlr.collections.AST) -> groovyjarjarantlr.collections.AST: ...

class AntlrParserPlugin(org.codehaus.groovy.syntax.ASTHelper, org.codehaus.groovy.control.ParserPlugin, org.codehaus.groovy.antlr.parser.GroovyTokenTypes):
    def __init__(self): ...
    def buildAST(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, classLoader: java.lang.ClassLoader, reduction: org.codehaus.groovy.syntax.Reduction) -> org.codehaus.groovy.ast.ModuleNode: ...
    @staticmethod
    def getDefaultValueForPrimitive(classNode: org.codehaus.groovy.ast.ClassNode) -> org.codehaus.groovy.ast.expr.Expression: ...
    @staticmethod
    def isType(int: int, aST: groovyjarjarantlr.collections.AST) -> bool: ...
    def outputAST(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, sourceBuffer: 'SourceBuffer') -> org.codehaus.groovy.syntax.Reduction: ...
    def parseCST(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, reader: java.io.Reader) -> org.codehaus.groovy.syntax.Reduction: ...
    @staticmethod
    def qualifiedName(aST: groovyjarjarantlr.collections.AST) -> str: ...

class AntlrParserPluginFactory(org.codehaus.groovy.control.ParserPluginFactory):
    def __init__(self): ...
    def createParserPlugin(self) -> org.codehaus.groovy.control.ParserPlugin: ...

class EnumHelper:
    def __init__(self): ...
    @staticmethod
    def addEnumConstant(classNode: org.codehaus.groovy.ast.ClassNode, string: str, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.FieldNode: ...
    @staticmethod
    def makeEnumNode(string: str, int: int, classNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ClassNode], jpype.JArray], classNode2: org.codehaus.groovy.ast.ClassNode) -> org.codehaus.groovy.ast.ClassNode: ...

class LexerFrame(javax.swing.JFrame, java.awt.event.ActionListener):
    @typing.overload
    def __init__(self, class_: typing.Type, class2: typing.Type): ...
    @typing.overload
    def __init__(self, class_: typing.Type, class2: typing.Type, reader: java.io.Reader): ...
    def actionPerformed(self, actionEvent: java.awt.event.ActionEvent) -> None: ...
    @staticmethod
    def groovyScriptFactory(string: str) -> 'LexerFrame': ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class LineColumn:
    def __init__(self, int: int, int2: int): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getColumn(self) -> int: ...
    def getLine(self) -> int: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class SourceBuffer:
    def __init__(self): ...
    def getSnippet(self, lineColumn: LineColumn, lineColumn2: LineColumn) -> str: ...
    def write(self, int: int) -> None: ...

class SourceInfo:
    def getColumn(self) -> int: ...
    def getColumnLast(self) -> int: ...
    def getLine(self) -> int: ...
    def getLineLast(self) -> int: ...
    def setColumn(self, int: int) -> None: ...
    def setColumnLast(self, int: int) -> None: ...
    def setLine(self, int: int) -> None: ...
    def setLineLast(self, int: int) -> None: ...

class UnicodeEscapingReader(java.io.Reader):
    def __init__(self, reader: java.io.Reader, sourceBuffer: SourceBuffer): ...
    def close(self) -> None: ...
    def getUnescapedUnicodeColumnCount(self) -> int: ...
    def getUnescapedUnicodeOffsetCount(self) -> int: ...
    @typing.overload
    def read(self, charArray: typing.Union[typing.List[str], jpype.JArray]) -> int: ...
    @typing.overload
    def read(self, charBuffer: java.nio.CharBuffer) -> int: ...
    @typing.overload
    def read(self) -> int: ...
    @typing.overload
    def read(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> int: ...
    def setLexer(self, charScanner: groovyjarjarantlr.CharScanner) -> None: ...

class UnicodeLexerSharedInputState(groovyjarjarantlr.LexerSharedInputState):
    def __init__(self, unicodeEscapingReader: UnicodeEscapingReader): ...
    def getColumn(self) -> int: ...
    def getTokenStartColumn(self) -> int: ...

class AntlrASTProcessSnippets(AntlrASTProcessor):
    def __init__(self): ...
    def process(self, aST: groovyjarjarantlr.collections.AST) -> groovyjarjarantlr.collections.AST: ...

class GroovySourceAST(groovyjarjarantlr.CommonAST, java.lang.Comparable, SourceInfo):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, token: groovyjarjarantlr.Token): ...
    def childAt(self, int: int) -> 'GroovySourceAST': ...
    def childOfType(self, int: int) -> 'GroovySourceAST': ...
    def childrenOfType(self, int: int) -> java.util.List['GroovySourceAST']: ...
    def compareTo(self, object: typing.Any) -> int: ...
    def getColumn(self) -> int: ...
    def getColumnLast(self) -> int: ...
    def getLine(self) -> int: ...
    def getLineLast(self) -> int: ...
    def getSnippet(self) -> str: ...
    @typing.overload
    def initialize(self, int: int, string: str) -> None: ...
    @typing.overload
    def initialize(self, token: groovyjarjarantlr.Token) -> None: ...
    @typing.overload
    def initialize(self, aST: groovyjarjarantlr.collections.AST) -> None: ...
    def setColumn(self, int: int) -> None: ...
    def setColumnLast(self, int: int) -> None: ...
    def setLast(self, token: groovyjarjarantlr.Token) -> None: ...
    def setLine(self, int: int) -> None: ...
    def setLineLast(self, int: int) -> None: ...
    def setSnippet(self, string: str) -> None: ...

class GroovySourceToken(groovyjarjarantlr.Token, SourceInfo):
    def __init__(self, int: int): ...
    def getColumn(self) -> int: ...
    def getColumnLast(self) -> int: ...
    def getLine(self) -> int: ...
    def getLineLast(self) -> int: ...
    def getText(self) -> str: ...
    def setColumn(self, int: int) -> None: ...
    def setColumnLast(self, int: int) -> None: ...
    def setLine(self, int: int) -> None: ...
    def setLineLast(self, int: int) -> None: ...
    def setText(self, string: str) -> None: ...
    def toString(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.antlr")``.

    ASTParserException: typing.Type[ASTParserException]
    ASTRuntimeException: typing.Type[ASTRuntimeException]
    AntlrASTProcessSnippets: typing.Type[AntlrASTProcessSnippets]
    AntlrASTProcessor: typing.Type[AntlrASTProcessor]
    AntlrParserPlugin: typing.Type[AntlrParserPlugin]
    AntlrParserPluginFactory: typing.Type[AntlrParserPluginFactory]
    EnumHelper: typing.Type[EnumHelper]
    GroovySourceAST: typing.Type[GroovySourceAST]
    GroovySourceToken: typing.Type[GroovySourceToken]
    LexerFrame: typing.Type[LexerFrame]
    LineColumn: typing.Type[LineColumn]
    SourceBuffer: typing.Type[SourceBuffer]
    SourceInfo: typing.Type[SourceInfo]
    UnicodeEscapingReader: typing.Type[UnicodeEscapingReader]
    UnicodeLexerSharedInputState: typing.Type[UnicodeLexerSharedInputState]
    java: org.codehaus.groovy.antlr.java.__module_protocol__
    parser: org.codehaus.groovy.antlr.parser.__module_protocol__
    treewalker: org.codehaus.groovy.antlr.treewalker.__module_protocol__
