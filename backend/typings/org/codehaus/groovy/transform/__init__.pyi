
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import groovy.transform
import groovyjarjarasm.asm
import java.lang.annotation
import java.util
import jpype
import org
import org.codehaus.groovy.ast
import org.codehaus.groovy.ast.expr
import org.codehaus.groovy.ast.stmt
import org.codehaus.groovy.control
import org.codehaus.groovy.transform.sc
import org.codehaus.groovy.transform.stc
import org.codehaus.groovy.transform.tailrec
import org.codehaus.groovy.transform.trait
import typing



class ASTTransformation:
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class ASTTransformationCollectorCodeVisitor(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    def __init__(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, groovyClassLoader: groovy.lang.GroovyClassLoader): ...
    def visitAnnotations(self, annotatedNode: org.codehaus.groovy.ast.AnnotatedNode) -> None: ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...

class ASTTransformationVisitor(org.codehaus.groovy.ast.ClassCodeVisitorSupport):
    @staticmethod
    def addGlobalTransforms(aSTTransformationsContext: org.codehaus.groovy.control.ASTTransformationsContext) -> None: ...
    @staticmethod
    def addGlobalTransformsAfterGrab(aSTTransformationsContext: org.codehaus.groovy.control.ASTTransformationsContext) -> None: ...
    @staticmethod
    def addPhaseOperations(compilationUnit: org.codehaus.groovy.control.CompilationUnit) -> None: ...
    def visitAnnotations(self, annotatedNode: org.codehaus.groovy.ast.AnnotatedNode) -> None: ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...

class AbstractASTTransformUtil(groovyjarjarasm.asm.Opcodes):
    def __init__(self): ...
    @staticmethod
    def assignStatement(expression: org.codehaus.groovy.ast.expr.Expression, expression2: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.stmt.Statement: ...
    @staticmethod
    def createConstructorStatementDefault(fieldNode: org.codehaus.groovy.ast.FieldNode) -> org.codehaus.groovy.ast.stmt.Statement: ...
    @staticmethod
    def declStatement(expression: org.codehaus.groovy.ast.expr.Expression, expression2: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.stmt.ExpressionStatement: ...
    @staticmethod
    def differentExpr(expression: org.codehaus.groovy.ast.expr.Expression, expression2: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    @staticmethod
    def differentFieldExpr(fieldNode: org.codehaus.groovy.ast.FieldNode, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    @staticmethod
    def differentPropertyExpr(propertyNode: org.codehaus.groovy.ast.PropertyNode, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    @staticmethod
    def equalsNullExpr(expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    @staticmethod
    def findArg(string: str) -> org.codehaus.groovy.ast.expr.Expression: ...
    @staticmethod
    def getInstanceNonPropertyFields(classNode: org.codehaus.groovy.ast.ClassNode) -> java.util.List[org.codehaus.groovy.ast.FieldNode]: ...
    @staticmethod
    def getInstanceProperties(classNode: org.codehaus.groovy.ast.ClassNode) -> java.util.List[org.codehaus.groovy.ast.PropertyNode]: ...
    @staticmethod
    def getInstancePropertyFields(classNode: org.codehaus.groovy.ast.ClassNode) -> java.util.List[org.codehaus.groovy.ast.FieldNode]: ...
    @staticmethod
    def getSuperNonPropertyFields(classNode: org.codehaus.groovy.ast.ClassNode) -> java.util.List[org.codehaus.groovy.ast.FieldNode]: ...
    @staticmethod
    def getSuperPropertyFields(classNode: org.codehaus.groovy.ast.ClassNode) -> java.util.List[org.codehaus.groovy.ast.FieldNode]: ...
    @staticmethod
    def hasDeclaredMethod(classNode: org.codehaus.groovy.ast.ClassNode, string: str, int: int) -> bool: ...
    @staticmethod
    def identicalExpr(expression: org.codehaus.groovy.ast.expr.Expression, expression2: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    @staticmethod
    def isInstanceOf(expression: org.codehaus.groovy.ast.expr.Expression, classNode: org.codehaus.groovy.ast.ClassNode) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    @staticmethod
    def isInstanceof(classNode: org.codehaus.groovy.ast.ClassNode, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    @staticmethod
    def isOneExpr(expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    @staticmethod
    def isOrImplements(classNode: org.codehaus.groovy.ast.ClassNode, classNode2: org.codehaus.groovy.ast.ClassNode) -> bool: ...
    @staticmethod
    def isTrueExpr(expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    @staticmethod
    def isZeroExpr(expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    @staticmethod
    def notNullExpr(expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.BooleanExpression: ...
    @staticmethod
    def returnFalseIfFieldNotEqual(fieldNode: org.codehaus.groovy.ast.FieldNode, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.stmt.Statement: ...
    @staticmethod
    def returnFalseIfNotInstanceof(classNode: org.codehaus.groovy.ast.ClassNode, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.stmt.Statement: ...
    @staticmethod
    def returnFalseIfNull(expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.stmt.IfStatement: ...
    @staticmethod
    def returnFalseIfPropertyNotEqual(propertyNode: org.codehaus.groovy.ast.PropertyNode, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.stmt.Statement: ...
    @staticmethod
    def returnFalseIfWrongType(classNode: org.codehaus.groovy.ast.ClassNode, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.stmt.Statement: ...
    @staticmethod
    def returnTrueIfIdentical(expression: org.codehaus.groovy.ast.expr.Expression, expression2: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.stmt.IfStatement: ...
    @staticmethod
    def safeExpression(expression: org.codehaus.groovy.ast.expr.Expression, expression2: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.stmt.Statement: ...

class AnnotationCollectorTransform:
    def __init__(self): ...
    def visit(self, annotationNode: org.codehaus.groovy.ast.AnnotationNode, annotationNode2: org.codehaus.groovy.ast.AnnotationNode, annotatedNode: org.codehaus.groovy.ast.AnnotatedNode, sourceUnit: org.codehaus.groovy.control.SourceUnit) -> java.util.List[org.codehaus.groovy.ast.AnnotationNode]: ...
    class ClassChanger:
        def __init__(self): ...
        def transformClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...

class ErrorCollecting:
    def addError(self, string: str, aSTNode: org.codehaus.groovy.ast.ASTNode) -> None: ...

class GroovyASTTransformation(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def phase(self) -> org.codehaus.groovy.control.CompilePhase: ...
    def toString(self) -> str: ...

class GroovyASTTransformationClass(java.lang.annotation.Annotation):
    def classes(self) -> typing.MutableSequence[typing.Type]: ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def value(self) -> typing.MutableSequence[str]: ...

class AbstractASTTransformation(groovyjarjarasm.asm.Opcodes, ASTTransformation, ErrorCollecting):
    RETENTION_CLASSNODE: typing.ClassVar[org.codehaus.groovy.ast.ClassNode] = ...
    def __init__(self): ...
    def addError(self, string: str, aSTNode: org.codehaus.groovy.ast.ASTNode) -> None: ...
    @typing.overload
    def checkPropertyList(self, classNode: org.codehaus.groovy.ast.ClassNode, list: java.util.List[str], string: str, annotationNode: org.codehaus.groovy.ast.AnnotationNode, string2: str, boolean: bool) -> bool: ...
    @typing.overload
    def checkPropertyList(self, classNode: org.codehaus.groovy.ast.ClassNode, list: java.util.List[str], string: str, annotationNode: org.codehaus.groovy.ast.AnnotationNode, string2: str, boolean: bool, boolean2: bool, boolean3: bool) -> bool: ...
    @typing.overload
    def checkPropertyList(self, classNode: org.codehaus.groovy.ast.ClassNode, list: java.util.List[str], string: str, annotationNode: org.codehaus.groovy.ast.AnnotationNode, string2: str, boolean: bool, boolean2: bool, boolean3: bool, boolean4: bool, boolean5: bool) -> bool: ...
    @staticmethod
    def deemedInternalName(string: str) -> bool: ...
    def getAnnotationName(self) -> str: ...
    def getClassList(self, annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str) -> java.util.List[org.codehaus.groovy.ast.ClassNode]: ...
    def getMemberClassList(self, annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str) -> java.util.List[org.codehaus.groovy.ast.ClassNode]: ...
    @typing.overload
    def getMemberClassValue(self, annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str) -> org.codehaus.groovy.ast.ClassNode: ...
    @typing.overload
    def getMemberClassValue(self, annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str, classNode: org.codehaus.groovy.ast.ClassNode) -> org.codehaus.groovy.ast.ClassNode: ...
    def getMemberIntValue(self, annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str) -> int: ...
    @staticmethod
    def getMemberList(annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str) -> java.util.List[str]: ...
    @staticmethod
    def getMemberStringList(annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str) -> java.util.List[str]: ...
    @typing.overload
    @staticmethod
    def getMemberStringValue(annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str) -> str: ...
    @typing.overload
    @staticmethod
    def getMemberStringValue(annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str, string2: str) -> str: ...
    def getMemberValue(self, annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str) -> typing.Any: ...
    def hasAnnotation(self, classNode: org.codehaus.groovy.ast.ClassNode, classNode2: org.codehaus.groovy.ast.ClassNode) -> bool: ...
    def memberHasValue(self, annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str, object: typing.Any) -> bool: ...
    @staticmethod
    def nonGeneric(classNode: org.codehaus.groovy.ast.ClassNode) -> org.codehaus.groovy.ast.ClassNode: ...
    @typing.overload
    @staticmethod
    def shouldSkip(string: str, list: java.util.List[str], list2: java.util.List[str]) -> bool: ...
    @typing.overload
    @staticmethod
    def shouldSkip(string: str, list: java.util.List[str], list2: java.util.List[str], boolean: bool) -> bool: ...
    @staticmethod
    def shouldSkipOnDescriptor(boolean: bool, map: typing.Union[java.util.Map, typing.Mapping], methodNode: org.codehaus.groovy.ast.MethodNode, list: java.util.List[org.codehaus.groovy.ast.ClassNode], list2: java.util.List[org.codehaus.groovy.ast.ClassNode]) -> bool: ...
    @staticmethod
    def shouldSkipOnDescriptorUndefinedAware(boolean: bool, map: typing.Union[java.util.Map, typing.Mapping], methodNode: org.codehaus.groovy.ast.MethodNode, list: java.util.List[org.codehaus.groovy.ast.ClassNode], list2: java.util.List[org.codehaus.groovy.ast.ClassNode]) -> bool: ...
    @typing.overload
    @staticmethod
    def shouldSkipUndefinedAware(string: str, list: java.util.List[str], list2: java.util.List[str]) -> bool: ...
    @typing.overload
    @staticmethod
    def shouldSkipUndefinedAware(string: str, list: java.util.List[str], list2: java.util.List[str], boolean: bool) -> bool: ...
    @staticmethod
    def tokenize(string: str) -> java.util.List[str]: ...

class AbstractInterruptibleASTTransformation(org.codehaus.groovy.ast.ClassCodeVisitorSupport, ASTTransformation, groovyjarjarasm.asm.Opcodes):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...
    def visitDoWhileLoop(self, doWhileStatement: org.codehaus.groovy.ast.stmt.DoWhileStatement) -> None: ...
    def visitForLoop(self, forStatement: org.codehaus.groovy.ast.stmt.ForStatement) -> None: ...
    def visitWhileLoop(self, whileStatement: org.codehaus.groovy.ast.stmt.WhileStatement) -> None: ...

class CategoryASTTransformation(ASTTransformation, groovyjarjarasm.asm.Opcodes):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class CompileDynamicProcessor(AnnotationCollectorTransform):
    def __init__(self): ...
    def visit(self, annotationNode: org.codehaus.groovy.ast.AnnotationNode, annotationNode2: org.codehaus.groovy.ast.AnnotationNode, annotatedNode: org.codehaus.groovy.ast.AnnotatedNode, sourceUnit: org.codehaus.groovy.control.SourceUnit) -> java.util.List[org.codehaus.groovy.ast.AnnotationNode]: ...

class FieldASTTransformation(org.codehaus.groovy.ast.ClassCodeExpressionTransformer, ASTTransformation, groovyjarjarasm.asm.Opcodes):
    def __init__(self): ...
    def transform(self, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.Expression: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...
    def visitClosureExpression(self, closureExpression: org.codehaus.groovy.ast.expr.ClosureExpression) -> None: ...
    def visitConstructorCallExpression(self, constructorCallExpression: org.codehaus.groovy.ast.expr.ConstructorCallExpression) -> None: ...
    def visitExpressionStatement(self, expressionStatement: org.codehaus.groovy.ast.stmt.ExpressionStatement) -> None: ...
    def visitMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...

class NewifyASTTransformation(org.codehaus.groovy.ast.ClassCodeExpressionTransformer, ASTTransformation):
    def __init__(self): ...
    @staticmethod
    def extractName(string: str) -> str: ...
    def transform(self, expression: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.Expression: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class StaticTypesTransformation(ASTTransformation, groovy.transform.CompilationUnitAware):
    STATIC_ERROR_PREFIX: typing.ClassVar[str] = ...
    def __init__(self): ...
    def setCompilationUnit(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit) -> None: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class ASTTestTransformation(AbstractASTTransformation, groovy.transform.CompilationUnitAware, groovy.lang.GroovyObject):
    def __init__(self): ...
    def setCompilationUnit(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit) -> None: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...
    class LabelFinder(org.codehaus.groovy.ast.ClassCodeVisitorSupport, groovy.lang.GroovyObject):
        def __init__(self, string: str, sourceUnit: org.codehaus.groovy.control.SourceUnit): ...
        def getTargets(self) -> java.util.List[org.codehaus.groovy.ast.stmt.Statement]: ...
        @typing.overload
        @staticmethod
        def lookup(classNode: org.codehaus.groovy.ast.ClassNode, string: str) -> java.util.List[org.codehaus.groovy.ast.stmt.Statement]: ...
        @typing.overload
        @staticmethod
        def lookup(methodNode: org.codehaus.groovy.ast.MethodNode, string: str) -> java.util.List[org.codehaus.groovy.ast.stmt.Statement]: ...

class AutoCloneASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class AutoFinalASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class AutoImplementASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class BaseScriptASTTransformation(AbstractASTTransformation):
    MY_TYPE: typing.ClassVar[org.codehaus.groovy.ast.ClassNode] = ...
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class ConditionalInterruptibleASTTransformation(AbstractInterruptibleASTTransformation, groovy.lang.GroovyObject):
    def __init__(self): ...
    def visitAnnotations(self, annotatedNode: org.codehaus.groovy.ast.AnnotatedNode) -> None: ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitClosureExpression(self, closureExpression: org.codehaus.groovy.ast.expr.ClosureExpression) -> None: ...
    def visitField(self, fieldNode: org.codehaus.groovy.ast.FieldNode) -> None: ...
    def visitMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...
    def visitProperty(self, propertyNode: org.codehaus.groovy.ast.PropertyNode) -> None: ...

class DelegateASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class EqualsAndHashCodeASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def createEquals(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, boolean3: bool, list: java.util.List[str], list2: java.util.List[str]) -> None: ...
    @typing.overload
    @staticmethod
    def createEquals(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, boolean3: bool, list: java.util.List[str], list2: java.util.List[str], boolean4: bool) -> None: ...
    @typing.overload
    @staticmethod
    def createEquals(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, boolean3: bool, list: java.util.List[str], list2: java.util.List[str], boolean4: bool, boolean5: bool) -> None: ...
    @typing.overload
    @staticmethod
    def createHashCode(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, boolean3: bool, list: java.util.List[str], list2: java.util.List[str]) -> None: ...
    @typing.overload
    @staticmethod
    def createHashCode(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, boolean3: bool, list: java.util.List[str], list2: java.util.List[str], boolean4: bool) -> None: ...
    @typing.overload
    @staticmethod
    def createHashCode(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, boolean3: bool, list: java.util.List[str], list2: java.util.List[str], boolean4: bool, boolean5: bool) -> None: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class ExternalizeMethodsASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class ExternalizeVerifierASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class ImmutableASTTransformation(AbstractASTTransformation, groovy.transform.CompilationUnitAware):
    MY_TYPE: typing.ClassVar[org.codehaus.groovy.ast.ClassNode] = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def checkImmutable(class_: typing.Type[typing.Any], string: str, object: typing.Any) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def checkImmutable(class_: typing.Type[typing.Any], string: str, object: typing.Any, list: java.util.List[str], list2: java.util.List[typing.Type]) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def checkImmutable(string: str, string2: str, object: typing.Any) -> typing.Any: ...
    @staticmethod
    def checkPropNames(object: typing.Any, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def getAnnotationName(self) -> str: ...
    def setCompilationUnit(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit) -> None: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class IndexedPropertyASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class InheritConstructorsASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class LazyASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class MapConstructorASTTransformation(AbstractASTTransformation, groovy.transform.CompilationUnitAware):
    def __init__(self): ...
    def getAnnotationName(self) -> str: ...
    def setCompilationUnit(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit) -> None: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class MemoizedASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class NamedVariantASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class NotYetImplementedASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class PackageScopeASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class ReadWriteLockASTTransformation(AbstractASTTransformation):
    DEFAULT_STATIC_LOCKNAME: typing.ClassVar[str] = ...
    DEFAULT_INSTANCE_LOCKNAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class SingletonASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class SortableASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class SourceURIASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class SynchronizedASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class ThreadInterruptibleASTTransformation(AbstractInterruptibleASTTransformation, groovy.lang.GroovyObject):
    def __init__(self): ...
    def visitClosureExpression(self, closureExpression: org.codehaus.groovy.ast.expr.ClosureExpression) -> None: ...
    def visitMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...

class TimedInterruptibleASTTransformation(AbstractASTTransformation, groovy.lang.GroovyObject):
    def __init__(self): ...
    @staticmethod
    def getConstantAnnotationParameter(annotationNode: org.codehaus.groovy.ast.AnnotationNode, string: str, class_: typing.Type, object: typing.Any) -> typing.Any: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class ToStringASTTransformation(AbstractASTTransformation):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def createToString(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, list: java.util.List[str], list2: java.util.List[str], boolean3: bool) -> None: ...
    @typing.overload
    @staticmethod
    def createToString(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, list: java.util.List[str], list2: java.util.List[str], boolean3: bool, boolean4: bool) -> None: ...
    @typing.overload
    @staticmethod
    def createToString(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, list: java.util.List[str], list2: java.util.List[str], boolean3: bool, boolean4: bool, boolean5: bool) -> None: ...
    @typing.overload
    @staticmethod
    def createToString(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, list: java.util.List[str], list2: java.util.List[str], boolean3: bool, boolean4: bool, boolean5: bool, boolean6: bool) -> None: ...
    @typing.overload
    @staticmethod
    def createToString(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, list: java.util.List[str], list2: java.util.List[str], boolean3: bool, boolean4: bool, boolean5: bool, boolean6: bool, boolean7: bool) -> None: ...
    @typing.overload
    @staticmethod
    def createToString(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, list: java.util.List[str], list2: java.util.List[str], boolean3: bool, boolean4: bool, boolean5: bool, boolean6: bool, boolean7: bool, boolean8: bool) -> None: ...
    @typing.overload
    @staticmethod
    def createToString(classNode: org.codehaus.groovy.ast.ClassNode, boolean: bool, boolean2: bool, list: java.util.List[str], list2: java.util.List[str], boolean3: bool, boolean4: bool, boolean5: bool, boolean6: bool, boolean7: bool, boolean8: bool, boolean9: bool, boolean10: bool) -> None: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class TupleConstructorASTTransformation(AbstractASTTransformation, groovy.transform.CompilationUnitAware):
    def __init__(self): ...
    @staticmethod
    def addSpecialMapConstructors(int: int, classNode: org.codehaus.groovy.ast.ClassNode, string: str, boolean: bool) -> None: ...
    def getAnnotationName(self) -> str: ...
    def setCompilationUnit(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit) -> None: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class BuilderASTTransformation(AbstractASTTransformation, groovy.transform.CompilationUnitAware):
    MY_TYPE_NAME: typing.ClassVar[str] = ...
    NO_EXCEPTIONS: typing.ClassVar[typing.MutableSequence[org.codehaus.groovy.ast.ClassNode]] = ...
    NO_PARAMS: typing.ClassVar[typing.MutableSequence[org.codehaus.groovy.ast.Parameter]] = ...
    def __init__(self): ...
    def setCompilationUnit(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit) -> None: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...
    class AbstractBuilderStrategy(org.codehaus.groovy.transform.BuilderASTTransformation.BuilderStrategy):
        def __init__(self): ...
    class BuilderStrategy:
        def build(self, builderASTTransformation: 'BuilderASTTransformation', annotatedNode: org.codehaus.groovy.ast.AnnotatedNode, annotationNode: org.codehaus.groovy.ast.AnnotationNode) -> None: ...

class LogASTTransformation(AbstractASTTransformation, groovy.transform.CompilationUnitAware):
    DEFAULT_CATEGORY_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def setCompilationUnit(self, compilationUnit: org.codehaus.groovy.control.CompilationUnit) -> None: ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...
    class AbstractLoggingStrategy(org.codehaus.groovy.transform.LogASTTransformation.LoggingStrategy):
        def getCategoryName(self, classNode: org.codehaus.groovy.ast.ClassNode, string: str) -> str: ...
    class LoggingStrategy:
        def addLoggerFieldToClass(self, classNode: org.codehaus.groovy.ast.ClassNode, string: str, string2: str) -> org.codehaus.groovy.ast.FieldNode: ...
        def getCategoryName(self, classNode: org.codehaus.groovy.ast.ClassNode, string: str) -> str: ...
        def isLoggingMethod(self, string: str) -> bool: ...
        def wrapLoggingMethodCall(self, expression: org.codehaus.groovy.ast.expr.Expression, string: str, expression2: org.codehaus.groovy.ast.expr.Expression) -> org.codehaus.groovy.ast.expr.Expression: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.transform")``.

    ASTTestTransformation: typing.Type[ASTTestTransformation]
    ASTTransformation: typing.Type[ASTTransformation]
    ASTTransformationCollectorCodeVisitor: typing.Type[ASTTransformationCollectorCodeVisitor]
    ASTTransformationVisitor: typing.Type[ASTTransformationVisitor]
    AbstractASTTransformUtil: typing.Type[AbstractASTTransformUtil]
    AbstractASTTransformation: typing.Type[AbstractASTTransformation]
    AbstractInterruptibleASTTransformation: typing.Type[AbstractInterruptibleASTTransformation]
    AnnotationCollectorTransform: typing.Type[AnnotationCollectorTransform]
    AutoCloneASTTransformation: typing.Type[AutoCloneASTTransformation]
    AutoFinalASTTransformation: typing.Type[AutoFinalASTTransformation]
    AutoImplementASTTransformation: typing.Type[AutoImplementASTTransformation]
    BaseScriptASTTransformation: typing.Type[BaseScriptASTTransformation]
    BuilderASTTransformation: typing.Type[BuilderASTTransformation]
    CategoryASTTransformation: typing.Type[CategoryASTTransformation]
    CompileDynamicProcessor: typing.Type[CompileDynamicProcessor]
    ConditionalInterruptibleASTTransformation: typing.Type[ConditionalInterruptibleASTTransformation]
    DelegateASTTransformation: typing.Type[DelegateASTTransformation]
    EqualsAndHashCodeASTTransformation: typing.Type[EqualsAndHashCodeASTTransformation]
    ErrorCollecting: typing.Type[ErrorCollecting]
    ExternalizeMethodsASTTransformation: typing.Type[ExternalizeMethodsASTTransformation]
    ExternalizeVerifierASTTransformation: typing.Type[ExternalizeVerifierASTTransformation]
    FieldASTTransformation: typing.Type[FieldASTTransformation]
    GroovyASTTransformation: typing.Type[GroovyASTTransformation]
    GroovyASTTransformationClass: typing.Type[GroovyASTTransformationClass]
    ImmutableASTTransformation: typing.Type[ImmutableASTTransformation]
    IndexedPropertyASTTransformation: typing.Type[IndexedPropertyASTTransformation]
    InheritConstructorsASTTransformation: typing.Type[InheritConstructorsASTTransformation]
    LazyASTTransformation: typing.Type[LazyASTTransformation]
    LogASTTransformation: typing.Type[LogASTTransformation]
    MapConstructorASTTransformation: typing.Type[MapConstructorASTTransformation]
    MemoizedASTTransformation: typing.Type[MemoizedASTTransformation]
    NamedVariantASTTransformation: typing.Type[NamedVariantASTTransformation]
    NewifyASTTransformation: typing.Type[NewifyASTTransformation]
    NotYetImplementedASTTransformation: typing.Type[NotYetImplementedASTTransformation]
    PackageScopeASTTransformation: typing.Type[PackageScopeASTTransformation]
    ReadWriteLockASTTransformation: typing.Type[ReadWriteLockASTTransformation]
    SingletonASTTransformation: typing.Type[SingletonASTTransformation]
    SortableASTTransformation: typing.Type[SortableASTTransformation]
    SourceURIASTTransformation: typing.Type[SourceURIASTTransformation]
    StaticTypesTransformation: typing.Type[StaticTypesTransformation]
    SynchronizedASTTransformation: typing.Type[SynchronizedASTTransformation]
    ThreadInterruptibleASTTransformation: typing.Type[ThreadInterruptibleASTTransformation]
    TimedInterruptibleASTTransformation: typing.Type[TimedInterruptibleASTTransformation]
    ToStringASTTransformation: typing.Type[ToStringASTTransformation]
    TupleConstructorASTTransformation: typing.Type[TupleConstructorASTTransformation]
    sc: org.codehaus.groovy.transform.sc.__module_protocol__
    stc: org.codehaus.groovy.transform.stc.__module_protocol__
    tailrec: org.codehaus.groovy.transform.tailrec.__module_protocol__
    trait: org.codehaus.groovy.transform.trait.__module_protocol__
