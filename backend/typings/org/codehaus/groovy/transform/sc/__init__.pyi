
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jpype
import org.codehaus.groovy.ast
import org.codehaus.groovy.ast.expr
import org.codehaus.groovy.ast.stmt
import org.codehaus.groovy.classgen.asm
import org.codehaus.groovy.control
import org.codehaus.groovy.transform
import org.codehaus.groovy.transform.sc.transformers
import org.codehaus.groovy.transform.stc
import typing



class ListOfExpressionsExpression(org.codehaus.groovy.ast.expr.Expression):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List[org.codehaus.groovy.ast.expr.Expression]): ...
    def addExpression(self, expression: org.codehaus.groovy.ast.expr.Expression) -> None: ...
    def transformExpression(self, expressionTransformer: org.codehaus.groovy.ast.expr.ExpressionTransformer) -> org.codehaus.groovy.ast.expr.Expression: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...

class StaticCompilationMetadataKeys(java.lang.Enum['StaticCompilationMetadataKeys']):
    STATIC_COMPILE_NODE: typing.ClassVar['StaticCompilationMetadataKeys'] = ...
    BINARY_EXP_TARGET: typing.ClassVar['StaticCompilationMetadataKeys'] = ...
    PRIVATE_BRIDGE_METHODS: typing.ClassVar['StaticCompilationMetadataKeys'] = ...
    PRIVATE_FIELDS_ACCESSORS: typing.ClassVar['StaticCompilationMetadataKeys'] = ...
    PRIVATE_FIELDS_MUTATORS: typing.ClassVar['StaticCompilationMetadataKeys'] = ...
    DYNAMIC_OUTER_NODE_CALLBACK: typing.ClassVar['StaticCompilationMetadataKeys'] = ...
    PROPERTY_OWNER: typing.ClassVar['StaticCompilationMetadataKeys'] = ...
    COMPONENT_TYPE: typing.ClassVar['StaticCompilationMetadataKeys'] = ...
    RECEIVER_OF_DYNAMIC_PROPERTY: typing.ClassVar['StaticCompilationMetadataKeys'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'StaticCompilationMetadataKeys': ...
    @staticmethod
    def values() -> typing.MutableSequence['StaticCompilationMetadataKeys']: ...

class StaticCompilationVisitor(org.codehaus.groovy.transform.stc.StaticTypeCheckingVisitor):
    ARRAYLIST_CLASSNODE: typing.ClassVar[org.codehaus.groovy.ast.ClassNode] = ...
    ARRAYLIST_CONSTRUCTOR: typing.ClassVar[org.codehaus.groovy.ast.MethodNode] = ...
    ARRAYLIST_ADD_METHOD: typing.ClassVar[org.codehaus.groovy.ast.MethodNode] = ...
    def __init__(self, sourceUnit: org.codehaus.groovy.control.SourceUnit, classNode: org.codehaus.groovy.ast.ClassNode): ...
    @staticmethod
    def isStaticallyCompiled(annotatedNode: org.codehaus.groovy.ast.AnnotatedNode) -> bool: ...
    def visitClass(self, classNode: org.codehaus.groovy.ast.ClassNode) -> None: ...
    def visitConstructorCallExpression(self, constructorCallExpression: org.codehaus.groovy.ast.expr.ConstructorCallExpression) -> None: ...
    def visitForLoop(self, forStatement: org.codehaus.groovy.ast.stmt.ForStatement) -> None: ...
    def visitMethod(self, methodNode: org.codehaus.groovy.ast.MethodNode) -> None: ...
    def visitMethodCallExpression(self, methodCallExpression: org.codehaus.groovy.ast.expr.MethodCallExpression) -> None: ...
    def visitPropertyExpression(self, propertyExpression: org.codehaus.groovy.ast.expr.PropertyExpression) -> None: ...
    def visitSpreadExpression(self, spreadExpression: org.codehaus.groovy.ast.expr.SpreadExpression) -> None: ...

class StaticCompileTransformation(org.codehaus.groovy.transform.StaticTypesTransformation):
    def __init__(self): ...
    def visit(self, aSTNodeArray: typing.Union[typing.List[org.codehaus.groovy.ast.ASTNode], jpype.JArray], sourceUnit: org.codehaus.groovy.control.SourceUnit) -> None: ...

class TemporaryVariableExpression(org.codehaus.groovy.ast.expr.Expression):
    def __init__(self, expression: org.codehaus.groovy.ast.expr.Expression): ...
    def getType(self) -> org.codehaus.groovy.ast.ClassNode: ...
    def remove(self, writerController: org.codehaus.groovy.classgen.asm.WriterController) -> None: ...
    def transformExpression(self, expressionTransformer: org.codehaus.groovy.ast.expr.ExpressionTransformer) -> org.codehaus.groovy.ast.expr.Expression: ...
    def visit(self, groovyCodeVisitor: org.codehaus.groovy.ast.GroovyCodeVisitor) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.transform.sc")``.

    ListOfExpressionsExpression: typing.Type[ListOfExpressionsExpression]
    StaticCompilationMetadataKeys: typing.Type[StaticCompilationMetadataKeys]
    StaticCompilationVisitor: typing.Type[StaticCompilationVisitor]
    StaticCompileTransformation: typing.Type[StaticCompileTransformation]
    TemporaryVariableExpression: typing.Type[TemporaryVariableExpression]
    transformers: org.codehaus.groovy.transform.sc.transformers.__module_protocol__
