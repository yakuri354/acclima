
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import java.beans
import java.lang
import java.util
import jpype
import typing



class BindPath:
    def __init__(self): ...
    def addAllListeners(self, propertyChangeListener: java.beans.PropertyChangeListener, object: typing.Any, set: java.util.Set) -> None: ...
    def addListeners(self, propertyChangeListener: java.beans.PropertyChangeListener, object: typing.Any, set: java.util.Set) -> None: ...
    def getSyntheticTriggerBinding(self, object: typing.Any) -> 'TriggerBinding': ...
    def removeListeners(self) -> None: ...
    def updateLocalSyntheticProperties(self, map: typing.Union[java.util.Map[str, 'TriggerBinding'], typing.Mapping[str, 'TriggerBinding']]) -> None: ...
    def updatePath(self, propertyChangeListener: java.beans.PropertyChangeListener, object: typing.Any, set: java.util.Set) -> None: ...

class BindingUpdatable:
    def bind(self) -> None: ...
    def rebind(self) -> None: ...
    def reverseUpdate(self) -> None: ...
    def unbind(self) -> None: ...
    def update(self) -> None: ...

class SourceBinding:
    def getSourceValue(self) -> typing.Any: ...

class TargetBinding:
    def updateTargetValue(self, object: typing.Any) -> None: ...

class TriggerBinding:
    def createBinding(self, sourceBinding: SourceBinding, targetBinding: TargetBinding) -> 'FullBinding': ...

class AggregateBinding(BindingUpdatable):
    def __init__(self): ...
    def addBinding(self, bindingUpdatable: BindingUpdatable) -> None: ...
    def bind(self) -> None: ...
    def rebind(self) -> None: ...
    def removeBinding(self, bindingUpdatable: BindingUpdatable) -> None: ...
    def reverseUpdate(self) -> None: ...
    def unbind(self) -> None: ...
    def update(self) -> None: ...

class BindingProxy(groovy.lang.GroovyObjectSupport, BindingUpdatable):
    def __init__(self, object: typing.Any): ...
    def bind(self) -> None: ...
    def getModel(self) -> typing.Any: ...
    def getProperty(self, string: str) -> typing.Any: ...
    def rebind(self) -> None: ...
    def reverseUpdate(self) -> None: ...
    def setModel(self, object: typing.Any) -> None: ...
    def setProperty(self, string: str, object: typing.Any) -> None: ...
    def unbind(self) -> None: ...
    def update(self) -> None: ...

class ClosureSourceBinding(SourceBinding):
    @typing.overload
    def __init__(self, closure: groovy.lang.Closure): ...
    @typing.overload
    def __init__(self, closure: groovy.lang.Closure, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]): ...
    def getClosure(self) -> groovy.lang.Closure: ...
    def getSourceValue(self) -> typing.Any: ...
    def setClosure(self, closure: groovy.lang.Closure) -> None: ...
    def setClosureArgument(self, object: typing.Any) -> None: ...
    def setClosureArguments(self, objectArray: typing.Union[typing.List[typing.Any], jpype.JArray]) -> None: ...

class ClosureTriggerBinding(TriggerBinding, SourceBinding):
    def __init__(self, map: typing.Union[java.util.Map[str, TriggerBinding], typing.Mapping[str, TriggerBinding]]): ...
    def createBinding(self, sourceBinding: SourceBinding, targetBinding: TargetBinding) -> 'FullBinding': ...
    def getClosure(self) -> groovy.lang.Closure: ...
    def getSourceValue(self) -> typing.Any: ...
    def setClosure(self, closure: groovy.lang.Closure) -> None: ...

class EventTriggerBinding(TriggerBinding):
    def __init__(self, object: typing.Any, string: str): ...
    def createBinding(self, sourceBinding: SourceBinding, targetBinding: TargetBinding) -> 'FullBinding': ...
    def getEventName(self) -> str: ...
    def getTriggerBean(self) -> typing.Any: ...
    def setEventName(self, string: str) -> None: ...
    def setTriggerBean(self, object: typing.Any) -> None: ...

class FullBinding(BindingUpdatable):
    def getConverter(self) -> groovy.lang.Closure: ...
    def getReverseConverter(self) -> groovy.lang.Closure: ...
    def getSourceBinding(self) -> SourceBinding: ...
    def getTargetBinding(self) -> TargetBinding: ...
    def getValidator(self) -> groovy.lang.Closure: ...
    def setConverter(self, closure: groovy.lang.Closure) -> None: ...
    def setReverseConverter(self, closure: groovy.lang.Closure) -> None: ...
    def setSourceBinding(self, sourceBinding: SourceBinding) -> None: ...
    def setTargetBinding(self, targetBinding: TargetBinding) -> None: ...
    def setValidator(self, closure: groovy.lang.Closure) -> None: ...

class PropertyBinding(SourceBinding, TargetBinding, TriggerBinding):
    @typing.overload
    def __init__(self, object: typing.Any, string: str): ...
    @typing.overload
    def __init__(self, object: typing.Any, string: str, string2: str): ...
    @typing.overload
    def __init__(self, object: typing.Any, string: str, updateStrategy: 'PropertyBinding.UpdateStrategy'): ...
    def createBinding(self, sourceBinding: SourceBinding, targetBinding: TargetBinding) -> FullBinding: ...
    def getBean(self) -> typing.Any: ...
    def getPropertyName(self) -> str: ...
    def getSourceValue(self) -> typing.Any: ...
    def getUpdateStrategy(self) -> 'PropertyBinding.UpdateStrategy': ...
    def isNonChangeCheck(self) -> bool: ...
    def setBean(self, object: typing.Any) -> None: ...
    def setNonChangeCheck(self, boolean: bool) -> None: ...
    def setPropertyName(self, string: str) -> None: ...
    def updateTargetValue(self, object: typing.Any) -> None: ...
    class UpdateStrategy(java.lang.Enum['PropertyBinding.UpdateStrategy']):
        MIXED: typing.ClassVar['PropertyBinding.UpdateStrategy'] = ...
        ASYNC: typing.ClassVar['PropertyBinding.UpdateStrategy'] = ...
        SYNC: typing.ClassVar['PropertyBinding.UpdateStrategy'] = ...
        SAME: typing.ClassVar['PropertyBinding.UpdateStrategy'] = ...
        OUTSIDE: typing.ClassVar['PropertyBinding.UpdateStrategy'] = ...
        DEFER: typing.ClassVar['PropertyBinding.UpdateStrategy'] = ...
        @staticmethod
        def of(string: str) -> 'PropertyBinding.UpdateStrategy': ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'PropertyBinding.UpdateStrategy': ...
        @staticmethod
        def values() -> typing.MutableSequence['PropertyBinding.UpdateStrategy']: ...

class PropertyChangeProxyTargetBinding(TargetBinding):
    def __init__(self, object: typing.Any, string: str, propertyChangeListener: java.beans.PropertyChangeListener): ...
    def updateTargetValue(self, object: typing.Any) -> None: ...

class SwingTimerTriggerBinding(TriggerBinding):
    def __init__(self): ...
    def createBinding(self, sourceBinding: SourceBinding, targetBinding: TargetBinding) -> FullBinding: ...

class AbstractFullBinding(FullBinding):
    def __init__(self): ...
    def getConverter(self) -> groovy.lang.Closure: ...
    def getReverseConverter(self) -> groovy.lang.Closure: ...
    def getSourceBinding(self) -> SourceBinding: ...
    def getTargetBinding(self) -> TargetBinding: ...
    def getValidator(self) -> groovy.lang.Closure: ...
    def reverseUpdate(self) -> None: ...
    def setConverter(self, closure: groovy.lang.Closure) -> None: ...
    def setReverseConverter(self, closure: groovy.lang.Closure) -> None: ...
    def setSourceBinding(self, sourceBinding: SourceBinding) -> None: ...
    def setTargetBinding(self, targetBinding: TargetBinding) -> None: ...
    def setValidator(self, closure: groovy.lang.Closure) -> None: ...
    def update(self) -> None: ...

class MutualPropertyBinding(FullBinding):
    def bind(self) -> None: ...
    def getConverter(self) -> groovy.lang.Closure: ...
    def getReverseConverter(self) -> groovy.lang.Closure: ...
    def getSourceBinding(self) -> SourceBinding: ...
    def getTargetBinding(self) -> TargetBinding: ...
    def getValidator(self) -> groovy.lang.Closure: ...
    def rebind(self) -> None: ...
    def reverseUpdate(self) -> None: ...
    def setConverter(self, closure: groovy.lang.Closure) -> None: ...
    def setReverseConverter(self, closure: groovy.lang.Closure) -> None: ...
    def setSourceBinding(self, sourceBinding: SourceBinding) -> None: ...
    def setTargetBinding(self, targetBinding: TargetBinding) -> None: ...
    def setValidator(self, closure: groovy.lang.Closure) -> None: ...
    def unbind(self) -> None: ...
    def update(self) -> None: ...

class PropertyPathFullBinding(AbstractFullBinding, java.beans.PropertyChangeListener):
    def __init__(self): ...
    def bind(self) -> None: ...
    def propertyChange(self, propertyChangeEvent: java.beans.PropertyChangeEvent) -> None: ...
    def rebind(self) -> None: ...
    def unbind(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.binding")``.

    AbstractFullBinding: typing.Type[AbstractFullBinding]
    AggregateBinding: typing.Type[AggregateBinding]
    BindPath: typing.Type[BindPath]
    BindingProxy: typing.Type[BindingProxy]
    BindingUpdatable: typing.Type[BindingUpdatable]
    ClosureSourceBinding: typing.Type[ClosureSourceBinding]
    ClosureTriggerBinding: typing.Type[ClosureTriggerBinding]
    EventTriggerBinding: typing.Type[EventTriggerBinding]
    FullBinding: typing.Type[FullBinding]
    MutualPropertyBinding: typing.Type[MutualPropertyBinding]
    PropertyBinding: typing.Type[PropertyBinding]
    PropertyChangeProxyTargetBinding: typing.Type[PropertyChangeProxyTargetBinding]
    PropertyPathFullBinding: typing.Type[PropertyPathFullBinding]
    SourceBinding: typing.Type[SourceBinding]
    SwingTimerTriggerBinding: typing.Type[SwingTimerTriggerBinding]
    TargetBinding: typing.Type[TargetBinding]
    TriggerBinding: typing.Type[TriggerBinding]
