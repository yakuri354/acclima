
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import groovy.lang
import java.util
import org.codehaus.groovy.macro.matcher
import org.codehaus.groovy.syntax
import typing



_ConstraintPredicate__T = typing.TypeVar('_ConstraintPredicate__T')  # <T>
class ConstraintPredicate(typing.Generic[_ConstraintPredicate__T]):
    def apply(self, t: _ConstraintPredicate__T) -> bool: ...

class MatchingConstraintsBuilder(groovy.lang.GroovyObject):
    def __init__(self): ...
    def anyToken(self) -> 'MatchingConstraintsBuilder': ...
    def build(self, closure: groovy.lang.Closure) -> org.codehaus.groovy.macro.matcher.MatchingConstraints: ...
    def eventually(self, closure: groovy.lang.Closure[bool]) -> 'MatchingConstraintsBuilder': ...
    def getEventually(self) -> ConstraintPredicate[org.codehaus.groovy.macro.matcher.TreeContext]: ...
    def getPlaceholders(self) -> java.util.Set[str]: ...
    def getTokenPredicate(self) -> ConstraintPredicate[org.codehaus.groovy.syntax.Token]: ...
    def placeholder(self, *string: str) -> 'MatchingConstraintsBuilder': ...
    def propertyMissing(self, string: str) -> typing.Any: ...
    def setEventually(self, constraintPredicate: ConstraintPredicate[org.codehaus.groovy.macro.matcher.TreeContext]) -> None: ...
    def setPlaceholders(self, set: java.util.Set[str]) -> None: ...
    def setTokenPredicate(self, constraintPredicate: ConstraintPredicate[org.codehaus.groovy.syntax.Token]) -> None: ...
    def token(self, closure: groovy.lang.Closure[bool]) -> 'MatchingConstraintsBuilder': ...

class AnyTokenMatch(ConstraintPredicate[org.codehaus.groovy.syntax.Token], groovy.lang.GroovyObject):
    INSTANCE: typing.ClassVar['AnyTokenMatch'] = ...
    def apply(self, token: org.codehaus.groovy.syntax.Token) -> bool: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.groovy.macro.matcher.internal")``.

    AnyTokenMatch: typing.Type[AnyTokenMatch]
    ConstraintPredicate: typing.Type[ConstraintPredicate]
    MatchingConstraintsBuilder: typing.Type[MatchingConstraintsBuilder]
