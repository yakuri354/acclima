
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.net
import javax.xml.transform
import jpype
import jpype.protocol
import typing



class EscapingWriterFactory:
    @typing.overload
    def createEscapingWriterFor(self, outputStream: java.io.OutputStream, string: str) -> java.io.Writer: ...
    @typing.overload
    def createEscapingWriterFor(self, writer: java.io.Writer, string: str) -> java.io.Writer: ...

class Stax2Result(javax.xml.transform.Result):
    def constructOutputStream(self) -> java.io.OutputStream: ...
    def constructWriter(self) -> java.io.Writer: ...
    def getEncoding(self) -> str: ...
    def getPublicId(self) -> str: ...
    def getSystemId(self) -> str: ...
    def setEncoding(self, string: str) -> None: ...
    def setPublicId(self, string: str) -> None: ...
    def setSystemId(self, string: str) -> None: ...

class Stax2Source(javax.xml.transform.Source):
    def constructInputStream(self) -> java.io.InputStream: ...
    def constructReader(self) -> java.io.Reader: ...
    def getEncoding(self) -> str: ...
    def getPublicId(self) -> str: ...
    def getReference(self) -> java.net.URL: ...
    def getSystemId(self) -> str: ...
    def setEncoding(self, string: str) -> None: ...
    def setPublicId(self, string: str) -> None: ...
    def setSystemId(self, string: str) -> None: ...

class Stax2BlockResult(Stax2Result):
    def constructOutputStream(self) -> java.io.OutputStream: ...
    def constructWriter(self) -> java.io.Writer: ...

class Stax2BlockSource(Stax2Source):
    def constructInputStream(self) -> java.io.InputStream: ...
    def constructReader(self) -> java.io.Reader: ...
    def getReference(self) -> java.net.URL: ...

class Stax2ReferentialResult(Stax2Result):
    def constructOutputStream(self) -> java.io.OutputStream: ...
    def constructWriter(self) -> java.io.Writer: ...

class Stax2ReferentialSource(Stax2Source):
    def constructInputStream(self) -> java.io.InputStream: ...
    def constructReader(self) -> java.io.Reader: ...
    def getReference(self) -> java.net.URL: ...
    def getSystemId(self) -> str: ...

class Stax2ByteArraySource(Stax2BlockSource):
    def __init__(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int): ...
    def constructInputStream(self) -> java.io.InputStream: ...
    def constructReader(self) -> java.io.Reader: ...
    def getBuffer(self) -> typing.MutableSequence[int]: ...
    def getBufferEnd(self) -> int: ...
    def getBufferLength(self) -> int: ...
    def getBufferStart(self) -> int: ...

class Stax2CharArraySource(Stax2BlockSource):
    def __init__(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int): ...
    def constructInputStream(self) -> java.io.InputStream: ...
    def constructReader(self) -> java.io.Reader: ...
    def getBuffer(self) -> typing.MutableSequence[str]: ...
    def getBufferLength(self) -> int: ...
    def getBufferStart(self) -> int: ...

class Stax2FileResult(Stax2ReferentialResult):
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]): ...
    def constructOutputStream(self) -> java.io.OutputStream: ...
    def constructWriter(self) -> java.io.Writer: ...
    def getFile(self) -> java.io.File: ...

class Stax2FileSource(Stax2ReferentialSource):
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]): ...
    def constructInputStream(self) -> java.io.InputStream: ...
    def constructReader(self) -> java.io.Reader: ...
    def getFile(self) -> java.io.File: ...
    def getReference(self) -> java.net.URL: ...

class Stax2StringSource(Stax2BlockSource):
    def __init__(self, string: str): ...
    def constructInputStream(self) -> java.io.InputStream: ...
    def constructReader(self) -> java.io.Reader: ...
    def getText(self) -> str: ...

class Stax2URLSource(Stax2ReferentialSource):
    def __init__(self, uRL: java.net.URL): ...
    def constructInputStream(self) -> java.io.InputStream: ...
    def constructReader(self) -> java.io.Reader: ...
    def getReference(self) -> java.net.URL: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.stax2.io")``.

    EscapingWriterFactory: typing.Type[EscapingWriterFactory]
    Stax2BlockResult: typing.Type[Stax2BlockResult]
    Stax2BlockSource: typing.Type[Stax2BlockSource]
    Stax2ByteArraySource: typing.Type[Stax2ByteArraySource]
    Stax2CharArraySource: typing.Type[Stax2CharArraySource]
    Stax2FileResult: typing.Type[Stax2FileResult]
    Stax2FileSource: typing.Type[Stax2FileSource]
    Stax2ReferentialResult: typing.Type[Stax2ReferentialResult]
    Stax2ReferentialSource: typing.Type[Stax2ReferentialSource]
    Stax2Result: typing.Type[Stax2Result]
    Stax2Source: typing.Type[Stax2Source]
    Stax2StringSource: typing.Type[Stax2StringSource]
    Stax2URLSource: typing.Type[Stax2URLSource]
