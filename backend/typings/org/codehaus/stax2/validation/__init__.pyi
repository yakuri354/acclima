
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.net
import javax.xml.namespace
import javax.xml.stream
import jpype
import jpype.protocol
import typing



class AttributeContainer:
    def addDefaultAttribute(self, string: str, string2: str, string3: str, string4: str) -> int: ...
    def getAttributeCount(self) -> int: ...

class Validatable:
    def setValidationProblemHandler(self, validationProblemHandler: 'ValidationProblemHandler') -> 'ValidationProblemHandler': ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidationSchema: 'XMLValidationSchema') -> 'XMLValidator': ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidator: 'XMLValidator') -> 'XMLValidator': ...
    def validateAgainst(self, xMLValidationSchema: 'XMLValidationSchema') -> 'XMLValidator': ...

class ValidationContext:
    def addDefaultAttribute(self, string: str, string2: str, string3: str, string4: str) -> int: ...
    def findAttributeIndex(self, string: str, string2: str) -> int: ...
    def getAttributeCount(self) -> int: ...
    def getAttributeLocalName(self, int: int) -> str: ...
    def getAttributeNamespace(self, int: int) -> str: ...
    def getAttributePrefix(self, int: int) -> str: ...
    def getAttributeType(self, int: int) -> str: ...
    @typing.overload
    def getAttributeValue(self, int: int) -> str: ...
    @typing.overload
    def getAttributeValue(self, string: str, string2: str) -> str: ...
    def getBaseUri(self) -> str: ...
    def getCurrentElementName(self) -> javax.xml.namespace.QName: ...
    def getNamespaceURI(self, string: str) -> str: ...
    def getValidationLocation(self) -> javax.xml.stream.Location: ...
    def getXmlVersion(self) -> str: ...
    def isNotationDeclared(self, string: str) -> bool: ...
    def isUnparsedEntityDeclared(self, string: str) -> bool: ...
    def reportProblem(self, xMLValidationProblem: 'XMLValidationProblem') -> None: ...

class ValidationProblemHandler:
    def reportProblem(self, xMLValidationProblem: 'XMLValidationProblem') -> None: ...

class XMLValidationException(javax.xml.stream.XMLStreamException):
    @staticmethod
    def createException(xMLValidationProblem: 'XMLValidationProblem') -> 'XMLValidationException': ...
    def getValidationProblem(self) -> 'XMLValidationProblem': ...

class XMLValidationProblem:
    SEVERITY_WARNING: typing.ClassVar[int] = ...
    SEVERITY_ERROR: typing.ClassVar[int] = ...
    SEVERITY_FATAL: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, string: str): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, string: str, int: int): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, string: str, int: int, string2: str): ...
    def getLocation(self) -> javax.xml.stream.Location: ...
    def getMessage(self) -> str: ...
    def getReporter(self) -> 'XMLValidator': ...
    def getSeverity(self) -> int: ...
    def getType(self) -> str: ...
    def setLocation(self, location: javax.xml.stream.Location) -> None: ...
    def setReporter(self, xMLValidator: 'XMLValidator') -> None: ...
    def setType(self, string: str) -> None: ...
    def toException(self) -> XMLValidationException: ...

class XMLValidationSchema:
    SCHEMA_ID_DTD: typing.ClassVar[str] = ...
    SCHEMA_ID_RELAXNG: typing.ClassVar[str] = ...
    SCHEMA_ID_W3C_SCHEMA: typing.ClassVar[str] = ...
    SCHEMA_ID_TREX: typing.ClassVar[str] = ...
    def createValidator(self, validationContext: ValidationContext) -> 'XMLValidator': ...
    def getSchemaType(self) -> str: ...

class XMLValidationSchemaFactory:
    INTERNAL_ID_SCHEMA_DTD: typing.ClassVar[str] = ...
    INTERNAL_ID_SCHEMA_RELAXNG: typing.ClassVar[str] = ...
    INTERNAL_ID_SCHEMA_W3C: typing.ClassVar[str] = ...
    INTERNAL_ID_SCHEMA_TREX: typing.ClassVar[str] = ...
    SYSTEM_PROPERTY_FOR_IMPL: typing.ClassVar[str] = ...
    SERVICE_DEFINITION_PATH: typing.ClassVar[str] = ...
    P_IS_NAMESPACE_AWARE: typing.ClassVar[str] = ...
    P_ENABLE_CACHING: typing.ClassVar[str] = ...
    @typing.overload
    def createSchema(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> XMLValidationSchema: ...
    @typing.overload
    def createSchema(self, inputStream: java.io.InputStream, string: str, string2: str, string3: str) -> XMLValidationSchema: ...
    @typing.overload
    def createSchema(self, reader: java.io.Reader, string: str, string2: str) -> XMLValidationSchema: ...
    @typing.overload
    def createSchema(self, uRL: java.net.URL) -> XMLValidationSchema: ...
    @typing.overload
    def createSchema(self, inputStream: java.io.InputStream) -> XMLValidationSchema: ...
    @typing.overload
    def createSchema(self, inputStream: java.io.InputStream, string: str) -> XMLValidationSchema: ...
    @typing.overload
    def createSchema(self, reader: java.io.Reader) -> XMLValidationSchema: ...
    def getProperty(self, string: str) -> typing.Any: ...
    def getSchemaType(self) -> str: ...
    def isPropertySupported(self, string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def newInstance(string: str) -> 'XMLValidationSchemaFactory': ...
    @typing.overload
    @staticmethod
    def newInstance(string: str, classLoader: java.lang.ClassLoader) -> 'XMLValidationSchemaFactory': ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...

class XMLValidator:
    CONTENT_ALLOW_NONE: typing.ClassVar[int] = ...
    CONTENT_ALLOW_WS: typing.ClassVar[int] = ...
    CONTENT_ALLOW_WS_NONSTRICT: typing.ClassVar[int] = ...
    CONTENT_ALLOW_VALIDATABLE_TEXT: typing.ClassVar[int] = ...
    CONTENT_ALLOW_ANY_TEXT: typing.ClassVar[int] = ...
    CONTENT_ALLOW_UNDEFINED: typing.ClassVar[int] = ...
    def getAttributeType(self, int: int) -> str: ...
    def getIdAttrIndex(self) -> int: ...
    def getNotationAttrIndex(self) -> int: ...
    def getSchema(self) -> XMLValidationSchema: ...
    def getSchemaType(self) -> str: ...
    @typing.overload
    def validateAttribute(self, string: str, string2: str, string3: str, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> str: ...
    @typing.overload
    def validateAttribute(self, string: str, string2: str, string3: str, string4: str) -> str: ...
    def validateElementAndAttributes(self) -> int: ...
    def validateElementEnd(self, string: str, string2: str, string3: str) -> int: ...
    def validateElementStart(self, string: str, string2: str, string3: str) -> None: ...
    @typing.overload
    def validateText(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int, boolean: bool) -> None: ...
    @typing.overload
    def validateText(self, string: str, boolean: bool) -> None: ...
    def validationCompleted(self, boolean: bool) -> None: ...

class DTDValidationSchema(XMLValidationSchema):
    def getEntityCount(self) -> int: ...
    def getNotationCount(self) -> int: ...

class ValidatorPair(XMLValidator):
    ATTR_TYPE_DEFAULT: typing.ClassVar[str] = ...
    def __init__(self, xMLValidator: XMLValidator, xMLValidator2: XMLValidator): ...
    def getAttributeType(self, int: int) -> str: ...
    def getIdAttrIndex(self) -> int: ...
    def getNotationAttrIndex(self) -> int: ...
    def getSchema(self) -> XMLValidationSchema: ...
    @typing.overload
    @staticmethod
    def removeValidator(xMLValidator: XMLValidator, xMLValidationSchema: XMLValidationSchema, xMLValidatorArray: typing.Union[typing.List[XMLValidator], jpype.JArray]) -> bool: ...
    @typing.overload
    @staticmethod
    def removeValidator(xMLValidator: XMLValidator, xMLValidator2: XMLValidator, xMLValidatorArray: typing.Union[typing.List[XMLValidator], jpype.JArray]) -> bool: ...
    @typing.overload
    def validateAttribute(self, string: str, string2: str, string3: str, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> str: ...
    @typing.overload
    def validateAttribute(self, string: str, string2: str, string3: str, string4: str) -> str: ...
    def validateElementAndAttributes(self) -> int: ...
    def validateElementEnd(self, string: str, string2: str, string3: str) -> int: ...
    def validateElementStart(self, string: str, string2: str, string3: str) -> None: ...
    @typing.overload
    def validateText(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int, boolean: bool) -> None: ...
    @typing.overload
    def validateText(self, string: str, boolean: bool) -> None: ...
    def validationCompleted(self, boolean: bool) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.stax2.validation")``.

    AttributeContainer: typing.Type[AttributeContainer]
    DTDValidationSchema: typing.Type[DTDValidationSchema]
    Validatable: typing.Type[Validatable]
    ValidationContext: typing.Type[ValidationContext]
    ValidationProblemHandler: typing.Type[ValidationProblemHandler]
    ValidatorPair: typing.Type[ValidatorPair]
    XMLValidationException: typing.Type[XMLValidationException]
    XMLValidationProblem: typing.Type[XMLValidationProblem]
    XMLValidationSchema: typing.Type[XMLValidationSchema]
    XMLValidationSchemaFactory: typing.Type[XMLValidationSchemaFactory]
    XMLValidator: typing.Type[XMLValidator]
