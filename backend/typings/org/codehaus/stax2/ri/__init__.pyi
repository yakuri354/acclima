
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import decimal
import java.io
import java.math
import java.util
import javax.xml.namespace
import javax.xml.stream
import javax.xml.stream.events
import javax.xml.stream.util
import jpype
import org.codehaus.stax2
import org.codehaus.stax2.evt
import org.codehaus.stax2.ri.dom
import org.codehaus.stax2.ri.evt
import org.codehaus.stax2.ri.typed
import org.codehaus.stax2.typed
import org.codehaus.stax2.util
import org.codehaus.stax2.validation
import typing



class EmptyIterator(java.util.Iterator[typing.Any]):
    _getInstance__T = typing.TypeVar('_getInstance__T')  # <T>
    @staticmethod
    def getInstance() -> java.util.Iterator[_getInstance__T]: ...
    def hasNext(self) -> bool: ...
    def next(self) -> typing.Any: ...
    def remove(self) -> None: ...

class EmptyNamespaceContext(javax.xml.namespace.NamespaceContext):
    @staticmethod
    def getInstance() -> 'EmptyNamespaceContext': ...
    def getNamespaceURI(self, string: str) -> str: ...
    def getPrefix(self, string: str) -> str: ...
    def getPrefixes(self, string: str) -> java.util.Iterator[str]: ...

_SingletonIterator__T = typing.TypeVar('_SingletonIterator__T')  # <T>
class SingletonIterator(java.util.Iterator[_SingletonIterator__T], typing.Generic[_SingletonIterator__T]):
    def __init__(self, t: _SingletonIterator__T): ...
    _create__T = typing.TypeVar('_create__T')  # <T>
    @staticmethod
    def create(t: _create__T) -> 'SingletonIterator'[_create__T]: ...
    def hasNext(self) -> bool: ...
    def next(self) -> _SingletonIterator__T: ...
    def remove(self) -> None: ...

class Stax2EventFactoryImpl(org.codehaus.stax2.evt.XMLEventFactory2):
    def __init__(self): ...
    @typing.overload
    def createAttribute(self, string: str, string2: str) -> javax.xml.stream.events.Attribute: ...
    @typing.overload
    def createAttribute(self, string: str, string2: str, string3: str, string4: str) -> javax.xml.stream.events.Attribute: ...
    @typing.overload
    def createAttribute(self, qName: javax.xml.namespace.QName, string: str) -> javax.xml.stream.events.Attribute: ...
    def createCData(self, string: str) -> javax.xml.stream.events.Characters: ...
    def createCharacters(self, string: str) -> javax.xml.stream.events.Characters: ...
    def createComment(self, string: str) -> javax.xml.stream.events.Comment: ...
    @typing.overload
    def createDTD(self, string: str) -> javax.xml.stream.events.DTD: ...
    @typing.overload
    def createDTD(self, string: str, string2: str, string3: str, string4: str) -> org.codehaus.stax2.evt.DTD2: ...
    @typing.overload
    def createDTD(self, string: str, string2: str, string3: str, string4: str, object: typing.Any) -> org.codehaus.stax2.evt.DTD2: ...
    def createEndDocument(self) -> javax.xml.stream.events.EndDocument: ...
    @typing.overload
    def createEndElement(self, string: str, string2: str, string3: str) -> javax.xml.stream.events.EndElement: ...
    @typing.overload
    def createEndElement(self, string: str, string2: str, string3: str, iterator: java.util.Iterator) -> javax.xml.stream.events.EndElement: ...
    @typing.overload
    def createEndElement(self, qName: javax.xml.namespace.QName, iterator: java.util.Iterator) -> javax.xml.stream.events.EndElement: ...
    def createEntityReference(self, string: str, entityDeclaration: javax.xml.stream.events.EntityDeclaration) -> javax.xml.stream.events.EntityReference: ...
    def createIgnorableSpace(self, string: str) -> javax.xml.stream.events.Characters: ...
    @typing.overload
    def createNamespace(self, string: str) -> javax.xml.stream.events.Namespace: ...
    @typing.overload
    def createNamespace(self, string: str, string2: str) -> javax.xml.stream.events.Namespace: ...
    def createProcessingInstruction(self, string: str, string2: str) -> javax.xml.stream.events.ProcessingInstruction: ...
    def createSpace(self, string: str) -> javax.xml.stream.events.Characters: ...
    @typing.overload
    def createStartDocument(self) -> javax.xml.stream.events.StartDocument: ...
    @typing.overload
    def createStartDocument(self, string: str) -> javax.xml.stream.events.StartDocument: ...
    @typing.overload
    def createStartDocument(self, string: str, string2: str) -> javax.xml.stream.events.StartDocument: ...
    @typing.overload
    def createStartDocument(self, string: str, string2: str, boolean: bool) -> javax.xml.stream.events.StartDocument: ...
    @typing.overload
    def createStartElement(self, string: str, string2: str, string3: str) -> javax.xml.stream.events.StartElement: ...
    @typing.overload
    def createStartElement(self, string: str, string2: str, string3: str, iterator: java.util.Iterator, iterator2: java.util.Iterator) -> javax.xml.stream.events.StartElement: ...
    @typing.overload
    def createStartElement(self, string: str, string2: str, string3: str, iterator: java.util.Iterator, iterator2: java.util.Iterator, namespaceContext: javax.xml.namespace.NamespaceContext) -> javax.xml.stream.events.StartElement: ...
    @typing.overload
    def createStartElement(self, qName: javax.xml.namespace.QName, iterator: java.util.Iterator, iterator2: java.util.Iterator) -> javax.xml.stream.events.StartElement: ...
    def setLocation(self, location: javax.xml.stream.Location) -> None: ...

class Stax2EventReaderImpl(org.codehaus.stax2.XMLEventReader2, javax.xml.stream.XMLStreamConstants):
    def close(self) -> None: ...
    def getElementText(self) -> str: ...
    def getProperty(self, string: str) -> typing.Any: ...
    def hasNext(self) -> bool: ...
    def hasNextEvent(self) -> bool: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def next(self) -> typing.Any: ...
    def nextEvent(self) -> javax.xml.stream.events.XMLEvent: ...
    def nextTag(self) -> javax.xml.stream.events.XMLEvent: ...
    def peek(self) -> javax.xml.stream.events.XMLEvent: ...
    def remove(self) -> None: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...

class Stax2EventWriterImpl(javax.xml.stream.XMLEventWriter, javax.xml.stream.XMLStreamConstants):
    def __init__(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2): ...
    @typing.overload
    def add(self, xMLEventReader: javax.xml.stream.XMLEventReader) -> None: ...
    @typing.overload
    def add(self, xMLEvent: javax.xml.stream.events.XMLEvent) -> None: ...
    def close(self) -> None: ...
    def flush(self) -> None: ...
    def getNamespaceContext(self) -> javax.xml.namespace.NamespaceContext: ...
    def getPrefix(self, string: str) -> str: ...
    def setDefaultNamespace(self, string: str) -> None: ...
    def setNamespaceContext(self, namespaceContext: javax.xml.namespace.NamespaceContext) -> None: ...
    def setPrefix(self, string: str, string2: str) -> None: ...

class Stax2FilteredStreamReader(org.codehaus.stax2.util.StreamReader2Delegate, javax.xml.stream.XMLStreamConstants):
    def __init__(self, xMLStreamReader: javax.xml.stream.XMLStreamReader, streamFilter: javax.xml.stream.StreamFilter): ...
    def next(self) -> int: ...
    def nextTag(self) -> int: ...

class Stax2LocationAdapter(org.codehaus.stax2.XMLStreamLocation2):
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, location2: javax.xml.stream.Location): ...
    def getCharacterOffset(self) -> int: ...
    def getColumnNumber(self) -> int: ...
    def getContext(self) -> org.codehaus.stax2.XMLStreamLocation2: ...
    def getLineNumber(self) -> int: ...
    def getPublicId(self) -> str: ...
    def getSystemId(self) -> str: ...

class Stax2ReaderAdapter(javax.xml.stream.util.StreamReaderDelegate, org.codehaus.stax2.XMLStreamReader2, org.codehaus.stax2.AttributeInfo, org.codehaus.stax2.DTDInfo, org.codehaus.stax2.LocationInfo):
    def closeCompletely(self) -> None: ...
    def findAttributeIndex(self, string: str, string2: str) -> int: ...
    def getAttributeAs(self, int: int, typedValueDecoder: org.codehaus.stax2.typed.TypedValueDecoder) -> None: ...
    def getAttributeAsArray(self, int: int, typedArrayDecoder: org.codehaus.stax2.typed.TypedArrayDecoder) -> int: ...
    @typing.overload
    def getAttributeAsBinary(self, int: int) -> typing.MutableSequence[int]: ...
    @typing.overload
    def getAttributeAsBinary(self, int: int, base64Variant: org.codehaus.stax2.typed.Base64Variant) -> typing.MutableSequence[int]: ...
    def getAttributeAsBoolean(self, int: int) -> bool: ...
    def getAttributeAsDecimal(self, int: int) -> java.math.BigDecimal: ...
    def getAttributeAsDouble(self, int: int) -> float: ...
    def getAttributeAsDoubleArray(self, int: int) -> typing.MutableSequence[float]: ...
    def getAttributeAsFloat(self, int: int) -> float: ...
    def getAttributeAsFloatArray(self, int: int) -> typing.MutableSequence[float]: ...
    def getAttributeAsInt(self, int: int) -> int: ...
    def getAttributeAsIntArray(self, int: int) -> typing.MutableSequence[int]: ...
    def getAttributeAsInteger(self, int: int) -> java.math.BigInteger: ...
    def getAttributeAsLong(self, int: int) -> int: ...
    def getAttributeAsLongArray(self, int: int) -> typing.MutableSequence[int]: ...
    def getAttributeAsQName(self, int: int) -> javax.xml.namespace.QName: ...
    def getAttributeIndex(self, string: str, string2: str) -> int: ...
    def getAttributeInfo(self) -> org.codehaus.stax2.AttributeInfo: ...
    def getCurrentLocation(self) -> org.codehaus.stax2.XMLStreamLocation2: ...
    def getDTDInfo(self) -> org.codehaus.stax2.DTDInfo: ...
    def getDTDInternalSubset(self) -> str: ...
    def getDTDPublicId(self) -> str: ...
    def getDTDRootName(self) -> str: ...
    def getDTDSystemId(self) -> str: ...
    def getDepth(self) -> int: ...
    def getElementAs(self, typedValueDecoder: org.codehaus.stax2.typed.TypedValueDecoder) -> None: ...
    @typing.overload
    def getElementAsBinary(self) -> typing.MutableSequence[int]: ...
    @typing.overload
    def getElementAsBinary(self, base64Variant: org.codehaus.stax2.typed.Base64Variant) -> typing.MutableSequence[int]: ...
    def getElementAsBoolean(self) -> bool: ...
    def getElementAsDecimal(self) -> java.math.BigDecimal: ...
    def getElementAsDouble(self) -> float: ...
    def getElementAsFloat(self) -> float: ...
    def getElementAsInt(self) -> int: ...
    def getElementAsInteger(self) -> java.math.BigInteger: ...
    def getElementAsLong(self) -> int: ...
    def getElementAsQName(self) -> javax.xml.namespace.QName: ...
    def getElementText(self) -> str: ...
    def getEndLocation(self) -> org.codehaus.stax2.XMLStreamLocation2: ...
    def getEndingByteOffset(self) -> int: ...
    def getEndingCharOffset(self) -> int: ...
    def getFeature(self, string: str) -> typing.Any: ...
    def getIdAttributeIndex(self) -> int: ...
    def getLocationInfo(self) -> org.codehaus.stax2.LocationInfo: ...
    def getNonTransientNamespaceContext(self) -> javax.xml.namespace.NamespaceContext: ...
    def getNotationAttributeIndex(self) -> int: ...
    def getPrefixedName(self) -> str: ...
    def getProcessedDTD(self) -> typing.Any: ...
    def getProcessedDTDSchema(self) -> org.codehaus.stax2.validation.DTDValidationSchema: ...
    def getStartLocation(self) -> org.codehaus.stax2.XMLStreamLocation2: ...
    def getStartingByteOffset(self) -> int: ...
    def getStartingCharOffset(self) -> int: ...
    @typing.overload
    def getText(self, writer: java.io.Writer, boolean: bool) -> int: ...
    @typing.overload
    def getText(self) -> str: ...
    def isEmptyElement(self) -> bool: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def next(self) -> int: ...
    def readElementAsArray(self, typedArrayDecoder: org.codehaus.stax2.typed.TypedArrayDecoder) -> int: ...
    @typing.overload
    def readElementAsBinary(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int) -> int: ...
    @typing.overload
    def readElementAsBinary(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int, base64Variant: org.codehaus.stax2.typed.Base64Variant) -> int: ...
    def readElementAsDoubleArray(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> int: ...
    def readElementAsFloatArray(self, floatArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> int: ...
    def readElementAsIntArray(self, intArray: typing.Union[typing.List[int], jpype.JArray], int2: int, int3: int) -> int: ...
    def readElementAsLongArray(self, longArray: typing.Union[typing.List[int], jpype.JArray], int: int, int2: int) -> int: ...
    def setFeature(self, string: str, object: typing.Any) -> None: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...
    def setValidationProblemHandler(self, validationProblemHandler: org.codehaus.stax2.validation.ValidationProblemHandler) -> org.codehaus.stax2.validation.ValidationProblemHandler: ...
    def skipElement(self) -> None: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidator: org.codehaus.stax2.validation.XMLValidator) -> org.codehaus.stax2.validation.XMLValidator: ...
    def validateAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...
    @staticmethod
    def wrapIfNecessary(xMLStreamReader: javax.xml.stream.XMLStreamReader) -> org.codehaus.stax2.XMLStreamReader2: ...

class Stax2ReaderImpl(org.codehaus.stax2.XMLStreamReader2, org.codehaus.stax2.AttributeInfo, org.codehaus.stax2.DTDInfo, org.codehaus.stax2.LocationInfo):
    def closeCompletely(self) -> None: ...
    def findAttributeIndex(self, string: str, string2: str) -> int: ...
    def getAttributeAs(self, int: int, typedValueDecoder: org.codehaus.stax2.typed.TypedValueDecoder) -> None: ...
    def getAttributeAsArray(self, int: int, typedArrayDecoder: org.codehaus.stax2.typed.TypedArrayDecoder) -> int: ...
    @typing.overload
    def getAttributeAsBinary(self, base64Variant: org.codehaus.stax2.typed.Base64Variant, int: int) -> typing.MutableSequence[int]: ...
    @typing.overload
    def getAttributeAsBinary(self, int: int, base64Variant: org.codehaus.stax2.typed.Base64Variant) -> typing.MutableSequence[int]: ...
    @typing.overload
    def getAttributeAsBinary(self, int: int) -> typing.MutableSequence[int]: ...
    def getAttributeAsBoolean(self, int: int) -> bool: ...
    def getAttributeAsDecimal(self, int: int) -> java.math.BigDecimal: ...
    def getAttributeAsDouble(self, int: int) -> float: ...
    def getAttributeAsDoubleArray(self, int: int) -> typing.MutableSequence[float]: ...
    def getAttributeAsFloat(self, int: int) -> float: ...
    def getAttributeAsFloatArray(self, int: int) -> typing.MutableSequence[float]: ...
    def getAttributeAsInt(self, int: int) -> int: ...
    def getAttributeAsIntArray(self, int: int) -> typing.MutableSequence[int]: ...
    def getAttributeAsInteger(self, int: int) -> java.math.BigInteger: ...
    def getAttributeAsLong(self, int: int) -> int: ...
    def getAttributeAsLongArray(self, int: int) -> typing.MutableSequence[int]: ...
    def getAttributeAsQName(self, int: int) -> javax.xml.namespace.QName: ...
    def getAttributeIndex(self, string: str, string2: str) -> int: ...
    def getAttributeInfo(self) -> org.codehaus.stax2.AttributeInfo: ...
    def getCurrentLocation(self) -> org.codehaus.stax2.XMLStreamLocation2: ...
    def getDTDInfo(self) -> org.codehaus.stax2.DTDInfo: ...
    def getDTDInternalSubset(self) -> str: ...
    def getDTDPublicId(self) -> str: ...
    def getDTDRootName(self) -> str: ...
    def getDTDSystemId(self) -> str: ...
    def getDepth(self) -> int: ...
    def getElementAs(self, typedValueDecoder: org.codehaus.stax2.typed.TypedValueDecoder) -> None: ...
    @typing.overload
    def getElementAsBinary(self, base64Variant: org.codehaus.stax2.typed.Base64Variant) -> typing.MutableSequence[int]: ...
    @typing.overload
    def getElementAsBinary(self) -> typing.MutableSequence[int]: ...
    def getElementAsBoolean(self) -> bool: ...
    def getElementAsDecimal(self) -> java.math.BigDecimal: ...
    def getElementAsDouble(self) -> float: ...
    def getElementAsFloat(self) -> float: ...
    def getElementAsInt(self) -> int: ...
    def getElementAsInteger(self) -> java.math.BigInteger: ...
    def getElementAsLong(self) -> int: ...
    def getElementAsQName(self) -> javax.xml.namespace.QName: ...
    def getEndLocation(self) -> org.codehaus.stax2.XMLStreamLocation2: ...
    def getEndingByteOffset(self) -> int: ...
    def getEndingCharOffset(self) -> int: ...
    def getFeature(self, string: str) -> typing.Any: ...
    def getIdAttributeIndex(self) -> int: ...
    def getLocationInfo(self) -> org.codehaus.stax2.LocationInfo: ...
    def getNonTransientNamespaceContext(self) -> javax.xml.namespace.NamespaceContext: ...
    def getNotationAttributeIndex(self) -> int: ...
    def getPrefixedName(self) -> str: ...
    def getProcessedDTD(self) -> typing.Any: ...
    def getProcessedDTDSchema(self) -> org.codehaus.stax2.validation.DTDValidationSchema: ...
    def getStartLocation(self) -> org.codehaus.stax2.XMLStreamLocation2: ...
    def getStartingByteOffset(self) -> int: ...
    def getStartingCharOffset(self) -> int: ...
    @typing.overload
    def getText(self) -> str: ...
    @typing.overload
    def getText(self, writer: java.io.Writer, boolean: bool) -> int: ...
    def isEmptyElement(self) -> bool: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def readElementAsArray(self, typedArrayDecoder: org.codehaus.stax2.typed.TypedArrayDecoder) -> int: ...
    @typing.overload
    def readElementAsBinary(self, base64Variant: org.codehaus.stax2.typed.Base64Variant, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int) -> int: ...
    @typing.overload
    def readElementAsBinary(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int, base64Variant: org.codehaus.stax2.typed.Base64Variant) -> int: ...
    @typing.overload
    def readElementAsBinary(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int) -> int: ...
    def readElementAsDoubleArray(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> int: ...
    def readElementAsFloatArray(self, floatArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> int: ...
    def readElementAsIntArray(self, intArray: typing.Union[typing.List[int], jpype.JArray], int2: int, int3: int) -> int: ...
    def readElementAsLongArray(self, longArray: typing.Union[typing.List[int], jpype.JArray], int: int, int2: int) -> int: ...
    def setFeature(self, string: str, object: typing.Any) -> None: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...
    def setValidationProblemHandler(self, validationProblemHandler: org.codehaus.stax2.validation.ValidationProblemHandler) -> org.codehaus.stax2.validation.ValidationProblemHandler: ...
    def skipElement(self) -> None: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidator: org.codehaus.stax2.validation.XMLValidator) -> org.codehaus.stax2.validation.XMLValidator: ...
    def validateAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...

class Stax2Util(javax.xml.stream.XMLStreamConstants):
    @staticmethod
    def eventTypeDesc(int: int) -> str: ...
    @staticmethod
    def trimSpaces(string: str) -> str: ...
    class ByteAggregator:
        def __init__(self): ...
        def addFullBlock(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> typing.MutableSequence[int]: ...
        def aggregateAll(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> typing.MutableSequence[int]: ...
        def startAggregation(self) -> typing.MutableSequence[int]: ...
    class TextBuffer:
        def __init__(self): ...
        def append(self, string: str) -> None: ...
        def get(self) -> str: ...
        def isEmpty(self) -> bool: ...
        def reset(self) -> None: ...

class Stax2WriterAdapter(org.codehaus.stax2.util.StreamWriterDelegate, org.codehaus.stax2.XMLStreamWriter2, javax.xml.stream.XMLStreamConstants):
    def closeCompletely(self) -> None: ...
    def copyEventFromReader(self, xMLStreamReader2: org.codehaus.stax2.XMLStreamReader2, boolean: bool) -> None: ...
    def getEncoding(self) -> str: ...
    def getLocation(self) -> org.codehaus.stax2.XMLStreamLocation2: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...
    def setValidationProblemHandler(self, validationProblemHandler: org.codehaus.stax2.validation.ValidationProblemHandler) -> org.codehaus.stax2.validation.ValidationProblemHandler: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidator: org.codehaus.stax2.validation.XMLValidator) -> org.codehaus.stax2.validation.XMLValidator: ...
    def validateAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...
    @staticmethod
    def wrapIfNecessary(xMLStreamWriter: javax.xml.stream.XMLStreamWriter) -> org.codehaus.stax2.XMLStreamWriter2: ...
    @typing.overload
    def writeBinary(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int) -> None: ...
    @typing.overload
    def writeBinary(self, base64Variant: org.codehaus.stax2.typed.Base64Variant, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int) -> None: ...
    @typing.overload
    def writeBinaryAttribute(self, string: str, string2: str, string3: str, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...
    @typing.overload
    def writeBinaryAttribute(self, base64Variant: org.codehaus.stax2.typed.Base64Variant, string: str, string2: str, string3: str, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...
    def writeBoolean(self, boolean: bool) -> None: ...
    def writeBooleanAttribute(self, string: str, string2: str, string3: str, boolean: bool) -> None: ...
    @typing.overload
    def writeCData(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeCData(self, string: str) -> None: ...
    @typing.overload
    def writeDTD(self, string: str, string2: str, string3: str, string4: str) -> None: ...
    @typing.overload
    def writeDTD(self, string: str) -> None: ...
    def writeDecimal(self, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> None: ...
    def writeDecimalAttribute(self, string: str, string2: str, string3: str, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> None: ...
    def writeDouble(self, double: float) -> None: ...
    def writeDoubleArray(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> None: ...
    def writeDoubleArrayAttribute(self, string: str, string2: str, string3: str, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def writeDoubleAttribute(self, string: str, string2: str, string3: str, double: float) -> None: ...
    def writeFloat(self, float: float) -> None: ...
    def writeFloatArray(self, floatArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> None: ...
    def writeFloatArrayAttribute(self, string: str, string2: str, string3: str, floatArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def writeFloatAttribute(self, string: str, string2: str, string3: str, float: float) -> None: ...
    def writeFullEndElement(self) -> None: ...
    def writeInt(self, int: int) -> None: ...
    def writeIntArray(self, intArray: typing.Union[typing.List[int], jpype.JArray], int2: int, int3: int) -> None: ...
    def writeIntArrayAttribute(self, string: str, string2: str, string3: str, intArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    def writeIntAttribute(self, string: str, string2: str, string3: str, int: int) -> None: ...
    def writeInteger(self, bigInteger: java.math.BigInteger) -> None: ...
    def writeIntegerAttribute(self, string: str, string2: str, string3: str, bigInteger: java.math.BigInteger) -> None: ...
    def writeLong(self, long: int) -> None: ...
    def writeLongArray(self, longArray: typing.Union[typing.List[int], jpype.JArray], int: int, int2: int) -> None: ...
    def writeLongArrayAttribute(self, string: str, string2: str, string3: str, longArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    def writeLongAttribute(self, string: str, string2: str, string3: str, long: int) -> None: ...
    def writeQName(self, qName: javax.xml.namespace.QName) -> None: ...
    def writeQNameAttribute(self, string: str, string2: str, string3: str, qName: javax.xml.namespace.QName) -> None: ...
    @typing.overload
    def writeRaw(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeRaw(self, string: str) -> None: ...
    @typing.overload
    def writeRaw(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def writeSpace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeSpace(self, string: str) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str, string2: str, boolean: bool) -> None: ...
    @typing.overload
    def writeStartDocument(self) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str, string2: str) -> None: ...

class Stax2WriterImpl(org.codehaus.stax2.XMLStreamWriter2, javax.xml.stream.XMLStreamConstants):
    def copyEventFromReader(self, xMLStreamReader2: org.codehaus.stax2.XMLStreamReader2, boolean: bool) -> None: ...
    def getEncoding(self) -> str: ...
    def getLocation(self) -> org.codehaus.stax2.XMLStreamLocation2: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...
    def setValidationProblemHandler(self, validationProblemHandler: org.codehaus.stax2.validation.ValidationProblemHandler) -> org.codehaus.stax2.validation.ValidationProblemHandler: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidator: org.codehaus.stax2.validation.XMLValidator) -> org.codehaus.stax2.validation.XMLValidator: ...
    def validateAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...
    @typing.overload
    def writeCData(self, string: str) -> None: ...
    @typing.overload
    def writeCData(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeDTD(self, string: str) -> None: ...
    @typing.overload
    def writeDTD(self, string: str, string2: str, string3: str, string4: str) -> None: ...
    def writeFullEndElement(self) -> None: ...
    @typing.overload
    def writeRaw(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeRaw(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def writeRaw(self, string: str) -> None: ...
    @typing.overload
    def writeSpace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeSpace(self, string: str) -> None: ...
    @typing.overload
    def writeStartDocument(self) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str, string2: str) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str, string2: str, boolean: bool) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.stax2.ri")``.

    EmptyIterator: typing.Type[EmptyIterator]
    EmptyNamespaceContext: typing.Type[EmptyNamespaceContext]
    SingletonIterator: typing.Type[SingletonIterator]
    Stax2EventFactoryImpl: typing.Type[Stax2EventFactoryImpl]
    Stax2EventReaderImpl: typing.Type[Stax2EventReaderImpl]
    Stax2EventWriterImpl: typing.Type[Stax2EventWriterImpl]
    Stax2FilteredStreamReader: typing.Type[Stax2FilteredStreamReader]
    Stax2LocationAdapter: typing.Type[Stax2LocationAdapter]
    Stax2ReaderAdapter: typing.Type[Stax2ReaderAdapter]
    Stax2ReaderImpl: typing.Type[Stax2ReaderImpl]
    Stax2Util: typing.Type[Stax2Util]
    Stax2WriterAdapter: typing.Type[Stax2WriterAdapter]
    Stax2WriterImpl: typing.Type[Stax2WriterImpl]
    dom: org.codehaus.stax2.ri.dom.__module_protocol__
    evt: org.codehaus.stax2.ri.evt.__module_protocol__
    typed: org.codehaus.stax2.ri.typed.__module_protocol__
