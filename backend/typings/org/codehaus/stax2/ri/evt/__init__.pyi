
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import javax.xml.namespace
import javax.xml.stream
import javax.xml.stream.events
import javax.xml.stream.util
import org.codehaus.stax2
import org.codehaus.stax2.evt
import typing



class BaseEventImpl(org.codehaus.stax2.evt.XMLEvent2):
    def asCharacters(self) -> javax.xml.stream.events.Characters: ...
    def asEndElement(self) -> javax.xml.stream.events.EndElement: ...
    def asStartElement(self) -> javax.xml.stream.events.StartElement: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getEventType(self) -> int: ...
    def getLocation(self) -> javax.xml.stream.Location: ...
    def getSchemaType(self) -> javax.xml.namespace.QName: ...
    def hashCode(self) -> int: ...
    def isAttribute(self) -> bool: ...
    def isCharacters(self) -> bool: ...
    def isEndDocument(self) -> bool: ...
    def isEndElement(self) -> bool: ...
    def isEntityReference(self) -> bool: ...
    def isNamespace(self) -> bool: ...
    def isProcessingInstruction(self) -> bool: ...
    def isStartDocument(self) -> bool: ...
    def isStartElement(self) -> bool: ...
    def toString(self) -> str: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class MergedNsContext(javax.xml.namespace.NamespaceContext):
    @staticmethod
    def construct(namespaceContext: javax.xml.namespace.NamespaceContext, list: java.util.List[javax.xml.stream.events.Namespace]) -> 'MergedNsContext': ...
    def getNamespaceURI(self, string: str) -> str: ...
    def getPrefix(self, string: str) -> str: ...
    def getPrefixes(self, string: str) -> java.util.Iterator[str]: ...

class Stax2EventAllocatorImpl(javax.xml.stream.util.XMLEventAllocator, javax.xml.stream.XMLStreamConstants):
    def __init__(self): ...
    @typing.overload
    def allocate(self, xMLStreamReader: javax.xml.stream.XMLStreamReader) -> javax.xml.stream.events.XMLEvent: ...
    @typing.overload
    def allocate(self, xMLStreamReader: javax.xml.stream.XMLStreamReader, xMLEventConsumer: javax.xml.stream.util.XMLEventConsumer) -> None: ...
    def newInstance(self) -> javax.xml.stream.util.XMLEventAllocator: ...

class Stax2EventReaderAdapter(org.codehaus.stax2.XMLEventReader2):
    def close(self) -> None: ...
    def getElementText(self) -> str: ...
    def getProperty(self, string: str) -> typing.Any: ...
    def hasNext(self) -> bool: ...
    def hasNextEvent(self) -> bool: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def next(self) -> typing.Any: ...
    def nextEvent(self) -> javax.xml.stream.events.XMLEvent: ...
    def nextTag(self) -> javax.xml.stream.events.XMLEvent: ...
    def peek(self) -> javax.xml.stream.events.XMLEvent: ...
    def remove(self) -> None: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...
    @staticmethod
    def wrapIfNecessary(xMLEventReader: javax.xml.stream.XMLEventReader) -> org.codehaus.stax2.XMLEventReader2: ...

class Stax2FilteredEventReader(org.codehaus.stax2.XMLEventReader2, javax.xml.stream.XMLStreamConstants):
    def __init__(self, xMLEventReader2: org.codehaus.stax2.XMLEventReader2, eventFilter: javax.xml.stream.EventFilter): ...
    def close(self) -> None: ...
    def getElementText(self) -> str: ...
    def getProperty(self, string: str) -> typing.Any: ...
    def hasNext(self) -> bool: ...
    def hasNextEvent(self) -> bool: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def next(self) -> typing.Any: ...
    def nextEvent(self) -> javax.xml.stream.events.XMLEvent: ...
    def nextTag(self) -> javax.xml.stream.events.XMLEvent: ...
    def peek(self) -> javax.xml.stream.events.XMLEvent: ...
    def remove(self) -> None: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...

class AttributeEventImpl(BaseEventImpl, javax.xml.stream.events.Attribute):
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, string: str, string2: str, string3: str, string4: str, boolean: bool): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, qName: javax.xml.namespace.QName, string: str, boolean: bool): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDTDType(self) -> str: ...
    def getEventType(self) -> int: ...
    def getName(self) -> javax.xml.namespace.QName: ...
    def getValue(self) -> str: ...
    def hashCode(self) -> int: ...
    def isAttribute(self) -> bool: ...
    def isSpecified(self) -> bool: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class CharactersEventImpl(BaseEventImpl, javax.xml.stream.events.Characters):
    def __init__(self, location: javax.xml.stream.Location, string: str, boolean: bool): ...
    def asCharacters(self) -> javax.xml.stream.events.Characters: ...
    @staticmethod
    def createIgnorableWS(location: javax.xml.stream.Location, string: str) -> 'CharactersEventImpl': ...
    @staticmethod
    def createNonIgnorableWS(location: javax.xml.stream.Location, string: str) -> 'CharactersEventImpl': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getData(self) -> str: ...
    def getEventType(self) -> int: ...
    def hashCode(self) -> int: ...
    def isCData(self) -> bool: ...
    def isCharacters(self) -> bool: ...
    def isIgnorableWhiteSpace(self) -> bool: ...
    def isWhiteSpace(self) -> bool: ...
    def setWhitespaceStatus(self, boolean: bool) -> None: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class CommentEventImpl(BaseEventImpl, javax.xml.stream.events.Comment):
    def __init__(self, location: javax.xml.stream.Location, string: str): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getEventType(self) -> int: ...
    def getText(self) -> str: ...
    def hashCode(self) -> int: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class DTDEventImpl(BaseEventImpl, org.codehaus.stax2.evt.DTD2):
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, string: str): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, string: str, string2: str): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, string: str, string2: str, string3: str, string4: str, object: typing.Any): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDocumentTypeDeclaration(self) -> str: ...
    def getEntities(self) -> java.util.List[javax.xml.stream.events.EntityDeclaration]: ...
    def getEventType(self) -> int: ...
    def getInternalSubset(self) -> str: ...
    def getNotations(self) -> java.util.List[javax.xml.stream.events.NotationDeclaration]: ...
    def getProcessedDTD(self) -> typing.Any: ...
    def getPublicId(self) -> str: ...
    def getRootName(self) -> str: ...
    def getSystemId(self) -> str: ...
    def hashCode(self) -> int: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class EndDocumentEventImpl(BaseEventImpl, javax.xml.stream.events.EndDocument):
    def __init__(self, location: javax.xml.stream.Location): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getEventType(self) -> int: ...
    def hashCode(self) -> int: ...
    def isEndDocument(self) -> bool: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class EndElementEventImpl(BaseEventImpl, javax.xml.stream.events.EndElement):
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, qName: javax.xml.namespace.QName, iterator: java.util.Iterator[javax.xml.stream.events.Namespace]): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, xMLStreamReader: javax.xml.stream.XMLStreamReader): ...
    def asEndElement(self) -> javax.xml.stream.events.EndElement: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getEventType(self) -> int: ...
    def getName(self) -> javax.xml.namespace.QName: ...
    def getNamespaces(self) -> java.util.Iterator[javax.xml.stream.events.Namespace]: ...
    def hashCode(self) -> int: ...
    def isEndElement(self) -> bool: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class EntityDeclarationEventImpl(BaseEventImpl, javax.xml.stream.events.EntityDeclaration):
    def __init__(self, location: javax.xml.stream.Location, string: str): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBaseURI(self) -> str: ...
    def getEventType(self) -> int: ...
    def getName(self) -> str: ...
    def getNotationName(self) -> str: ...
    def getPublicId(self) -> str: ...
    def getReplacementText(self) -> str: ...
    def getSystemId(self) -> str: ...
    def hashCode(self) -> int: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class EntityReferenceEventImpl(BaseEventImpl, javax.xml.stream.events.EntityReference):
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, string: str): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, entityDeclaration: javax.xml.stream.events.EntityDeclaration): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDeclaration(self) -> javax.xml.stream.events.EntityDeclaration: ...
    def getEventType(self) -> int: ...
    def getName(self) -> str: ...
    def hashCode(self) -> int: ...
    def isEntityReference(self) -> bool: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class NotationDeclarationEventImpl(BaseEventImpl, org.codehaus.stax2.evt.NotationDeclaration2):
    def __init__(self, location: javax.xml.stream.Location, string: str, string2: str, string3: str): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBaseURI(self) -> str: ...
    def getEventType(self) -> int: ...
    def getName(self) -> str: ...
    def getPublicId(self) -> str: ...
    def getSystemId(self) -> str: ...
    def hashCode(self) -> int: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class ProcInstrEventImpl(BaseEventImpl, javax.xml.stream.events.ProcessingInstruction):
    def __init__(self, location: javax.xml.stream.Location, string: str, string2: str): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getData(self) -> str: ...
    def getEventType(self) -> int: ...
    def getTarget(self) -> str: ...
    def hashCode(self) -> int: ...
    def isProcessingInstruction(self) -> bool: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class StartDocumentEventImpl(BaseEventImpl, javax.xml.stream.events.StartDocument):
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, string: str): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, string: str, string2: str): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, string: str, string2: str, boolean: bool, boolean2: bool): ...
    @typing.overload
    def __init__(self, location: javax.xml.stream.Location, xMLStreamReader: javax.xml.stream.XMLStreamReader): ...
    def encodingSet(self) -> bool: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getCharacterEncodingScheme(self) -> str: ...
    def getEventType(self) -> int: ...
    def getSystemId(self) -> str: ...
    def getVersion(self) -> str: ...
    def hashCode(self) -> int: ...
    def isStandalone(self) -> bool: ...
    def isStartDocument(self) -> bool: ...
    def standaloneSet(self) -> bool: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class StartElementEventImpl(BaseEventImpl, javax.xml.stream.events.StartElement):
    def asStartElement(self) -> javax.xml.stream.events.StartElement: ...
    @staticmethod
    def construct(location: javax.xml.stream.Location, qName: javax.xml.namespace.QName, iterator: java.util.Iterator[typing.Any], iterator2: java.util.Iterator[typing.Any], namespaceContext: javax.xml.namespace.NamespaceContext) -> 'StartElementEventImpl': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAttributeByName(self, qName: javax.xml.namespace.QName) -> javax.xml.stream.events.Attribute: ...
    def getAttributes(self) -> java.util.Iterator[javax.xml.stream.events.Attribute]: ...
    def getEventType(self) -> int: ...
    def getName(self) -> javax.xml.namespace.QName: ...
    def getNamespaceContext(self) -> javax.xml.namespace.NamespaceContext: ...
    def getNamespaceURI(self, string: str) -> str: ...
    def getNamespaces(self) -> java.util.Iterator[javax.xml.stream.events.Namespace]: ...
    def hashCode(self) -> int: ...
    def isStartElement(self) -> bool: ...
    def writeAsEncodedUnicode(self, writer: java.io.Writer) -> None: ...
    def writeUsing(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2) -> None: ...

class NamespaceEventImpl(AttributeEventImpl, javax.xml.stream.events.Namespace):
    @staticmethod
    def constructDefaultNamespace(location: javax.xml.stream.Location, string: str) -> 'NamespaceEventImpl': ...
    @staticmethod
    def constructNamespace(location: javax.xml.stream.Location, string: str, string2: str) -> 'NamespaceEventImpl': ...
    def getEventType(self) -> int: ...
    def getNamespaceURI(self) -> str: ...
    def getPrefix(self) -> str: ...
    def isDefaultNamespaceDeclaration(self) -> bool: ...
    def isNamespace(self) -> bool: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.stax2.ri.evt")``.

    AttributeEventImpl: typing.Type[AttributeEventImpl]
    BaseEventImpl: typing.Type[BaseEventImpl]
    CharactersEventImpl: typing.Type[CharactersEventImpl]
    CommentEventImpl: typing.Type[CommentEventImpl]
    DTDEventImpl: typing.Type[DTDEventImpl]
    EndDocumentEventImpl: typing.Type[EndDocumentEventImpl]
    EndElementEventImpl: typing.Type[EndElementEventImpl]
    EntityDeclarationEventImpl: typing.Type[EntityDeclarationEventImpl]
    EntityReferenceEventImpl: typing.Type[EntityReferenceEventImpl]
    MergedNsContext: typing.Type[MergedNsContext]
    NamespaceEventImpl: typing.Type[NamespaceEventImpl]
    NotationDeclarationEventImpl: typing.Type[NotationDeclarationEventImpl]
    ProcInstrEventImpl: typing.Type[ProcInstrEventImpl]
    StartDocumentEventImpl: typing.Type[StartDocumentEventImpl]
    StartElementEventImpl: typing.Type[StartElementEventImpl]
    Stax2EventAllocatorImpl: typing.Type[Stax2EventAllocatorImpl]
    Stax2EventReaderAdapter: typing.Type[Stax2EventReaderAdapter]
    Stax2FilteredEventReader: typing.Type[Stax2FilteredEventReader]
