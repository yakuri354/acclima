
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import decimal
import java.io
import java.math
import javax.xml.namespace
import javax.xml.stream
import javax.xml.stream.util
import jpype
import org.codehaus.stax2
import org.codehaus.stax2.typed
import org.codehaus.stax2.validation
import typing



class StreamReader2Delegate(javax.xml.stream.util.StreamReaderDelegate, org.codehaus.stax2.XMLStreamReader2):
    def __init__(self, xMLStreamReader2: org.codehaus.stax2.XMLStreamReader2): ...
    def closeCompletely(self) -> None: ...
    def getAttributeAs(self, int: int, typedValueDecoder: org.codehaus.stax2.typed.TypedValueDecoder) -> None: ...
    def getAttributeAsArray(self, int: int, typedArrayDecoder: org.codehaus.stax2.typed.TypedArrayDecoder) -> int: ...
    @typing.overload
    def getAttributeAsBinary(self, int: int) -> typing.MutableSequence[int]: ...
    @typing.overload
    def getAttributeAsBinary(self, int: int, base64Variant: org.codehaus.stax2.typed.Base64Variant) -> typing.MutableSequence[int]: ...
    def getAttributeAsBoolean(self, int: int) -> bool: ...
    def getAttributeAsDecimal(self, int: int) -> java.math.BigDecimal: ...
    def getAttributeAsDouble(self, int: int) -> float: ...
    def getAttributeAsDoubleArray(self, int: int) -> typing.MutableSequence[float]: ...
    def getAttributeAsFloat(self, int: int) -> float: ...
    def getAttributeAsFloatArray(self, int: int) -> typing.MutableSequence[float]: ...
    def getAttributeAsInt(self, int: int) -> int: ...
    def getAttributeAsIntArray(self, int: int) -> typing.MutableSequence[int]: ...
    def getAttributeAsInteger(self, int: int) -> java.math.BigInteger: ...
    def getAttributeAsLong(self, int: int) -> int: ...
    def getAttributeAsLongArray(self, int: int) -> typing.MutableSequence[int]: ...
    def getAttributeAsQName(self, int: int) -> javax.xml.namespace.QName: ...
    def getAttributeIndex(self, string: str, string2: str) -> int: ...
    def getAttributeInfo(self) -> org.codehaus.stax2.AttributeInfo: ...
    def getDTDInfo(self) -> org.codehaus.stax2.DTDInfo: ...
    def getDepth(self) -> int: ...
    def getElementAs(self, typedValueDecoder: org.codehaus.stax2.typed.TypedValueDecoder) -> None: ...
    @typing.overload
    def getElementAsBinary(self) -> typing.MutableSequence[int]: ...
    @typing.overload
    def getElementAsBinary(self, base64Variant: org.codehaus.stax2.typed.Base64Variant) -> typing.MutableSequence[int]: ...
    def getElementAsBoolean(self) -> bool: ...
    def getElementAsDecimal(self) -> java.math.BigDecimal: ...
    def getElementAsDouble(self) -> float: ...
    def getElementAsFloat(self) -> float: ...
    def getElementAsInt(self) -> int: ...
    def getElementAsInteger(self) -> java.math.BigInteger: ...
    def getElementAsLong(self) -> int: ...
    def getElementAsQName(self) -> javax.xml.namespace.QName: ...
    def getFeature(self, string: str) -> typing.Any: ...
    def getLocationInfo(self) -> org.codehaus.stax2.LocationInfo: ...
    def getNonTransientNamespaceContext(self) -> javax.xml.namespace.NamespaceContext: ...
    def getPrefixedName(self) -> str: ...
    @typing.overload
    def getText(self, writer: java.io.Writer, boolean: bool) -> int: ...
    @typing.overload
    def getText(self) -> str: ...
    def isEmptyElement(self) -> bool: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def readElementAsArray(self, typedArrayDecoder: org.codehaus.stax2.typed.TypedArrayDecoder) -> int: ...
    @typing.overload
    def readElementAsBinary(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int) -> int: ...
    @typing.overload
    def readElementAsBinary(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int, base64Variant: org.codehaus.stax2.typed.Base64Variant) -> int: ...
    def readElementAsDoubleArray(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> int: ...
    def readElementAsFloatArray(self, floatArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> int: ...
    def readElementAsIntArray(self, intArray: typing.Union[typing.List[int], jpype.JArray], int2: int, int3: int) -> int: ...
    def readElementAsLongArray(self, longArray: typing.Union[typing.List[int], jpype.JArray], int: int, int2: int) -> int: ...
    def setFeature(self, string: str, object: typing.Any) -> None: ...
    def setParent(self, xMLStreamReader: javax.xml.stream.XMLStreamReader) -> None: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...
    def setValidationProblemHandler(self, validationProblemHandler: org.codehaus.stax2.validation.ValidationProblemHandler) -> org.codehaus.stax2.validation.ValidationProblemHandler: ...
    def skipElement(self) -> None: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidator: org.codehaus.stax2.validation.XMLValidator) -> org.codehaus.stax2.validation.XMLValidator: ...
    def validateAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...

class StreamWriterDelegate(javax.xml.stream.XMLStreamWriter):
    def __init__(self, xMLStreamWriter: javax.xml.stream.XMLStreamWriter): ...
    def close(self) -> None: ...
    def flush(self) -> None: ...
    def getNamespaceContext(self) -> javax.xml.namespace.NamespaceContext: ...
    def getParent(self) -> javax.xml.stream.XMLStreamWriter: ...
    def getPrefix(self, string: str) -> str: ...
    def getProperty(self, string: str) -> typing.Any: ...
    def setDefaultNamespace(self, string: str) -> None: ...
    def setNamespaceContext(self, namespaceContext: javax.xml.namespace.NamespaceContext) -> None: ...
    def setParent(self, xMLStreamWriter: javax.xml.stream.XMLStreamWriter) -> None: ...
    def setPrefix(self, string: str, string2: str) -> None: ...
    @typing.overload
    def writeAttribute(self, string: str, string2: str) -> None: ...
    @typing.overload
    def writeAttribute(self, string: str, string2: str, string3: str) -> None: ...
    @typing.overload
    def writeAttribute(self, string: str, string2: str, string3: str, string4: str) -> None: ...
    def writeCData(self, string: str) -> None: ...
    @typing.overload
    def writeCharacters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeCharacters(self, string: str) -> None: ...
    def writeComment(self, string: str) -> None: ...
    def writeDTD(self, string: str) -> None: ...
    def writeDefaultNamespace(self, string: str) -> None: ...
    @typing.overload
    def writeEmptyElement(self, string: str) -> None: ...
    @typing.overload
    def writeEmptyElement(self, string: str, string2: str) -> None: ...
    @typing.overload
    def writeEmptyElement(self, string: str, string2: str, string3: str) -> None: ...
    def writeEndDocument(self) -> None: ...
    def writeEndElement(self) -> None: ...
    def writeEntityRef(self, string: str) -> None: ...
    def writeNamespace(self, string: str, string2: str) -> None: ...
    @typing.overload
    def writeProcessingInstruction(self, string: str) -> None: ...
    @typing.overload
    def writeProcessingInstruction(self, string: str, string2: str) -> None: ...
    @typing.overload
    def writeStartDocument(self) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str, string2: str) -> None: ...
    @typing.overload
    def writeStartElement(self, string: str) -> None: ...
    @typing.overload
    def writeStartElement(self, string: str, string2: str) -> None: ...
    @typing.overload
    def writeStartElement(self, string: str, string2: str, string3: str) -> None: ...

class StreamWriter2Delegate(StreamWriterDelegate, org.codehaus.stax2.XMLStreamWriter2):
    def __init__(self, xMLStreamWriter2: org.codehaus.stax2.XMLStreamWriter2): ...
    def closeCompletely(self) -> None: ...
    def copyEventFromReader(self, xMLStreamReader2: org.codehaus.stax2.XMLStreamReader2, boolean: bool) -> None: ...
    def getEncoding(self) -> str: ...
    def getLocation(self) -> org.codehaus.stax2.XMLStreamLocation2: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def setParent(self, xMLStreamWriter: javax.xml.stream.XMLStreamWriter) -> None: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...
    def setValidationProblemHandler(self, validationProblemHandler: org.codehaus.stax2.validation.ValidationProblemHandler) -> org.codehaus.stax2.validation.ValidationProblemHandler: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...
    @typing.overload
    def stopValidatingAgainst(self, xMLValidator: org.codehaus.stax2.validation.XMLValidator) -> org.codehaus.stax2.validation.XMLValidator: ...
    def validateAgainst(self, xMLValidationSchema: org.codehaus.stax2.validation.XMLValidationSchema) -> org.codehaus.stax2.validation.XMLValidator: ...
    @typing.overload
    def writeBinary(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int) -> None: ...
    @typing.overload
    def writeBinary(self, base64Variant: org.codehaus.stax2.typed.Base64Variant, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int) -> None: ...
    @typing.overload
    def writeBinaryAttribute(self, string: str, string2: str, string3: str, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...
    @typing.overload
    def writeBinaryAttribute(self, base64Variant: org.codehaus.stax2.typed.Base64Variant, string: str, string2: str, string3: str, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...
    def writeBoolean(self, boolean: bool) -> None: ...
    def writeBooleanAttribute(self, string: str, string2: str, string3: str, boolean: bool) -> None: ...
    @typing.overload
    def writeCData(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeCData(self, string: str) -> None: ...
    @typing.overload
    def writeDTD(self, string: str, string2: str, string3: str, string4: str) -> None: ...
    @typing.overload
    def writeDTD(self, string: str) -> None: ...
    def writeDecimal(self, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> None: ...
    def writeDecimalAttribute(self, string: str, string2: str, string3: str, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> None: ...
    def writeDouble(self, double: float) -> None: ...
    def writeDoubleArray(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> None: ...
    def writeDoubleArrayAttribute(self, string: str, string2: str, string3: str, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def writeDoubleAttribute(self, string: str, string2: str, string3: str, double: float) -> None: ...
    def writeFloat(self, float: float) -> None: ...
    def writeFloatArray(self, floatArray: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int) -> None: ...
    def writeFloatArrayAttribute(self, string: str, string2: str, string3: str, floatArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def writeFloatAttribute(self, string: str, string2: str, string3: str, float: float) -> None: ...
    def writeFullEndElement(self) -> None: ...
    def writeInt(self, int: int) -> None: ...
    def writeIntArray(self, intArray: typing.Union[typing.List[int], jpype.JArray], int2: int, int3: int) -> None: ...
    def writeIntArrayAttribute(self, string: str, string2: str, string3: str, intArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    def writeIntAttribute(self, string: str, string2: str, string3: str, int: int) -> None: ...
    def writeInteger(self, bigInteger: java.math.BigInteger) -> None: ...
    def writeIntegerAttribute(self, string: str, string2: str, string3: str, bigInteger: java.math.BigInteger) -> None: ...
    def writeLong(self, long: int) -> None: ...
    def writeLongArray(self, longArray: typing.Union[typing.List[int], jpype.JArray], int: int, int2: int) -> None: ...
    def writeLongArrayAttribute(self, string: str, string2: str, string3: str, longArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    def writeLongAttribute(self, string: str, string2: str, string3: str, long: int) -> None: ...
    def writeQName(self, qName: javax.xml.namespace.QName) -> None: ...
    def writeQNameAttribute(self, string: str, string2: str, string3: str, qName: javax.xml.namespace.QName) -> None: ...
    @typing.overload
    def writeRaw(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeRaw(self, string: str) -> None: ...
    @typing.overload
    def writeRaw(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def writeSpace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeSpace(self, string: str) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str, string2: str, boolean: bool) -> None: ...
    @typing.overload
    def writeStartDocument(self) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str, string2: str) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.stax2.util")``.

    StreamReader2Delegate: typing.Type[StreamReader2Delegate]
    StreamWriter2Delegate: typing.Type[StreamWriter2Delegate]
    StreamWriterDelegate: typing.Type[StreamWriterDelegate]
