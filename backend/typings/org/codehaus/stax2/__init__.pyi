
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.net
import javax.xml.namespace
import javax.xml.stream
import javax.xml.transform
import jpype
import jpype.protocol
import org.codehaus.stax2.evt
import org.codehaus.stax2.io
import org.codehaus.stax2.osgi
import org.codehaus.stax2.ri
import org.codehaus.stax2.typed
import org.codehaus.stax2.util
import org.codehaus.stax2.validation
import typing



class AttributeInfo:
    def findAttributeIndex(self, string: str, string2: str) -> int: ...
    def getAttributeCount(self) -> int: ...
    def getIdAttributeIndex(self) -> int: ...
    def getNotationAttributeIndex(self) -> int: ...

class DTDInfo:
    def getDTDInternalSubset(self) -> str: ...
    def getDTDPublicId(self) -> str: ...
    def getDTDRootName(self) -> str: ...
    def getDTDSystemId(self) -> str: ...
    def getProcessedDTD(self) -> typing.Any: ...
    def getProcessedDTDSchema(self) -> org.codehaus.stax2.validation.DTDValidationSchema: ...

class LocationInfo:
    def getCurrentLocation(self) -> 'XMLStreamLocation2': ...
    def getEndLocation(self) -> 'XMLStreamLocation2': ...
    def getEndingByteOffset(self) -> int: ...
    def getEndingCharOffset(self) -> int: ...
    def getLocation(self) -> javax.xml.stream.Location: ...
    def getStartLocation(self) -> 'XMLStreamLocation2': ...
    def getStartingByteOffset(self) -> int: ...
    def getStartingCharOffset(self) -> int: ...

class XMLEventReader2(javax.xml.stream.XMLEventReader):
    def hasNextEvent(self) -> bool: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...

class XMLReporter2(javax.xml.stream.XMLReporter):
    @typing.overload
    def report(self, string: str, string2: str, object: typing.Any, location: javax.xml.stream.Location) -> None: ...
    @typing.overload
    def report(self, xMLValidationProblem: org.codehaus.stax2.validation.XMLValidationProblem) -> None: ...

class XMLStreamLocation2(javax.xml.stream.Location):
    NOT_AVAILABLE: typing.ClassVar['XMLStreamLocation2'] = ...
    def getContext(self) -> 'XMLStreamLocation2': ...

class XMLStreamProperties:
    XSP_IMPLEMENTATION_NAME: typing.ClassVar[str] = ...
    XSP_IMPLEMENTATION_VERSION: typing.ClassVar[str] = ...
    XSP_SUPPORTS_XML11: typing.ClassVar[str] = ...
    XSP_NAMESPACE_AWARE: typing.ClassVar[str] = ...
    XSP_PROBLEM_REPORTER: typing.ClassVar[str] = ...
    XSP_SUPPORT_XMLID: typing.ClassVar[str] = ...
    XSP_V_XMLID_NONE: typing.ClassVar[str] = ...
    XSP_V_XMLID_TYPING: typing.ClassVar[str] = ...
    XSP_V_XMLID_FULL: typing.ClassVar[str] = ...

class XMLStreamReader2(org.codehaus.stax2.typed.TypedXMLStreamReader, org.codehaus.stax2.validation.Validatable):
    FEATURE_DTD_OVERRIDE: typing.ClassVar[str] = ...
    def closeCompletely(self) -> None: ...
    def getAttributeInfo(self) -> AttributeInfo: ...
    def getDTDInfo(self) -> DTDInfo: ...
    def getDepth(self) -> int: ...
    def getFeature(self, string: str) -> typing.Any: ...
    def getLocationInfo(self) -> LocationInfo: ...
    def getNonTransientNamespaceContext(self) -> javax.xml.namespace.NamespaceContext: ...
    def getPrefixedName(self) -> str: ...
    @typing.overload
    def getText(self, writer: java.io.Writer, boolean: bool) -> int: ...
    @typing.overload
    def getText(self) -> str: ...
    def isEmptyElement(self) -> bool: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def setFeature(self, string: str, object: typing.Any) -> None: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...
    def skipElement(self) -> None: ...

class XMLStreamWriter2(org.codehaus.stax2.typed.TypedXMLStreamWriter, org.codehaus.stax2.validation.Validatable):
    def closeCompletely(self) -> None: ...
    def copyEventFromReader(self, xMLStreamReader2: XMLStreamReader2, boolean: bool) -> None: ...
    def getEncoding(self) -> str: ...
    def getLocation(self) -> XMLStreamLocation2: ...
    def isPropertySupported(self, string: str) -> bool: ...
    def setProperty(self, string: str, object: typing.Any) -> bool: ...
    @typing.overload
    def writeCData(self, string: str) -> None: ...
    @typing.overload
    def writeCData(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeDTD(self, string: str) -> None: ...
    @typing.overload
    def writeDTD(self, string: str, string2: str, string3: str, string4: str) -> None: ...
    def writeFullEndElement(self) -> None: ...
    @typing.overload
    def writeRaw(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeRaw(self, string: str) -> None: ...
    @typing.overload
    def writeRaw(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def writeSpace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def writeSpace(self, string: str) -> None: ...
    @typing.overload
    def writeStartDocument(self) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str, string2: str) -> None: ...
    @typing.overload
    def writeStartDocument(self, string: str, string2: str, boolean: bool) -> None: ...

class XMLInputFactory2(javax.xml.stream.XMLInputFactory, XMLStreamProperties):
    P_REPORT_PROLOG_WHITESPACE: typing.ClassVar[str] = ...
    P_REPORT_CDATA: typing.ClassVar[str] = ...
    P_LAZY_PARSING: typing.ClassVar[str] = ...
    P_INTERN_NAMES: typing.ClassVar[str] = ...
    P_INTERN_NS_URIS: typing.ClassVar[str] = ...
    P_PRESERVE_LOCATION: typing.ClassVar[str] = ...
    P_AUTO_CLOSE_INPUT: typing.ClassVar[str] = ...
    P_DTD_OVERRIDE: typing.ClassVar[str] = ...
    def configureForConvenience(self) -> None: ...
    def configureForLowMemUsage(self) -> None: ...
    def configureForRoundTripping(self) -> None: ...
    def configureForSpeed(self) -> None: ...
    def configureForXmlConformance(self) -> None: ...
    @typing.overload
    def createXMLEventReader(self, inputStream: java.io.InputStream) -> javax.xml.stream.XMLEventReader: ...
    @typing.overload
    def createXMLEventReader(self, inputStream: java.io.InputStream, string: str) -> javax.xml.stream.XMLEventReader: ...
    @typing.overload
    def createXMLEventReader(self, reader: java.io.Reader) -> javax.xml.stream.XMLEventReader: ...
    @typing.overload
    def createXMLEventReader(self, string: str, inputStream: java.io.InputStream) -> javax.xml.stream.XMLEventReader: ...
    @typing.overload
    def createXMLEventReader(self, string: str, reader: java.io.Reader) -> javax.xml.stream.XMLEventReader: ...
    @typing.overload
    def createXMLEventReader(self, xMLStreamReader: javax.xml.stream.XMLStreamReader) -> javax.xml.stream.XMLEventReader: ...
    @typing.overload
    def createXMLEventReader(self, source: javax.xml.transform.Source) -> javax.xml.stream.XMLEventReader: ...
    @typing.overload
    def createXMLEventReader(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> XMLEventReader2: ...
    @typing.overload
    def createXMLEventReader(self, uRL: java.net.URL) -> XMLEventReader2: ...
    @typing.overload
    def createXMLStreamReader(self, inputStream: java.io.InputStream) -> javax.xml.stream.XMLStreamReader: ...
    @typing.overload
    def createXMLStreamReader(self, inputStream: java.io.InputStream, string: str) -> javax.xml.stream.XMLStreamReader: ...
    @typing.overload
    def createXMLStreamReader(self, reader: java.io.Reader) -> javax.xml.stream.XMLStreamReader: ...
    @typing.overload
    def createXMLStreamReader(self, string: str, inputStream: java.io.InputStream) -> javax.xml.stream.XMLStreamReader: ...
    @typing.overload
    def createXMLStreamReader(self, string: str, reader: java.io.Reader) -> javax.xml.stream.XMLStreamReader: ...
    @typing.overload
    def createXMLStreamReader(self, source: javax.xml.transform.Source) -> javax.xml.stream.XMLStreamReader: ...
    @typing.overload
    def createXMLStreamReader(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> XMLStreamReader2: ...
    @typing.overload
    def createXMLStreamReader(self, uRL: java.net.URL) -> XMLStreamReader2: ...

class XMLOutputFactory2(javax.xml.stream.XMLOutputFactory, XMLStreamProperties):
    P_AUTOMATIC_EMPTY_ELEMENTS: typing.ClassVar[str] = ...
    P_AUTO_CLOSE_OUTPUT: typing.ClassVar[str] = ...
    P_AUTOMATIC_NS_PREFIX: typing.ClassVar[str] = ...
    P_TEXT_ESCAPER: typing.ClassVar[str] = ...
    P_ATTR_VALUE_ESCAPER: typing.ClassVar[str] = ...
    def configureForRobustness(self) -> None: ...
    def configureForSpeed(self) -> None: ...
    def configureForXmlConformance(self) -> None: ...
    @typing.overload
    def createXMLEventWriter(self, outputStream: java.io.OutputStream) -> javax.xml.stream.XMLEventWriter: ...
    @typing.overload
    def createXMLEventWriter(self, outputStream: java.io.OutputStream, string: str) -> javax.xml.stream.XMLEventWriter: ...
    @typing.overload
    def createXMLEventWriter(self, writer: java.io.Writer) -> javax.xml.stream.XMLEventWriter: ...
    @typing.overload
    def createXMLEventWriter(self, result: javax.xml.transform.Result) -> javax.xml.stream.XMLEventWriter: ...
    @typing.overload
    def createXMLEventWriter(self, writer: java.io.Writer, string: str) -> javax.xml.stream.XMLEventWriter: ...
    @typing.overload
    def createXMLEventWriter(self, xMLStreamWriter: javax.xml.stream.XMLStreamWriter) -> javax.xml.stream.XMLEventWriter: ...
    @typing.overload
    def createXMLStreamWriter(self, outputStream: java.io.OutputStream) -> javax.xml.stream.XMLStreamWriter: ...
    @typing.overload
    def createXMLStreamWriter(self, outputStream: java.io.OutputStream, string: str) -> javax.xml.stream.XMLStreamWriter: ...
    @typing.overload
    def createXMLStreamWriter(self, writer: java.io.Writer) -> javax.xml.stream.XMLStreamWriter: ...
    @typing.overload
    def createXMLStreamWriter(self, result: javax.xml.transform.Result) -> javax.xml.stream.XMLStreamWriter: ...
    @typing.overload
    def createXMLStreamWriter(self, writer: java.io.Writer, string: str) -> XMLStreamWriter2: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.codehaus.stax2")``.

    AttributeInfo: typing.Type[AttributeInfo]
    DTDInfo: typing.Type[DTDInfo]
    LocationInfo: typing.Type[LocationInfo]
    XMLEventReader2: typing.Type[XMLEventReader2]
    XMLInputFactory2: typing.Type[XMLInputFactory2]
    XMLOutputFactory2: typing.Type[XMLOutputFactory2]
    XMLReporter2: typing.Type[XMLReporter2]
    XMLStreamLocation2: typing.Type[XMLStreamLocation2]
    XMLStreamProperties: typing.Type[XMLStreamProperties]
    XMLStreamReader2: typing.Type[XMLStreamReader2]
    XMLStreamWriter2: typing.Type[XMLStreamWriter2]
    evt: org.codehaus.stax2.evt.__module_protocol__
    io: org.codehaus.stax2.io.__module_protocol__
    osgi: org.codehaus.stax2.osgi.__module_protocol__
    ri: org.codehaus.stax2.ri.__module_protocol__
    typed: org.codehaus.stax2.typed.__module_protocol__
    util: org.codehaus.stax2.util.__module_protocol__
    validation: org.codehaus.stax2.validation.__module_protocol__
